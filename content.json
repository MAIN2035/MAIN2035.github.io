{"meta":{"title":"ITthreeの博客","subtitle":"","description":"ITthreeの博客,我思故我在","author":"ITthree","url":"https://main2035.github.io","root":"/"},"pages":[{"title":"","date":"2021-02-14T04:26:35.626Z","updated":"2021-02-14T04:26:35.626Z","comments":false,"path":"about/index.html","permalink":"https://main2035.github.io/about/index.html","excerpt":"","text":"关于本站本站创建于2020年下半年，中间反复更改折腾2月有余。 从2020年初开始写博客，起初发表在博客园，之后又在CSDN发表了些博客，都是些学习时的笔记，记录自己技术生涯的成长过程。 关于我“有些人20岁时就死了，而我20岁时一切才刚刚开始。” 开源，迷雾海岸的灯塔，精神的导师指引我们前行。 待续… 奋斗是一生的事业。 “问我，我从不多说，一生便是说一句少一句。” 2021/2/14"},{"title":"所有分类","date":"2020-10-18T11:35:12.947Z","updated":"2020-10-18T11:35:12.947Z","comments":true,"path":"categories/index.html","permalink":"https://main2035.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-10-18T11:34:47.121Z","updated":"2020-10-18T11:34:47.121Z","comments":true,"path":"tags/index.html","permalink":"https://main2035.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"找回宝塔面板信息|ssh密钥免密登录服务器","slug":"20210805","date":"2021-08-05T05:56:17.368Z","updated":"2021-08-05T07:25:03.295Z","comments":true,"path":"2021/08/05/20210805/","link":"","permalink":"https://main2035.github.io/2021/08/05/20210805/","excerpt":"","text":"找回宝塔面板信息 ssh连接服务器 输入 /etc/init.d/bt default 解决 补充： 不用使用额外的ssh工具连接服务器，Linux下shell终端即可（win系统使用git终端也可） 附ssh常用命令： ssh root@127.0.0.1 #以root用户登入服务器地址为127.0.0.1的服务器 ssh root@127.0.0.1 -i id_rsa #使用密钥登录，通常不用输入密码（不过要事先设置，如何设置请看下：） 前情提示：win系统需要借助git终端 下面我们三步走： 生成密钥——一路回车 上传密钥 使用密钥链接 上面操作用到的command #注意密钥默认存放在.ssh目录（注意你的位置） #生成密钥 ssh-keygen -t rsa #上传密钥 ssh-copy-id -i id_rsa.pub root@127.0.0.1 -p 22","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://main2035.github.io/categories/ubuntu/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://main2035.github.io/tags/shell/"}]},{"title":"anaconda入门","slug":"Python-1","date":"2021-03-20T14:01:52.532Z","updated":"2021-03-27T02:55:22.359Z","comments":true,"path":"2021/03/20/Python-1/","link":"","permalink":"https://main2035.github.io/2021/03/20/Python-1/","excerpt":"","text":"安装不做介绍，下载链接https://anaconda.en.softonic.com/ 环境命令： 创建一个名称为python37的虚拟环境并指定python版本为3.7 ： conda create -n python37 python=3.7 查看环境：conda info --envs 激活某个环境：conda activate python34 包命令 安装包：conda install package_name 卸载包：conda remove pandas 更新包：conda update package_name Pycharm 配置anaconda File -&gt; Settings","categories":[{"name":"Python","slug":"Python","permalink":"https://main2035.github.io/categories/Python/"}],"tags":[{"name":"anaconda","slug":"anaconda","permalink":"https://main2035.github.io/tags/anaconda/"}]},{"title":"","slug":"PriorityQueue","date":"2021-03-03T05:05:06.103Z","updated":"2021-03-03T05:05:06.134Z","comments":true,"path":"2021/03/03/PriorityQueue/","link":"","permalink":"https://main2035.github.io/2021/03/03/PriorityQueue/","excerpt":"","text":"PriorityQueue插入元素 //代理方法 public boolean add(E e) &amp;#123; return offer(e); &amp;#125; //目标方法 public boolean offer(E e) &amp;#123; //添加元素为null时抛出异常，添加结束 if (e == null) throw new NullPointerException(); modCount++; // int i = size; //这段扩容代码... //数组满了便调用grow()扩容，size+1 if (i &gt;= queue.length) grow(i + 1); size = i + 1; //数组为空便直接插入，否则进行上浮操作 if (i == 0) queue[0] = e; else //上浮 siftUp(i, e); return true; &amp;#125; private void grow(int minCapacity) &amp;#123; int oldCapacity = queue.length; // Double size if small; else grow by 50% //原数组大小小于64便扩容到其2倍+2，否则扩容百分之50 int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ? (oldCapacity + 2) : (oldCapacity &gt;&gt; 1)); if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); queue = Arrays.copyOf(queue, newCapacity); &amp;#125; private static int hugeCapacity(int minCapacity) &amp;#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; &amp;#125; 曾经的写法 //siftUp() private void siftUp(int k, E x) &amp;#123; while (k &gt; 0) &amp;#123; int parent = (k - 1) &gt;&gt;&gt; 1;//parentNo = (nodeNo-1)/2 Object e = queue[parent]; if (comparator.compare(x, (E) e) &gt;= 0)//调用比较器的比较方法 break; queue[k] = e; k = parent; &amp;#125; queue[k] = x; &amp;#125; 现在的写法 private void siftUp(int k, E x) &amp;#123; if (comparator != null) siftUpUsingComparator(k, x); else siftUpComparable(k, x); &amp;#125; @SuppressWarnings(&quot;unchecked&quot;) private void siftUpComparable(int k, E x) &amp;#123; Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x; while (k &gt; 0) &amp;#123; int parent = (k - 1) &gt;&gt;&gt; 1; Object e = queue[parent]; if (key.compareTo((E) e) &gt;= 0) break; queue[k] = e; k = parent; &amp;#125; queue[k] = key; &amp;#125; @SuppressWarnings(&quot;unchecked&quot;) private void siftUpUsingComparator(int k, E x) &amp;#123; while (k &gt; 0) &amp;#123; int parent = (k - 1) &gt;&gt;&gt; 1; Object e = queue[parent]; if (comparator.compare(x, (E) e) &gt;= 0) break; queue[k] = e; k = parent; &amp;#125; queue[k] = x; &amp;#125; @SuppressWarnings(&quot;unchecked&quot;) public E peek() &amp;#123; return (size == 0) ? null : (E) queue[0]; &amp;#125;","categories":[],"tags":[]},{"title":"","slug":"20210213","date":"2021-02-13T05:55:37.520Z","updated":"2021-02-13T05:55:37.520Z","comments":true,"path":"2021/02/13/20210213/","link":"","permalink":"https://main2035.github.io/2021/02/13/20210213/","excerpt":"","text":"很久没有更新blog了。 多年以后你会想起么，也会同样哼着这首歌。","categories":[],"tags":[]},{"title":"期末作业-数据库mysql","slug":"2020-dataB-End","date":"2020-12-13T16:09:36.965Z","updated":"2021-08-04T11:56:12.200Z","comments":true,"path":"2020/12/14/2020-dataB-End/","link":"","permalink":"https://main2035.github.io/2020/12/14/2020-dataB-End/","excerpt":"","text":"原题如下设有一个工程供应数据库系统，包括如下四个关系模式： S(SNO，SNAME， STATUS，CITY)；（SNO的域为1001-1999） P(PNO，PNAME，COLOR，WEIGHT)； （PNO的域为2001-2999） J(JNO，JNAME，CITY)；（JNO的域为3001-3999） SPJ(SNO，PNO，JNO，QTY)； 供应商表S由供应商号、供应商名、状态、城市组成； 零件表P 由零件号、零件名、颜色、重量组成； 工程项目表J由项目号、项目名、城市组成； 供应情况表SPJ由供应商号、零件号、项目号、供应数量组成； 1、创建数据库SPJ； 2、使用数据库SPJ； 3、创建4个具体表，分别为供应商表S、零件表P、工程项目表J、供应情况表SPJ； 4、每个表分别插入2-3条数据（供应商名为自己姓名）； 5、用SQL查询供应工程J3001零件为红色的工程号JNO； 6、用SQL查询没有使用天津供应商生产的零件的工程号； 7、用SQL语句将全部红色零件改为蓝色； 8、用SQL语句将（S1001，P2001，J3001，400）插入供应情况关系； 9、用SQL语句删除供应商表S中SNO为1001的供应商； 答题操作沙雕第一步建库再删库 1、创建数据库SPJCREATE DATABASE SPJ; 2.使用数据库SPJUSE spj; 3、创建4个具体表分别为供应商表S、零件表P、工程项目表J、供应情况表SPJ 创建供应商表S CREATE TABLE `S`( `SNO` INT NOT NULL AUTO_INCREMENT, -- 不为null 自增长 `SNAME` VARCHAR(100) NOT NULL, `STATUS`VARCHAR(100) NOT NULL, `CITY` VARCHAR(100) NOT NULL, PRIMARY KEY ( `SNO` ), -- 设置SNO为主键 CHECK(`SNO`&gt;=1001 AND `SNO`&lt;1999) -- 设置列范围 )ENGINE=INNODB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8; -- 设置数据库引擎为INNODB 主键自增长从1001开始 默认编码为utf8 创建零件表P CREATE TABLE `P`( `PNO` INT NOT NULL AUTO_INCREMENT, `PNAME` VARCHAR(100) NOT NULL, `COLOR`VARCHAR(100) NOT NULL, `WEIGHT` VARCHAR(100) NOT NULL, PRIMARY KEY ( `PNO` ), CHECK(`PNO`&gt;=2001 AND `PNO`&lt;2999) )ENGINE=INNODB AUTO_INCREMENT=2001 DEFAULT CHARSET=utf8; 创建工程项目表J CREATE TABLE `J`( `JNO` INT NOT NULL AUTO_INCREMENT, `JNAME` VARCHAR(100) NOT NULL, `CITY`VARCHAR(100) NOT NULL, PRIMARY KEY ( `JNO` ), CHECK(`JNO`&gt;=3001 AND `JNO`&lt;3999) )ENGINE=INNODB AUTO_INCREMENT=2001 DEFAULT CHARSET=utf8; 供应情况表SPJ CREATE TABLE `SPJ`( `SNO` VARCHAR(100) NOT NULL, `PNO` VARCHAR(100) NOT NULL, `JNO` VARCHAR(100) NOT NULL, `QTY` VARCHAR(100) NOT NULL )ENGINE=INNODB DEFAULT CHARSET=utf8; 4、每个表分别插入2-3条数据（供应商名为自己姓名）供应商表S插入数据 INSERT INTO `s` VALUES (&#39;1001&#39;,&#39;赵玉豪&#39;,&#39;火爆&#39;,&#39;深圳&#39;); INSERT INTO `s` VALUES (&#39;1002&#39;,&#39;赵玉豪&#39;,&#39;火爆&#39;,&#39;深圳&#39;); 供零件表S插入数据 INSERT INTO `p` VALUES (&#39;2002&#39;,&#39;把手&#39;,&#39;白色&#39;,&#39;5kg&#39;); INSERT INTO `p` VALUES (&#39;2002&#39;,&#39;把手&#39;,&#39;白色&#39;,&#39;5kg&#39;); 工程项目表S插入数据 INSERT INTO `j` VALUES (&#39;3001&#39;,&#39;wwz666&#39;,&#39;深圳&#39;); INSERT INTO `j` VALUES (&#39;3002&#39;,&#39;wwz666666&#39;,&#39;深圳&#39;); 供应情况表SPJ插入数据 INSERT INTO `spj` VALUES (&#39;1001&#39;,&#39;2001&#39;,&#39;3001&#39;,&#39;100&#39;); INSERT INTO `spj` VALUES (&#39;1002&#39;,&#39;2002&#39;,&#39;3002&#39;,&#39;200&#39;); 5、用SQL查询供应工程J3001零件为红色的工程号JNO；SELECT DISTINCT JNO,COLOR FROM J,P WHERE JNO=&#39;J3001&#39; AND COLOR=&#39;红色&#39; 6、用SQL查询没有使用天津供应商生产的零件的工程号；SELECT JNO FROM J WHERE NOT CITY IN(&#39;天津&#39;) 7、用SQL语句将全部红色零件改为蓝色；UPDATE p SET COLOR=&#39;蓝色&#39;; 8、用SQL语句将（S1001，P2001，J3001，400）插入供应情况关系INSERT INTO `spj` VALUES (&#39;S1001&#39;,&#39;P2001&#39;,&#39;J3001&#39;,&#39;400&#39;); 9、用SQL语句删除供应商表S中SNO为1001的供应商DELETE FROM s WHERE SNO=&#39;1001&#39;; 最终效果如下：暂未上传","categories":[],"tags":[{"name":"sql","slug":"sql","permalink":"https://main2035.github.io/tags/sql/"}]},{"title":"","slug":"java-mybatis-01","date":"2020-12-10T07:02:25.602Z","updated":"2020-12-10T08:12:58.045Z","comments":true,"path":"2020/12/10/java-mybatis-01/","link":"","permalink":"https://main2035.github.io/2020/12/10/java-mybatis-01/","excerpt":"","text":"#基础支持层 解析器模块常见的三种解析方式： DOM SAX StAX DOM整体将XML整体解析为树状样式 优点：便于获取数据，如在父子兄弟节点间切换很自然 缺点：占用资源较大 SAX基于事件模型的解析方式，解析时只将xml的一部分加载到内存，可在任一节点注册回调函数。 解析器解析到此节点（注册回调函数的节点）时会通过回调函数将事件发送给应用程序（推模式） StAx同SAX将XML作为一个事件流处理，应用程序调用调用解析器进行解析，最后解析器返回结果 优点：占用资源小 缺点：只能向后单向进行无法支持XPath（查询XML文档） // // Source code recreated from a .class file by IntelliJ IDEA // (powered by FernFlower decompiler) // package org.apache.ibatis.builder.xml; import java.io.IOException; import java.io.InputStream; import java.util.Locale; import org.apache.ibatis.io.Resources; import org.xml.sax.EntityResolver; import org.xml.sax.InputSource; import org.xml.sax.SAXException; public class XMLMapperEntityResolver implements EntityResolver &amp;#123; ////mybatis-config文件与指定文件的SystemId private static final String IBATIS_CONFIG_SYSTEM = &quot;ibatis-3-config.dtd&quot;; private static final String IBATIS_MAPPER_SYSTEM = &quot;ibatis-3-mapper.dtd&quot;; private static final String MYBATIS_CONFIG_SYSTEM = &quot;mybatis-3-config.dtd&quot;; private static final String MYBATIS_MAPPER_SYSTEM = &quot;mybatis-3-mapper.dtd&quot;; //mybatis-config.xml文件位置 private static final String MYBATIS_CONFIG_DTD = &quot;org/apache/ibatis/builder/xml/mybatis-3-config.dtd&quot;; //映射文件位置 private static final String MYBATIS_MAPPER_DTD = &quot;org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd&quot;; public XMLMapperEntityResolver() &amp;#123; &amp;#125; //查找指定的dtd文档调用getInputSource读取文档 public InputSource resolveEntity(String publicId, String systemId) throws SAXException &amp;#123; try &amp;#123; if (systemId != null) &amp;#123; //将传入的SystemId转为小写 String lowerCaseSystemId = systemId.toLowerCase(Locale.ENGLISH); if (lowerCaseSystemId.contains(&quot;mybatis-3-config.dtd&quot;) || lowerCaseSystemId.contains(&quot;ibatis-3-config.dtd&quot;)) &amp;#123; return this.getInputSource(&quot;org/apache/ibatis/builder/xml/mybatis-3-config.dtd&quot;, publicId, systemId); &amp;#125; if (lowerCaseSystemId.contains(&quot;mybatis-3-mapper.dtd&quot;) || lowerCaseSystemId.contains(&quot;ibatis-3-mapper.dtd&quot;)) &amp;#123; return this.getInputSource(&quot;org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd&quot;, publicId, systemId); &amp;#125; &amp;#125; return null; &amp;#125; catch (Exception var4) &amp;#123; throw new SAXException(var4.toString()); &amp;#125; &amp;#125; //读取dtd文档生成InputSource对象 private InputSource getInputSource(String path, String publicId, String systemId) &amp;#123; InputSource source = null; if (path != null) &amp;#123; try &amp;#123; InputStream in = Resources.getResourceAsStream(path); source = new InputSource(in); source.setPublicId(publicId); source.setSystemId(systemId); &amp;#125; catch (IOException var6) &amp;#123; &amp;#125; &amp;#125; return source; &amp;#125; &amp;#125;","categories":[],"tags":[]},{"title":"简单使用动态代理","slug":"Java-Aop","date":"2020-11-30T11:21:38.412Z","updated":"2020-12-07T03:06:24.836Z","comments":true,"path":"2020/11/30/Java-Aop/","link":"","permalink":"https://main2035.github.io/2020/11/30/Java-Aop/","excerpt":"","text":"简单使用动态代理 使用Aop在不改变原有结构下对类的功能进行增强 1.目标类接口 package cn.itthree.aop.service; /** * 目标接口* */ public interface UsbSell &amp;#123; /*amount表示单次购买数量 * 返回值是一个u盘的价格*/ float sell(int amount); &amp;#125; 2.目标方法 package cn.itthree.aop.factory; import cn.itthree.aop.service.UsbSell; /**目标类*/ public class UsbKingFactory implements UsbSell &amp;#123; @Override //目标方法 public float sell(int amount) &amp;#123; System.out.println(&quot;目标类中执行了目标方法调用&quot;); return 85.0f; &amp;#125; &amp;#125; 3.一个简单的代理类 package cn.itthree.aop.handler; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; public class MySellHandler implements InvocationHandler &amp;#123; private Object target = null; public MySellHandler(Object target) &amp;#123; this.target = target; &amp;#125; @Override //动态代理对象需要传入 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &amp;#123; //执行目标方法并获取返回值 Object res = null; res = method.invoke(target,args); //功能增强 //在不改变结构的情况下对目标类进行增强 if (res != null)&amp;#123; Float price = (Float)res; price += 25; res = price; &amp;#125; return res; &amp;#125; &amp;#125; 4.测试主程序 package cn.itthree.aop; import cn.itthree.aop.factory.UsbKingFactory; import cn.itthree.aop.handler.MySellHandler; import cn.itthree.aop.service.UsbSell; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Proxy; public class MainShop &amp;#123; public static void main(String[] args) &amp;#123; //1.创建目标对象 UsbSell factory = new UsbKingFactory(); //2.创建InvocationHandler对象 InvocationHandler handler = new MySellHandler(factory); //3.创建代理对象 /* public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) */ //传入3个参数： //1.目标类 //3.目标类的接口 //3.InvocationHandler对象 UsbSell proxy = (UsbSell) Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),handler); //4.通过代理执行方法 float price = proxy.sell(1); System.out.println(&quot;动态代理对象，调用方法： &quot;+price); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"AOP","slug":"AOP","permalink":"https://main2035.github.io/tags/AOP/"}]},{"title":"Ajax","slug":"Ajax-01","date":"2020-11-06T07:54:02.164Z","updated":"2020-11-12T07:06:51.167Z","comments":true,"path":"2020/11/06/Ajax-01/","link":"","permalink":"https://main2035.github.io/2020/11/06/Ajax-01/","excerpt":"","text":"用于局部刷新 异步对象(XMLHttpRequest) readyState属性表示异步对象请求的状态变化 0：创建异步对象时， new XMLHttpRequest(); 1: 初始异步请求对象， xmlHttp.open() 2：发送请求， xmlHttp.send() 3: 从服务器端获取了数据，此时3， 注意3是异步对象内部使用， 获取了原始的数据。 4：异步对象把接收的数据处理完成后。 此时开发人员在4的时候处理数据。 在4的时候，开发人员更新当前页面。 计算bmidemo全局刷新： //servlet部分 public class BmiServlet extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; String name = request.getParameter(&quot;name&quot;); String height = request.getParameter(&quot;height&quot;); String weight = request.getParameter(&quot;weight&quot;); float h = Float.valueOf(height); float w = Float.valueOf(weight); float bmi = w/(h*h); //判断bmi String msg = &quot;&quot;; if( bmi &lt;= 18.5) &amp;#123; msg = &quot;您比较瘦&quot;; &amp;#125; else if( bmi &gt; 18.5 &amp;&amp; bmi &lt;= 23.9 )&amp;#123; msg = &quot;你的bmi是正常的&quot;; &amp;#125; else if( bmi &gt;24 &amp;&amp; bmi &lt;=27)&amp;#123; msg = &quot;你的身体比较胖&quot;; &amp;#125; else &amp;#123; msg = &quot;你的身体肥胖&quot;; &amp;#125; System.out.println(&quot;msg=&quot;+msg); msg = &quot;你好，&quot;+ name +&quot; &quot;+&quot;你的bim为&quot;+bmi + msg; //存入bmi数据 request.setAttribute(&quot;msg&quot;,msg); //这里通过response并以流的方式将数据传输到前端页面 response.setContentType(&quot;text/html;charset=utf-8&quot;); PrintWriter pw = response.getWriter(); pw.println(msg); pw.flush(); pw.close(); //注意！！！这里使用的是转发来完成前后端交互 // request.getRequestDispatcher(&quot;/result.jsp&quot;).forward(request,response); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request, response); &amp;#125; &amp;#125; &lt;%--Jsp提交表单部分--%&gt; &lt;%@page contentType=&quot;text/html; charset=UTF-8&quot; language=&quot;java&quot; %&gt; &lt;html&gt; &lt;body&gt; &lt;p&gt;全局刷新计算bmi&lt;/p&gt; &lt;%--注意这里使用的是表单，而我们案例中的局部刷新并未使用表单来提交前端数据--%&gt; &lt;form action=&quot;bmiPrintServlet&quot; method=&quot;get&quot;&gt; 姓名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br/&gt; 身高：&lt;input type=&quot;text&quot; name=&quot;height&quot;&gt;&lt;br/&gt; 体重：&lt;input type=&quot;text&quot; name=&quot;weight&quot;&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; &lt;%--Jsp显示结果部分--%&gt; &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;显示bmi结果&lt;/h3&gt; &lt;p&gt;$&amp;#123;msg&amp;#125;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; demo局部刷新 &lt;%--Jsp提交并显示结果部分--%&gt; &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;局部刷新-ajax&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; //使用内存中的异步对象，代替浏览器发起请求。异步对象使用js创建和管理的。 function doAjax() &amp;#123; //1.创建异步对象 var xmlHttp = new XMLHttpRequest(); //2.绑定事件 xmlHttp.onreadystatechange = function () &amp;#123; //处理服务器端返回的数据，更新当前页面 //alert(&quot;readyState属性值======&quot; + xmlHttp.readyState + &quot;| status:&quot; + xmlHttp.status) if( xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status ==200)&amp;#123; var data = xmlHttp.responseText; //更新dom对象， 更新页面数据 document.getElementById(&quot;mydata&quot;).innerText = data; &amp;#125; &amp;#125; //3.初始请求数据 //获取dom对象的value属性值 var name = document.getElementById(&quot;name&quot;).value; var w = document.getElementById(&quot;w&quot;).value; var h = document.getElementById(&quot;h&quot;).value; //bmiPrint?name=李四&amp;w=82&amp;h=1.8 var param = &quot;name=&quot;+name + &quot;&amp;w=&quot;+w+&quot;&amp;h=&quot;+h; //alert(&quot;param=&quot;+param); xmlHttp.open(&quot;get&quot;,&quot;bmiAjax?&quot;+param,true); //4.发起请求 xmlHttp.send(); &amp;#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;局部刷新ajax-计算bmi&lt;/p&gt; &lt;div&gt; &lt;!-- 没有使用form --&gt; 姓名：&lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt; &lt;br/&gt; 体重（公斤）:&lt;input type=&quot;text&quot; id=&quot;w&quot; /&gt; &lt;br/&gt; 身高（米）：&lt;input type=&quot;text&quot; id=&quot;h&quot; /&gt; &lt;br/&gt; &lt;input type=&quot;button&quot; value=&quot;计算bmi&quot; onclick=&quot;doAjax()&quot;&gt; &lt;br/&gt; &lt;br/&gt; &lt;div id=&quot;mydata&quot;&gt;等待加载数据....&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Json 将对象转为Json格式的字符串 Servlet: package cn.it.three.controller; import cn.it.three.dao.ProvinceDao; import cn.it.three.entity.Province; import com.fasterxml.jackson.databind.ObjectMapper; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; public class QueryJsonServlet extends HttpServlet &amp;#123; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; String json = &quot;&amp;#123;&amp;#125;&quot;; String strProid = request.getParameter(&quot;proid&quot;); if (strProid != null &amp;&amp; strProid.trim().length()&gt;0 )&amp;#123; //查询数据库 ProvinceDao dao = new ProvinceDao(); Province p = dao.queryProvinceById(Integer.valueOf(strProid));//将以对象的形式返回查询结果 //将对象转换为json数据 ObjectMapper om = new ObjectMapper(); json =om.writeValueAsString(p); &amp;#125; //返回数据到前端 response.setContentType(&quot;application/json;charset=utf-8&quot;);//设置json输出编码为utf-8 PrintWriter printWriter = response.getWriter(); printWriter.println(json); printWriter.flush(); printWriter.close(); &amp;#125; &amp;#125; DAO： package cn.it.three.dao; import cn.it.three.entity.Province; import java.sql.*; //返回单个数据 public class ProvinceDao &amp;#123; //根据id获取名称 public String queryProvinceNameById(Integer provinceId) &amp;#123; Connection conn = null; PreparedStatement pst = null; ResultSet rs = null; String sql = &quot;&quot;; String url = &quot;jdbc:mysql://localhost:3306/springdb&quot;; String username = &quot;root&quot;; String password = &quot;root&quot;; String name = &quot;&quot;; try &amp;#123; //加载驱动包 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //建立数据库连接 conn = DriverManager.getConnection(url, username, password); //创建PreparedStatement sql = &quot;select name from province where id=?&quot;; pst = conn.prepareStatement(sql); //设置参数值 pst.setInt(1, provinceId); //执行sql rs = pst.executeQuery(); //遍历rs /*while(rs.next())&amp;#123; //当你的rs中有多余一条记录时。 name = rs.getString(&quot;name&quot;); &amp;#125;*/ if (rs.next()) &amp;#123; name = rs.getString(&quot;name&quot;); &amp;#125; &amp;#125; catch (ClassNotFoundException | SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //关闭资源 try &amp;#123; if (rs != null) &amp;#123; rs.close(); &amp;#125; if (pst != null) &amp;#123; pst.close(); &amp;#125; if (conn != null) &amp;#123; conn.close(); &amp;#125; &amp;#125; catch (Exception e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; return name; &amp;#125; //查询单个数据返回一个包含多个数据的对象 public Province queryProvinceById(Integer provinceId) &amp;#123; Connection conn = null; PreparedStatement pst = null; ResultSet rs = null; String sql = &quot;&quot;; String url = &quot;jdbc:mysql://localhost:3306/springdb&quot;; String username = &quot;root&quot;; String password = &quot;root&quot;; Province province = null;//借助json返回多个信息时，我们采用返回对象的方式（json会对对象进行处理） try &amp;#123; //加载驱动包 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //建立数据库连接 conn = DriverManager.getConnection(url, username, password); //创建PreparedStatement sql = &quot;select id,name,jiancheng,shenghui from province where id=?&quot;; pst = conn.prepareStatement(sql); //设置参数值 pst.setInt(1, provinceId); //执行sql rs = pst.executeQuery(); //遍历rs /*while(rs.next())&amp;#123; //当你的rs中有多余一条记录时。 name = rs.getString(&quot;name&quot;); &amp;#125;*/ if (rs.next()) &amp;#123; province = new Province(); //将查询到的数据写入对象中 province.setId(rs.getInt(&quot;id&quot;)); province.setJiancheng(rs.getString(&quot;jiancheng&quot;)); province.setName(rs.getString(&quot;name&quot;)); province.setShenghui(rs.getString(&quot;shenghui&quot;)); &amp;#125; &amp;#125; catch (ClassNotFoundException | SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //关闭资源 try &amp;#123; if (rs != null) &amp;#123; rs.close(); &amp;#125; if (pst != null) &amp;#123; pst.close(); &amp;#125; if (conn != null) &amp;#123; conn.close(); &amp;#125; &amp;#125; catch (Exception e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; return province; &amp;#125; &amp;#125; 存储数据的对象 package cn.it.three.entity; public class Province &amp;#123; /** * 用以存储查询数据*/ private Integer id; private String name; private String jiancheng; private String shenghui; public Integer getId() &amp;#123; return id; &amp;#125; public void setId(Integer id) &amp;#123; this.id = id; &amp;#125; public String getName() &amp;#123; return name; &amp;#125; public void setName(String name) &amp;#123; this.name = name; &amp;#125; public String getJiancheng() &amp;#123; return jiancheng; &amp;#125; public void setJiancheng(String jiancheng) &amp;#123; this.jiancheng = jiancheng; &amp;#125; public String getShenghui() &amp;#123; return shenghui; &amp;#125; public void setShenghui(String shenghui) &amp;#123; this.shenghui = shenghui; &amp;#125; &amp;#125; jsp &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;ajax根据省份id获取名称&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function search() &amp;#123; //发起ajax请求，传递参数给服务器， 服务器返回数据 //1.创建异步对象 var xmlHttp = new XMLHttpRequest(); //2.绑定事件 //readyState属性每更新一次，下面方法就执行一次 // 0：创建异步对象时， new XMLHttpRequest(); // 1: 初始异步请求对象， xmlHttp.open() // 2：发送请求， xmlHttp.send() // 3: 从服务器端获取了数据，此时3， 注意3是异步对象内部使用， 获取了原始的数据。 // 4：异步对象把接收的数据处理完成后。 此时开发人员在4的时候处理数据。 // 在4的时候，开发人员更新当前页面。 xmlHttp.onreadystatechange = function () &amp;#123; if( xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status== 200)&amp;#123; //alert(xmlHttp.responseText) //更新页面，就是更新dom对象 document.getElementById(&quot;proname&quot;).value= xmlHttp.responseText; &amp;#125; &amp;#125; //3.初始异步对象 //获取proid文本框的值 var proid = document.getElementById(&quot;proid&quot;).value; xmlHttp.open(&quot;get&quot;,&quot;queryProvince?proid=&quot;+proid,true);//以get方式发起请求 //4.发送请求 xmlHttp.send(); &amp;#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;ajax根据省份id获取名称&lt;/p&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;省份编号：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;proid&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;搜索&quot; onclick=&quot;search()&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;省份名称：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;proname&quot; /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;a href=&quot;html/main.jsp&quot;&gt;link&lt;/a&gt; &lt;/html&gt; Jquery &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;使用json格式的数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-3.4.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(function ()&amp;#123; $(&quot;:button&quot;).click(function ()&amp;#123;//为按钮标签绑定监听事件 var proid =$(&quot;#proid&quot;).val();//获取输入值 $.ajax(&amp;#123; url:&quot;queryJsonServlet&quot;, data:&amp;#123;&quot;proid&quot;:proid&amp;#125;, dataType:&quot;json&quot;,//期望服务端返回json数据 //更新页面显示返回数据 success:function (resp)&amp;#123; $(&quot;#proname&quot;).val(resp.name) $(&quot;#projiancheng&quot;).val(resp.jiancheng) $(&quot;#proshenghui&quot;).val(resp.shenghui) &amp;#125; &amp;#125;) &amp;#125;) &amp;#125;) &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;ajax请求使用json格式的数据&lt;/p&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;省份编号：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;proid&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;搜索&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;省份名称：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;proname&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;省份简称：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;projiancheng&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;省会名称：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;proshenghui&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://main2035.github.io/categories/JavaWeb/"}],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://main2035.github.io/tags/Ajax/"}]},{"title":"Jsp","slug":"Java-Jsp-01","date":"2020-11-01T07:42:06.609Z","updated":"2020-11-06T07:51:08.998Z","comments":true,"path":"2020/11/01/Java-Jsp-01/","link":"","permalink":"https://main2035.github.io/2020/11/01/Java-Jsp-01/","excerpt":"","text":"Jsp书写规则&lt;% %&gt;中书写Java代码 &lt;% Students stu1 = new Students(&quot;张三&quot;,1); Students stu2 = new Students(&quot;李四&quot;,2); Students stu3 = new Students(&quot;Li Si&quot;,3); List&lt;Students&gt; list = new ArrayList&lt;&gt;(); list.add(stu1); list.add(stu2); list.add(stu3); %&gt; &lt;%= %&gt;用于变量传值 如下代码，for循环为一个整体，用&lt;%分隔包裹实现输出值到页面。 究其根本，仍是使用流，如： PrintWriter out = servletResponse.getWriter(); out.print(&quot;&lt;center&gt;&lt;h1&gt;廉颇老矣，尚能饭否？&lt;/h1&gt;&lt;/center&gt;&quot;); &lt;table border=&quot;2&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;学号&lt;/td&gt; &lt;/tr&gt; &lt;% for (Students value:list)&amp;#123; %&gt; &lt;tr&gt; &lt;td&gt;&lt;%=value.getName()%&gt;&lt;/td&gt; &lt;td&gt;&lt;%=value.getId()%&gt;&lt;/td&gt; &lt;/tr&gt; &lt;% &amp;#125; %&gt; &lt;/table&gt; Jsp内置对象request​ 类型：HttpServletRequest​ 作用: 在JSP文件运行时读取请求包信息并与Servlet在请求转发过程中实现数据共享 &lt;!-- 浏览器输入： http://localhost:8080/myWeb/request.jsp?userName=张三&amp;password=123 --&gt; &lt;% //在JSP文件执行时，借助于内置request对象读取请求包参数信息 String userName = request.getParameter(&quot;userName&quot;); String password =request.getParameter(&quot;password&quot;); %&gt; 来访用户姓名:&lt;%=userName%&gt;&lt;br/&gt; 来访用户密码:&lt;%=password%&gt; 效果图： ServletContext(全局作用域对象)同一个网站中Servlet与Jsp，都可以通过ServletContext实现数据共享 jsp中设置全局作用域对象： &lt;% application.setAttribute(&quot;key1&quot;, &quot;hello world&quot;); %&gt; @WebServlet(&quot;/Servlet1&quot;) public class Servlet1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; ServletContext application = request.getServletContext();//获取全局作用域对象 String value = (String)application.getAttribute(&quot;key1&quot;);//通过键获取值（获取作用域内的数据） System.out.println(value); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request, response); &amp;#125; &amp;#125; ### session 数据共享： 第一个jsp文件 &lt;% Integer value=(Integer) session.getAttribute(&quot;key1&quot;); %&gt; 第二个jsp文件 &lt;% // HttpSession session = request.getSession(); session.setAttribute(&quot;key1&quot;, 200); %&gt; EL表达式 jsp默认支持el表达式。如要忽略el表达式需要设置jsp中page指令中：isELIgnored=&quot;true&quot; ;忽略当前这个el表达式则于$&#123;&#125;前加/即可 ##运算符 算数运算符： + - * /(div) %(mod) 比较运算符： &gt; &lt; &gt;= &lt;= == != 逻辑运算符： &amp;&amp;(and) ||(or) !(not) 空运算符： empty 功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0 如：$&#123;empty list&#125;判断字符串、集合、数组对象是否为null或者长度为0 $&#123;not empty str&#125;判断字符串、集合、数组对象是否不为null 并且 长度&gt;0\\ &lt;h3&gt;EL运算&lt;/h3&gt; $&amp;#123;1+2&amp;#125; $&amp;#123;1-2&amp;#125; $&amp;#123;1*2&amp;#125; $&amp;#123;1/2&amp;#125; &lt;h3&gt;empty&lt;/h3&gt; &lt;% String str = &quot;&quot;; request.setAttribute(&quot;str&quot;,str); List list = new ArrayList(); request.setAttribute(&quot;list&quot;,list); %&gt; $&amp;#123;not empty str&amp;#125; $&amp;#123;not empty list&amp;#125; &lt;h3&gt;EL传值&lt;/h3&gt; &lt;% request.setAttribute(&quot;name&quot;,&quot;张三&quot;); session.setAttribute(&quot;name&quot;,&quot;李四&quot;); request.setAttribute(&quot;age&quot;,&quot;19&quot;); %&gt; $&amp;#123;requestScope.name&amp;#125; $&amp;#123;requestScope.age&amp;#125; &lt;%--不指定域时依次从最小的域中查找是否有该键对应的值，直到找到为止。--%&gt; $&amp;#123;name&amp;#125; $&amp;#123;sessionScope.name&amp;#125; 运行结果： User.java package cn.threecloth.el; import java.text.SimpleDateFormat; import java.util.Date; public class User &amp;#123; //逻辑视图 private String name; private int age; private Date birthday; public String getBir()&amp;#123; //格式化日期返回String日期数据 if(birthday!=null)&amp;#123; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;); return sdf.format(birthday); &amp;#125;else &amp;#123; return &quot;&quot;; &amp;#125; &amp;#125; public String getName() &amp;#123; return name; &amp;#125; public int getAge() &amp;#123; return age; &amp;#125; public Date getBirthday(Date date) &amp;#123; return birthday; &amp;#125; public void setName(String name) &amp;#123; this.name = name; &amp;#125; public void setAge(int age) &amp;#123; this.age = age; &amp;#125; public void setBirthday(Date birthday) &amp;#123; this.birthday = birthday; &amp;#125; &amp;#125; ##获取值 el表达式只能从域对象中获取值. $&#123;域名称.键名&#125;：从指定域中获取指定键的值. 如果不指明域，那么将依次从最小的域中查找是否有该键对应的值，直到找到为止。如： $&#123;键名&#125; 域名称： pageScope –&gt; pageContext requestScope –&gt; request sessionScope –&gt; session applicationScope –&gt; application（ServletContext） &lt;% User user = new User(); user.setAge(19); user.setName(&quot;张三&quot;); user.setBirthday(new Date()); request.setAttribute(&quot;user&quot;,user); List list = new ArrayList(); list.add(&quot;aaa&quot;); list.add(&quot;bbb&quot;); list.add(&quot;ccc&quot;); request.setAttribute(&quot;list&quot;,list); Map map = new HashMap(); map.put(&quot;name&quot;,&quot;张三&quot;); map.put(&quot;user&quot;,user); map.put(&quot;list&quot;,list); request.setAttribute(&quot;map&quot;,map); %&gt; &lt;h3&gt;el获取对象中的值&lt;/h3&gt; &lt;%-- * 通过的是对象的属性来获取 * setter或getter方法，去掉set或get，在将剩余部分，首字母变为小写。 * setName --&gt; Name --&gt; name --%&gt; $&amp;#123;user.bir&amp;#125;&lt;br&gt; &lt;%--指定作用域获取值--%&gt; $&amp;#123;requestScope.user.age&amp;#125;&lt;br&gt; $&amp;#123;requestScope.user.name&amp;#125;&lt;br&gt; &lt;h3&gt;获取list集合中的值&lt;/h3&gt; $&amp;#123;list&amp;#125;&lt;br&gt; $&amp;#123;list[0]&amp;#125;&lt;br&gt; $&amp;#123;list[1]&amp;#125;&lt;br&gt; $&amp;#123;list[2]&amp;#125;&lt;br&gt; &lt;h3&gt;获取map集合中的值与对象&lt;/h3&gt; $&amp;#123;map.name&amp;#125; $&amp;#123;map.user&amp;#125; $&amp;#123;map.user.age&amp;#125; $&amp;#123;map.list[0]&amp;#125; &lt;h3&gt;动态获取虚拟目录&lt;/h3&gt; $&amp;#123;pageContext.request.contextPath&amp;#125; 运行结果： JSTL 用于简化和替换jsp页面上的java代码 &lt;% List list = new ArrayList(); list.add(new User(&quot;张三&quot;,23,new Date())); list.add(new User(&quot;李四&quot;,18,new Date())); list.add(new User(&quot;王五&quot;,19,new Date())); request.setAttribute(&quot;list&quot;,list); %&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;生日&lt;/th&gt; &lt;/tr&gt; &lt;c:forEach var=&quot;user&quot; varStatus=&quot;s&quot; items=&quot;$&amp;#123;list&amp;#125;&quot;&gt; &lt;%--foreach:相当于java代码的for语句--%&gt; &lt;c:if test=&quot;$&amp;#123;s.count % 2 != 0&amp;#125;&quot;&gt; &lt;%--if:相当于java代码的if语句,test中写布尔表达式--%&gt; &lt;%--如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容--%&gt; &lt;tr bgcolor=&quot;red&quot;&gt; &lt;td&gt;$&amp;#123;s.count&amp;#125;&lt;/td&gt; &lt;td&gt;$&amp;#123;user.name&amp;#125;&lt;/td&gt; &lt;td&gt;$&amp;#123;user.age&amp;#125;&lt;/td&gt; &lt;td&gt;$&amp;#123;user.bir&amp;#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:if&gt; &lt;c:if test=&quot;$&amp;#123;s.count % 2 == 0&amp;#125;&quot;&gt; &lt;tr bgcolor=&quot;green&quot;&gt; &lt;td&gt;$&amp;#123;s.count&amp;#125;&lt;/td&gt; &lt;td&gt;$&amp;#123;user.name&amp;#125;&lt;/td&gt; &lt;td&gt;$&amp;#123;user.age&amp;#125;&lt;/td&gt; &lt;td&gt;$&amp;#123;user.bir&amp;#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:if&gt; &lt;/c:forEach&gt; &lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt; &lt;%@ page import=&quot;java.util.List&quot; %&gt; &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt; &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt; &lt;%--引入jsl表达式包--%&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;% List list = new ArrayList(); list.add(&quot;aaa&quot;); list.add(&quot;bbb&quot;); list.add(&quot;ccc&quot;); request.setAttribute(&quot;list&quot;,list); request.setAttribute(&quot;number&quot;,4); %&gt; &lt;%--取出域中集合的值--%&gt; &lt;c:if test=&quot;$&amp;#123;not empty list&amp;#125;&quot;&gt; $&amp;#123;list[0]&amp;#125; &lt;/c:if&gt; &lt;br&gt; &lt;c:forEach items=&quot;$&amp;#123;list&amp;#125;&quot; var=&quot;str&quot; varStatus=&quot;s&quot;&gt; 第$&amp;#123;s.count&amp;#125;次遍历&amp;nbsp;当前索引$&amp;#123;s.index&amp;#125;&amp;nbsp;当前值$&amp;#123;str&amp;#125;&amp;nbsp;当前状态$&amp;#123;s&amp;#125; &lt;br&gt; &lt;/c:forEach&gt; &lt;hr&gt; &lt;%-- 属性： begin：开始值 end：结束值 var：临时变量 step：步长 varStatus:循环状态对象 index:容器中元素的索引，从0开始 count:循环次数，从1开始 items:容器对象 &lt;%--判断奇偶--%&gt; &lt;br&gt; &lt;c:if test=&quot;$&amp;#123;number%2==0&amp;#125;&quot;&gt; $&amp;#123;number&amp;#125;为偶数 &lt;/c:if&gt; &lt;c:if test=&quot;$&amp;#123;number%2!=0&amp;#125;&quot;&gt; $&amp;#123;number&amp;#125;为奇数 &lt;/c:if&gt; &lt;HR color=#987cb9 SIZE=1&gt; &lt;h3&gt;switch&lt;/h3&gt; &lt;%--choose:相当于java代码的switch语句 1. 使用choose标签声明 相当于switch声明 2. 使用when标签做判断 相当于case 3. 使用otherwise标签做其他情况的声明 相当于default--%&gt; &lt;c:choose&gt; &lt;%-- 以下相当于case ：--%&gt; &lt;c:when test=&quot;$&amp;#123;number==1&amp;#125;&quot;&gt;星期一&lt;/c:when&gt; &lt;c:when test=&quot;$&amp;#123;number==2&amp;#125;&quot;&gt;星期二&lt;/c:when&gt; &lt;c:when test=&quot;$&amp;#123;number==3&amp;#125;&quot;&gt;星期三&lt;/c:when&gt; &lt;c:when test=&quot;$&amp;#123;number==4&amp;#125;&quot;&gt;星期四&lt;/c:when&gt; &lt;c:when test=&quot;$&amp;#123;number==5&amp;#125;&quot;&gt;星期五&lt;/c:when&gt; &lt;c:when test=&quot;$&amp;#123;number==6&amp;#125;&quot;&gt;星期六&lt;/c:when&gt; &lt;c:when test=&quot;$&amp;#123;number==7&amp;#125;&quot;&gt;星期日&lt;/c:when&gt; &lt;%--以下相当于default --%&gt; &lt;c:otherwise&gt; 输入数字有误 &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://main2035.github.io/categories/JavaWeb/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/tags/Java/"},{"name":"Jsp","slug":"Jsp","permalink":"https://main2035.github.io/tags/Jsp/"}]},{"title":"heap,heap-sort","slug":"Java-datas-heap","date":"2020-10-27T07:33:16.868Z","updated":"2021-08-04T12:29:53.671Z","comments":true,"path":"2020/10/27/Java-datas-heap/","link":"","permalink":"https://main2035.github.io/2020/10/27/Java-datas-heap/","excerpt":"","text":"堆：以完全二叉树的形式展现： 除了树的最后一层结点不需要是满的，其它的每一层从左到右都是满的，如果最后一层结点不 是满的，那么要求左满右不满 并以数组进行存储。每个结点都大于等于它的两个子结点。 如下图，如用k表示当前结点，则其的左右结点分别为2k，2k+1，任意结点的父节点为k/2 k/2(包括k/2)前是非叶子结点k/2之后是叶子结点。 堆实现package cn.three.cloth.heap; public class Heap&lt;T extends Comparable &lt;T&gt;&gt; &amp;#123;//类型 T 必须实现 Comparable 接口，并且这个接口的类型是 T private T[] items;//存储堆 private int N;//堆元素的数量 public Heap(int x) &amp;#123; this.items = (T[]) new Comparable[x+1];//数组索引0处不存放元素 &amp;#125; //判断堆中索引i处的元素是否小于索引j处的元素 private boolean less(int i,int j)&amp;#123; return items[i].compareTo(items[j])&lt;0; &amp;#125; //交换堆中i索引和j索引处的值 private void exch(int i,int j)&amp;#123; T temp = items[i]; items[i] = items[j]; items[j] = temp; &amp;#125; //删除堆中最大的元素,并返回这个最大元素 public T delMax()&amp;#123; T max = items[1]; exch(1,N);//交换最大元素与末尾元素的位置 items[N]=null;//清除游离元素 N--;//元素数量减一 sink(1);//下沉 return max; &amp;#125; //使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置 private void sink(int k)&amp;#123; //将当前结点k与其较大的一个子结点对比，如果当前结点k小，则交换位置父子双方双方位置 while(2*k&lt;=N)&amp;#123; //当前结点无左子节点时停止循环 int max; //找出左右子结点中最大的一个，并存入max if (2*k+1&lt;=N)&amp;#123;//当前结点是否有右结点 if (less(2*k,2*k+1))&amp;#123; max = 2*k+1; &amp;#125;else&amp;#123; max = 2*k; &amp;#125; &amp;#125;else &amp;#123; max = 2*k; &amp;#125; //判断max是否小于当前结点 if (!less(k,max))&amp;#123; break; &amp;#125; exch(k,max);//交换k与max的位置 k = max;//并改变下次循环时k的值为max，进行后续的下沉循环操作 &amp;#125; &amp;#125; //插入要上浮，删除要下沉 //往堆中插入一个元素 public void insert(T t)&amp;#123; items[++N]=t; swim(N);//插入一个大的数值会影响堆内的顺序，故需要将元素置于一个恰当的位置 &amp;#125; //使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置 private void swim(int k)&amp;#123; while (k&gt;1)&amp;#123; if (less(k/2,k))&amp;#123;//比较k结点与其父节点的大小 exch(k/2,k);//将k与其父节点交换位置 &amp;#125; k = k / 2;//比较与交换结束后更新k的位置为其父结点 &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; Heap&lt;String&gt; heap = new Heap&lt;String&gt;(20); heap.insert(&quot;A&quot;); heap.insert(&quot;B&quot;); heap.insert(&quot;C&quot;); heap.insert(&quot;D&quot;); heap.insert(&quot;E&quot;); heap.insert(&quot;F&quot;); heap.insert(&quot;G&quot;); String del; while((del=heap.delMax())!=null)&amp;#123; System.out.print(del+&quot;,&quot;); &amp;#125; &amp;#125; &amp;#125; #堆排序 创建一个新数组，在其索引1（包含索引1）处往后对原数组进行复制，再从新数组长度的一半处开始往1索引处扫描（从右往左），然后 对扫描到的每一个元素做下沉操作。 package cn.three.cloth.heap; import java.util.Arrays; public class HeapSort1 &amp;#123; //调用此方法使用堆排序（从小到大排序） public static void sort(Comparable[] source) &amp;#123; Comparable[] heap = new Comparable[source.length+1];//创建一个大小为传入数组length+1的数组（此数组0索引下不添加数据） createHeap(source,heap);//创建堆 int N = heap.length-1;//定义一个变量，记录未排序的元素中最大的索引 //通过循环将小的元素排列在前 while(N!=1)&amp;#123; exch(heap,1,N);//交换元素 N--; //排序交换后最大元素所在的索引，不参与此后的堆下沉 sink(heap,1, N);//需要对索引1处的元素进行对的下沉调整 &amp;#125; //用排序好的数据覆盖原数组 System.arraycopy(heap,1,source,0,source.length); &amp;#125; private static boolean less(Comparable[] heap, int i, int j) &amp;#123; return heap[i].compareTo(heap[j])&lt;0; //heap[i]小于heap[j]时返回True，否则返回false //compareTo根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。 &amp;#125; //交换位置 private static void exch(Comparable[] heap, int i, int j) &amp;#123; Comparable tmp = heap[i]; heap[i] = heap[j]; heap[j] = tmp; &amp;#125; //构造堆进行排序 private static void createHeap(Comparable[] source, Comparable[] heap) &amp;#123; //复制数组source从下标0开始，复制到heap数组从索引1开始的位置往后 System.arraycopy(source,0,heap,1,source.length); for (int i = (heap.length)/2;i&gt;0;i--)&amp;#123;//从最后一个非叶结点开始下沉操作，直到所有非叶结点下沉完毕 sink(heap,i,heap.length-1); &amp;#125; //循环结束后将得到一个有序的堆（自根结点元素依次减小） &amp;#125; //在heap堆中，对target处的元素做下沉 //下沉之后大的元素在前. private static void sink(Comparable[] heap, int target, int range)&amp;#123; while(2*target&lt;=range)&amp;#123;//当前结点无左子节点时停止循环 //1.找出当前结点的较大的子结点 int max = 2*target; if (2*target+1&lt;=range)&amp;#123; if (less(heap,2*target,2*target+1))&amp;#123; max = 2*target+1; &amp;#125; &amp;#125; //2.比较当前结点的值和较大子结点的值 if (less(heap,target,max))&amp;#123; //小于则交换父子结点位置 exch(heap,target,max); target = max; &amp;#125;else &amp;#123; break;//大于则退出下沉循环 &amp;#125; &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; String[] arry =&amp;#123;&quot;a&quot;,&quot;d&quot;,&quot;b&quot;,&quot;s&quot;,&quot;Z&quot;,&quot;z&quot;&amp;#125;; HeapSort1.sort(arry); System.out.println(Arrays.toString(arry)); &amp;#125; &amp;#125;","categories":[{"name":"dataStructure","slug":"dataStructure","permalink":"https://main2035.github.io/categories/dataStructure/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/tags/Java/"}]},{"title":"异常","slug":"Java-07","date":"2020-10-16T14:49:11.632Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-07/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-07/","excerpt":"","text":"RuntimeException(运行时异常)会自动被 java 虚拟机抛出，所以不必在异常说明中把它们列出来,也不需要在异常说明中声明方法将抛出 RuntimeException 类型的异常 RuntimeException 也被称为“不受检查异常”，将被自动捕获,如果 没有被捕获而直达 main()，那么在程序退出前将调用异常的 printStackTrace() 方法。(返回栈轨迹信息) 要么声明异常要么处理异常(只有在你知道如何处理的情况下才捕获异常)。 package cn.day.a2; // exceptions/LostMessage.java // How an exception can be lost class VeryImportantException extends Exception &amp;#123; @Override public String toString() &amp;#123; return &quot;A very important exception!&quot;; &amp;#125; &amp;#125; class HoHumException extends Exception &amp;#123; @Override public String toString() &amp;#123; return &quot;A trivial exception&quot;; &amp;#125; &amp;#125; public class LostMessage &amp;#123; void f() throws VeryImportantException &amp;#123; throw new VeryImportantException(); &amp;#125; void dispose() throws HoHumException &amp;#123; throw new HoHumException(); &amp;#125; /*声明异常，而不做处理（交给调用的人处理）*/ public static void main(String[] args) throws VeryImportantException &amp;#123;//仅仅声明异常 LostMessage lm = new LostMessage(); lm.f(); &amp;#125; &amp;#125; /*捕获并处理异常*/ // public static void main(String[] args) &amp;#123; // try &amp;#123; // LostMessage lm = new LostMessage(); // try &amp;#123; // lm.f(); // &amp;#125; finally &amp;#123; // lm.dispose(); // &amp;#125; // &amp;#125; catch(VeryImportantException | HoHumException e) &amp;#123; // System.out.println(e); // &amp;#125; // // &amp;#125; // //&amp;#125; * 可以通过**继承**异常基类来**自定义异常** ```java class SimpleException extends Exception &amp;#123;&amp;#125; public class InheritingExceptions &amp;#123; public void f() throws SimpleException &amp;#123; System.out.println( &quot;Throw SimpleException from f()&quot;); throw new SimpleException(); &amp;#125; public static void main(String[] args) &amp;#123; InheritingExceptions sed = new InheritingExceptions(); try &amp;#123; sed.f(); &amp;#125; catch(SimpleException e) &amp;#123; System.out.println(&quot;Caught it!&quot;); &amp;#125; &amp;#125; &amp;#125; 声明异常声明多个异常void f() throws TooBig, TooSmall, DivZero &amp;#123; // 方法体...&amp;#125; 声明所有异常catch(Exception e) &amp;#123; System.out.println(&quot;Caught an exception&quot;); &amp;#125; 声明子异常捕获父异常 java7之后就可以通过编译了 class BaseException extends Exception &amp;#123;&amp;#125; class DerivedException extends BaseException &amp;#123;&amp;#125; public class PreciseRethrow &amp;#123; void catcher() throws DerivedException &amp;#123;//声明子异常 try &amp;#123; throw new DerivedException(); &amp;#125; catch(BaseException e) &amp;#123;//捕获父异常 throw e; &amp;#125; &amp;#125; &amp;#125; 捕获异常捕获多个异常// exceptions/SameHandler.java class EBase1 extends Exception &amp;#123;&amp;#125; class Except1 extends EBase1 &amp;#123;&amp;#125; class EBase2 extends Exception &amp;#123;&amp;#125; class Except2 extends EBase2 &amp;#123;&amp;#125; class EBase3 extends Exception &amp;#123;&amp;#125; class Except3 extends EBase3 &amp;#123;&amp;#125; class EBase4 extends Exception &amp;#123;&amp;#125; class Except4 extends EBase4 &amp;#123;&amp;#125; public class SameHandler &amp;#123; void x() throws Except1, Except2, Except3, Except4 &amp;#123;&amp;#125; void process() &amp;#123;&amp;#125; void f() &amp;#123; try &amp;#123; x(); /*以下是分别捕获并处理异常*/ &amp;#125; catch(Except1 e) &amp;#123; process(); &amp;#125; catch(Except2 e) &amp;#123; process(); &amp;#125; catch(Except3 e) &amp;#123; process(); &amp;#125; catch(Except4 e) &amp;#123; process(); &amp;#125; &amp;#125; &amp;#125; 多重捕获 java7之后即使不同类型的异常也可通过**|**来连接捕获，进行异常处理 // exceptions/MultiCatch.java public class MultiCatch &amp;#123; void x() throws Except1, Except2, Except3, Except4 &amp;#123;&amp;#125; void process() &amp;#123;&amp;#125; void f() &amp;#123; try &amp;#123; x(); &amp;#125; catch(Except1 | Except2 | Except3 | Except4 e) &amp;#123; process(); &amp;#125; &amp;#125; &amp;#125; 重新抛出异常 重抛异常会把异常抛给上一级环境中的异常处理程序，同一个 try 块的后续 catch 子句将被忽略。此外，异常对象的所有信息都得以保持，所以高一级环境中捕获此异常的处理程序可以从这个异常对象中得到所有信息。 catch(Exception e) &amp;#123; System.out.println(&quot;An exception was thrown&quot;); throw e; &amp;#125; 当再次抛出异常时,printStackTrace() 方法显示的将是原来异常抛出点调用栈的信息，而并非重新抛出点的信息。可以调用 filInStackTrace() 方法更新异常抛出点调用栈的信息（这将返回一个 Throwable 对象）。 package cn.day.a1; public class Rethrowing &amp;#123; public static void f() throws Exception &amp;#123; System.out.println( &quot;originating the exception in f()&quot;); throw new Exception(&quot;thrown from f()&quot;); &amp;#125; public static void g() throws Exception &amp;#123; try &amp;#123; f(); &amp;#125; catch(Exception e) &amp;#123; System.out.println( &quot;Inside g(), e.printStackTrace()&quot;); e.printStackTrace(System.out); throw e;//再次抛出后没有更新 &amp;#125; &amp;#125; public static void h() throws Exception &amp;#123; try &amp;#123; f(); &amp;#125; catch(Exception e) &amp;#123; System.out.println( &quot;Inside h(), e.printStackTrace()&quot;); e.printStackTrace(System.out); throw (Exception)e.fillInStackTrace();//抛出并更新 &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; try &amp;#123; g();//抛出点的调用栈信息一致 &amp;#125; catch(Exception e) &amp;#123; System.out.println(&quot;main: printStackTrace()&quot;); e.printStackTrace(System.out); &amp;#125; try &amp;#123; h();//抛出点的调用栈信息是更新前后的 &amp;#125; catch(Exception e) &amp;#123; System.out.println(&quot;main: printStackTrace()&quot;); e.printStackTrace(System.out); &amp;#125; &amp;#125; &amp;#125; 在捕获异常之后抛出另一种异常,效果类似于使用 filInStackTrace()，有关原异常抛出点调用栈会丢失 // exceptions/RethrowNew.java // Rethrow a different object from the one you caught class OneException extends Exception &amp;#123; OneException(String s) &amp;#123; super(s); &amp;#125; &amp;#125; class TwoException extends Exception &amp;#123; TwoException(String s) &amp;#123; super(s); &amp;#125; &amp;#125; public class RethrowNew &amp;#123; public static void f() throws OneException &amp;#123; System.out.println( &quot;originating the exception in f()&quot;); throw new OneException(&quot;thrown from f()&quot;); &amp;#125; public static void main(String[] args) &amp;#123; try &amp;#123; try &amp;#123; f(); &amp;#125; catch(OneException e) &amp;#123; System.out.println( &quot;Caught in inner try, e.printStackTrace()&quot;); e.printStackTrace(System.out); throw new TwoException(&quot;from inner try&quot;);//抛出不同异常 &amp;#125; &amp;#125; catch(TwoException e) &amp;#123; System.out.println( &quot;Caught in outer try, e.printStackTrace()&quot;); e.printStackTrace(System.out);//此异常仅知道自己来自 main()，而对 f() 一无所知。 &amp;#125; &amp;#125; &amp;#125; 异常链捕获一个异常并抛出另一个异常，同时想保持已捕获异常的信息。 finally 异常有无发生，均执行的操作（抛出异常时紧跟异常处理语句后执行） // exceptions/MultipleReturns.java public class MultipleReturns &amp;#123; public static void f(int i) &amp;#123; System.out.println( &quot;Initialization that requires cleanup&quot;); try &amp;#123; System.out.println(&quot;Point 1&quot;); if(i == 1) return;//返回，中断下面操作，但finally语句仍会执行。 System.out.println(&quot;Point 2&quot;); if(i == 2) return; System.out.println(&quot;Point 3&quot;); if(i == 3) return; System.out.println(&quot;End&quot;); return; &amp;#125; finally &amp;#123; System.out.println(&quot;Performing cleanup&quot;); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; for(int i = 1; i &lt;= 4; i++) f(i); &amp;#125; &amp;#125; 在任何finally语句中使用return，发生(抛出)的异常将静默。 public class ExceptionSilencer &amp;#123; public static void main(String[] args) &amp;#123; try &amp;#123; throw new RuntimeException(); &amp;#125; finally &amp;#123; // Using &#39;return&#39; inside the finally block // will silence any thrown exception. return; &amp;#125; &amp;#125; &amp;#125; try中与finally中发生同时（抛出）异常，try中的异常将不被显示(设计缺陷) package cn.day.a2; // exceptions/LostMessage.java // How an exception can be lost class VeryImportantException extends Exception &amp;#123; @Override public String toString() &amp;#123; return &quot;A very important exception!&quot;; &amp;#125; &amp;#125; class HoHumException extends Exception &amp;#123; @Override public String toString() &amp;#123; return &quot;A trivial exception&quot;; &amp;#125; &amp;#125; public class LostMessage &amp;#123; void f() throws VeryImportantException &amp;#123; throw new VeryImportantException(); &amp;#125; void dispose() throws HoHumException &amp;#123; throw new HoHumException(); &amp;#125; public static void main(String[] args) &amp;#123; try &amp;#123; LostMessage lm = new LostMessage(); try &amp;#123; lm.f();//由于finally也抛出异常，故此异常不被显示 &amp;#125; finally &amp;#123; lm.dispose(); &amp;#125; &amp;#125; catch(VeryImportantException | HoHumException e) &amp;#123; System.out.println(e); &amp;#125; &amp;#125; &amp;#125; 异常限制 一个类可不声明其超类或实现接口中的异常 一个类不能声明与其超类中声明的异常无直接继承关系的异常 异常限制对构造器不起作用。 package cn.day.a2; /**重写的方法只能抛出在其基类版本中指定的异常，或从基类异常派生的异常**/ /*定义异常*/ class BaseballException extends Exception &amp;#123;&amp;#125; class Foul extends BaseballException &amp;#123;&amp;#125; class Strike extends BaseballException &amp;#123;&amp;#125; /*声明异常*/ abstract class Inning &amp;#123; Inning() throws BaseballException &amp;#123;&amp;#125; public void event() throws BaseballException &amp;#123; &amp;#125; public abstract void atBat() throws Strike, Foul; public void walk() &amp;#123;&amp;#125; &amp;#125; /*定义异常*/ class StormException extends Exception &amp;#123;&amp;#125; class RainedOut extends StormException &amp;#123;&amp;#125; class PopFoul extends Foul &amp;#123;&amp;#125; /*一个接口中声明两个异常*/ interface Storm &amp;#123; void event() throws RainedOut; void rainHard() throws RainedOut; &amp;#125; /*继承上面含有声明异常的类并实现含有声明异常的接口*/ public class StormyInning extends Inning implements Storm &amp;#123; public StormyInning() throws RainedOut, BaseballException &amp;#123;&amp;#125;//声明这个构造器可能发生的异常（来自接口与父类） public StormyInning(String s) throws BaseballException &amp;#123;&amp;#125; @Override public void rainHard() throws RainedOut &amp;#123;&amp;#125; //声明了实现的接口异常 @Override public void event() &amp;#123;&amp;#125; // 没有声明异常哦 @Override public void atBat() throws PopFoul &amp;#123;&amp;#125;//覆盖方法可以声明继承了其超类所声明的异常的子异常 // public void atBat() throws RainedOut &amp;#123;&amp;#125;//其接口有，但其超类未声明此异常，故不可这样做 // public void atBat() throws BaseballException &amp;#123;&amp;#125;覆盖方法不能声明其超类中未声明且与其超类中声明的异常无直接继承关系的异常 public static void main(String[] args) &amp;#123; try &amp;#123; StormyInning si = new StormyInning(); si.atBat(); &amp;#125; catch(PopFoul e) &amp;#123; System.out.println(&quot;Pop foul&quot;); &amp;#125; catch(RainedOut e) &amp;#123; System.out.println(&quot;Rained out&quot;); &amp;#125; catch(BaseballException e) &amp;#123; System.out.println(&quot;Generic baseball exception&quot;); &amp;#125; try &amp;#123; Inning i = new StormyInning(); i.atBat(); &amp;#125; catch(Strike e) &amp;#123; System.out.println(&quot;Strike&quot;); &amp;#125; catch(Foul e) &amp;#123; System.out.println(&quot;Foul&quot;); &amp;#125; catch(RainedOut e) &amp;#123; System.out.println(&quot;Rained out&quot;); &amp;#125; catch(BaseballException e) &amp;#123; System.out.println(&quot;Generic baseball exception&quot;); &amp;#125; &amp;#125; &amp;#125; 异常匹配 异常处理，采用“就近原则”：异常子类可作为捕获参数用于捕获其父类类型的异常。 // exceptions/Human.java // Catching exception hierarchies class Annoyance extends Exception &amp;#123;&amp;#125; class Sneeze extends Annoyance &amp;#123;&amp;#125; public class Human &amp;#123; public static void main(String[] args) &amp;#123; // Catch the exact type: try &amp;#123; throw new Sneeze(); &amp;#125; catch(Sneeze s) &amp;#123; System.out.println(&quot;Caught Sneeze&quot;); &amp;#125; catch(Annoyance a) &amp;#123; System.out.println(&quot;Caught Annoyance&quot;); &amp;#125; try &amp;#123; throw new Sneeze(); &amp;#125; catch(Annoyance a) &amp;#123;//可捕获Annoyance父类Sneeze的异常 System.out.println(&quot;Caught Annoyance&quot;); &amp;#125; catch(Sneeze a) &amp;#123;//将永远无法捕获并处理异常，所以会报错。 System.out.println(&quot;Caught Annoyance&quot;); &amp;#125; &amp;#125; &amp;#125; try-with-resources 确保有无异常时打开的文件在结束之后均关闭 static String readFirstLineFromFile(String path) throws IOException &amp;#123; try (BufferedReader br = new BufferedReader(new FileReader(path))) &amp;#123;//即使发生异常（）内的资源也会关闭 return br.readLine(); &amp;#125; &amp;#125; /*try finally*/ static String readFirstLineFromFileWithFinallyBlock(String path) throws IOException &amp;#123; BufferedReader br = new BufferedReader(new FileReader(path)); try &amp;#123; return br.readLine(); &amp;#125; finally &amp;#123; if (br != null) br.close();//如果close出现异常，则文件无法正常关闭 &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"终端操作(收集)","slug":"Java-06","date":"2020-10-16T14:49:11.630Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-06/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-06/","excerpt":"","text":"以下操作将会获取流的最终结果。至此我们无法再继续往后传递流。 终端操作（Terminal Operations）总是我们在流管道中所做的最后一件事。 数组 toArray()：将流转换成适当类型的数组。 toArray(generator)：在特殊情况下，生成自定义类型的数组。 // streams/RandInts.java package streams; import java.util.*; import java.util.stream.*; public class RandInts &amp;#123; private static int[] rints = new Random(47).ints(0, 1000).limit(100).toArray(); public static IntStream rands() &amp;#123; return Arrays.stream(rints); &amp;#125; &amp;#125; 循环 forEach(Consumer)常见如 System.out::println 作为 Consumer 函数。 forEachOrdered(Consumer)： 保证 forEach 按照原始流顺序操作。] parallel()：可实现多处理器并行操作。实现原理为将流分割为多个（通常数目为 CPU 核心数）并在不同处理器上分别执行操作。 package com.test.day16; // streams/ForEach.java import java.util.*; import java.util.stream.*; public class ForEach &amp;#123; static final int SZ = 14; public static void main(String[] args) &amp;#123; RandInts.rands().limit(SZ)//截取14个 .forEach(n -&gt; System.out.format(&quot;%d &quot;, n)); System.out.println(); RandInts.rands().limit(SZ) .parallel() .forEach(n -&gt; System.out.format(&quot;%d &quot;, n)); /*在第一个流中，未使用 parallel() ，所以 rands() 按照元素迭代出现的顺序显示结果； 在第二个流中，引入parallel() ，即便流很小，输出的结果顺序也和前面不一样。这是由于多处理器并行操作的原因。 多次运行测试，结果均不同。多处理器并行操作带来的非确定性因素造成了这样的结果。*/ System.out.println(); RandInts.rands().limit(SZ) .parallel()//parallel()：实现多处理器并行操作。 // 实现原理为将流分割为多个（通常数目为 CPU 核心数）并在不同处理器上分别执行操作。 .forEachOrdered(n -&gt; System.out.format(&quot;%d &quot;, n));//强制保持原始流顺序 &amp;#125; &amp;#125; package com.test.day16; // streams/RandInts.java import java.util.*; import java.util.stream.*; public class RandInts &amp;#123; private static int[] rints = new Random(47).ints(0, 1000).limit(100).toArray(); public static IntStream rands() &amp;#123; return Arrays.stream(rints);//返回此数组流 &amp;#125; &amp;#125; 集合 collect(Collector)：使用 Collector 收集流元素到结果集合中。 collect(Supplier, BiConsumer, BiConsumer)：同上，第一个参数 Supplier 创建了一个新结果集合，第二个参数 BiConsumer 将下一个元素包含到结果中，第三个参数 BiConsumer 用于将两个值组合起来。 Collectors 里面没有特定的 toTreeSet()，但是我们可以通过将集合的构造函数引用传递给 Collectors.toCollection()，从而构建任何类型的集合。如下： // streams/TreeSetOfWords.java import java.util.*; import java.nio.file.*; import java.util.stream.*; public class TreeSetOfWords &amp;#123; public static void main(String[] args) throws Exception &amp;#123; Set&lt;String&gt; words2 = Files.lines(Paths.get(&quot;TreeSetOfWords.java&quot;))//Paths.get读取全文，Files.lines打开 Path 并将其转换成为行流。 .flatMap(s -&gt; Arrays.stream(s.split(&quot;\\\\W+&quot;)))// Arrays.stream() 将其转化成为流；并将结果展平映射成为单词流。 .filter(s -&gt; !s.matches(&quot;\\\\d+&quot;)) // No numbersmatches(\\\\d+) 查找并移除全数字字符串 .map(String::trim)//String.trim() 去除单词两边的空白， .filter(s -&gt; s.length() &gt; 2) filter() //过滤所有长度小于3的单词，，最后将 .limit(100)//获取100个单词 .collect(Collectors.toCollection(TreeSet::new)); System.out.println(words2);//将元素收集至Tree集合构造器 &amp;#125; &amp;#125; //1.将数据收集进一个列表(Stream 转换为 List，允许重复值，有顺序) //创建流 Stream&lt;String&gt; language = Stream.of(&quot;java&quot;, &quot;python&quot;, &quot;C++&quot;,&quot;php&quot;,&quot;java&quot;); List&lt;String&gt; listResult = language.collect(Collectors.toList()); result.forEach(System.out::println); //2.将数据收集进一个集合(Stream 转换为 Set，不允许重复值，没有顺序) Stream&lt;String&gt; language = Stream.of(&quot;java&quot;, &quot;python&quot;, &quot;C++&quot;,&quot;php&quot;,&quot;java&quot;); Set&lt;String&gt; setResult = language.collect(Collectors.toSet()); setResult.forEach(System.out::println); List&lt;String&gt; list = Arrays.asList(&quot;java&quot;, &quot;python&quot;, &quot;C++&quot;,&quot;php&quot;,&quot;java&quot;); 自定义收集//用LinkedList收集 List&lt;String&gt; linkedListResult = list.stream().collect(Collectors.toCollection(LinkedList::new)); linkedListResult.forEach(System.out::println); System.out.println(&quot;--------------&quot;); //用CopyOnWriteArrayList收集 List&lt;String&gt; copyOnWriteArrayListResult = list.stream().collect(Collectors.toCollection(CopyOnWriteArrayList::new)); copyOnWriteArrayListResult.forEach(System.out::println); System.out.println(&quot;--------------&quot;); //用TreeSet收集 TreeSet&lt;String&gt; treeSetResult = list.stream().collect(Collectors.toCollection(TreeSet::new)); treeSetResult.forEach(System.out::println); 组合 reduce(BinaryOperator)：使用 BinaryOperator 来组合所有流中的元素。因为流可能为空，其返回值为 Optional。 reduce(identity, BinaryOperator)：功能同上，但是使用 identity 作为其组合的初始值。因此如果流为空，identity 就是结果。 reduce(identity, BiFunction, BinaryOperator)：更复杂的使用形式（暂不介绍），这里把它包含在内，因为它可以提高效率。通常，我们可以显式地组合 map() 和 reduce() 来更简单的表达它。 package com.test.day16; // streams/Reduce.java import java.util.*; import java.util.stream.*; class Frobnitz &amp;#123; int size; Frobnitz(int sz) &amp;#123; size = sz; &amp;#125; @Override public String toString() &amp;#123; return &quot;Frobnitz(&quot; + size + &quot;)&quot;; &amp;#125; // Generator: static Random rand = new Random(47); static final int BOUND = 100; static Frobnitz supply() &amp;#123;/*个方法对于 Supplier&lt;Frobnitz&gt; 是签名兼容的， 我们可以将其方法引用传递给 Stream.generate()（这种签名兼容性被称作结构一致性）*/ return new Frobnitz(rand.nextInt(BOUND));//随机返回0-100之间的数 &amp;#125; &amp;#125; public class Reduce &amp;#123; public static void main(String[] args) &amp;#123; Stream.generate(Frobnitz::supply)//Stream.iterate和Stream.generate。这两个操作可以创建无限流：不像从固定集合创建的流那样有固定大小的流。 .limit(10) .peek(System.out::println)//peek接收的参数类型为Consumer，而map接收的参数类型为Function //println 方法可以被调用是因为 Frobnitz 可以通过 toString() 方法转换成 String .reduce((fr0, fr1) -&gt; fr0.size &lt; 50 ? fr0 : fr1)/*reduce() 中的 Lambda 表达式使用了三元表达式来获取结果， 当其长度小于 50 的时候获取 fr0 否则获取序列中的下一个值 fr1。当取得第一个长度小于 50 的 Frobnitz，只要得到结果就会忽略其他。*/ .ifPresent(System.out::println); &amp;#125; &amp;#125; 信息count()：流中的元素个数; max(Comparator)：根据所传入的 Comparator 所决定的“最大”元素; min(Comparator)：根据所传入的 Comparator 所决定的“最小”元素。 数字流信息average() ：求取流元素平均值; max() 和 min()：数值流操作无需 Comparator; sum()：对所有流元素进行求和; summaryStatistics()：生成可能有用的数据。目前并不太清楚这个方法存在的必要性，因为我们其实可以用更直接的方法获得需要的数据。 查找 findFirst()：返回第一个流元素的 Optional，如果流为空返回 Optional.empty。 findAny(：返回含有任意流元素的 Optional，如果流为空返回 Optional.empty。 package com.test.day16; // streams/SelectElement.java import java.util.*; import java.util.stream.*; public class SelectElement &amp;#123; public static void main(String[] args) &amp;#123; System.out.println(RandInts.rands().findFirst().getAsInt());//获取随机流中生成的头一个元素，并返回 System.out.println( RandInts.rands().parallel().findFirst().getAsInt()); System.out.println(RandInts.rands().findAny().getAsInt());//对于非并行流，findAny()会选择流中的第一个元素（即使从定义上来看是选择任意元素）。 System.out.println( RandInts.rands().parallel().findAny().getAsInt());//parallel()并行化，findAny选择并行化后的第一个元素 &amp;#125; &amp;#125; 匹配 allMatch(Predicate) ：如果流的每个元素根据提供的 Predicate 都返回 true 时，结果返回为 true。在第一个 false 时，则停止执行计算。 anyMatch(Predicate)：如果流中的任意一个元素根据提供的 Predicate 返回 true 时，结果返回为 true。在第一个 false 是停止执行计算。 noneMatch(Predicate)：如果流的每个元素根据提供的 Predicate 都返回 false 时，结果返回为 true。在第一个 true 时停止执行计算。 package com.test.day16; // streams/Matching.java // Demonstrates short-circuiting of *Match() operations import java.util.stream.*; import java.util.function.*; interface Matcher extends BiPredicate&lt;Stream&lt;Integer&gt;, Predicate&lt;Integer&gt;&gt; &amp;#123;&amp;#125; public class Matching &amp;#123; static void show(Matcher match, int val) &amp;#123; System.out.println( match.test( IntStream.rangeClosed(1, 9)//生成1-9 .boxed()//将流元素装入包装器Integer .peek(n -&gt; System.out.format(&quot;%d &quot;, n)),//返回由该流的元素，作为元素从所得流消耗的每个元件上附加地执行所述提供动作的流。 n -&gt; n &lt; val));//执行peek中操作 &amp;#125;/* allMatch(Predicate) ：返回flase时停止计算 anyMatch(Predicate)：在获得true时停止执行，如结尾仍未获得true。返回flase noneMatch(Predicate)：如果流的每个元素根据提供的 Predicate 都返回 false 时，结果返回为 true。在第一个 true 时停止执行计算。*/ public static void main(String[] args) &amp;#123; show(Stream::allMatch, 10); show(Stream::allMatch, 4);//第5个值5，大于4，故停止计算（短路时直接结束此操作） show(Stream::anyMatch, 3);//在获得true时停止执行 show(Stream::anyMatch, 0); show(Stream::noneMatch, 5);//在第一个 true 时停止执行计算，故返回flase show(Stream::noneMatch, 0); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"Optional类","slug":"Java-05","date":"2020-10-16T14:49:11.629Z","updated":"2020-08-31T01:59:51.000Z","comments":true,"path":"2020/10/16/Java-05/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-05/","excerpt":"","text":"用于，查看的流中元素返回提示而不是发生异常。 findFirst() 返回一个包含第一个元素的 Optional 对象，如果流为空则返回 Optional.empty; findAny() 返回包含任意元素的 Optional 对象，如果流为空则返回 Optional.empty; max() 和 min() 返回一个包含最大值或者最小值的 Optional 对象，如果流为空则返回 Optional.empty; reduce() 不再以 identity 形式开头，而是将其返回值包装在 Optional 中。（identity 对象成为其他形式的 reduce() 的默认结果，因此不存在空结果的风险）; 对于数字流 IntStream、LongStream 和 DoubleStream，average() 会将结果包装在 Optional 以防止流为空。 解包 Optional ifPresent(Consumer)：当值存在时调用 Consumer，否则什么也不做。 orElse(otherObject)：如果值存在则直接返回，否则生成 otherObject（括号中可定义）。 orElseGet(Supplier)：如果值存在则直接返回，否则使用 Supplier 函数生成一个可替代对象。 orElseThrow(Supplier)：如果值存在直接返回，否则使用 Supplier 函数生成一个异常。 创建 Optional empty()：生成一个空 Optional。 of(value)：将一个非空值包装到 Optional 里。 ofNullable(value)：针对一个可能为空的值，为空时自动生成 Optional.empty，否则将值包装在 Optional 中。 package com.test.day15; import java.util.*; import java.util.stream.*; import java.util.function.*; class CreatingOptionals &amp;#123; static void test(String testName, Optional&lt;String&gt; opt) &amp;#123; System.out.println(&quot; === &quot; + testName + &quot; === &quot;); System.out.println(opt.orElse(&quot;Null&quot;));//定义若不存在值则生成otherObject为null，并打印；若有值返回并打印值。 &amp;#125; public static void main(String[] args) &amp;#123; test(&quot;empty&quot;, Optional.empty());////empty()：生成一个空 Optional。 test(&quot;of&quot;, Optional.of(&quot;Howdy&quot;));//of(value)：将一个非空值包装到 Optional 里。 try &amp;#123; test(&quot;of&quot;, Optional.of(null)); &amp;#125; catch(Exception e) &amp;#123; System.out.println(e); &amp;#125; test(&quot;ofNullable&quot;, Optional.ofNullable(&quot;Hi&quot;)); //ofNullable(value)：针对一个可能为空的值，为空时自动生成 Optional.empty，否则将值包装在 Optional 中 test(&quot;ofNullable&quot;, Optional.ofNullable(null)); &amp;#125; &amp;#125; Optional 对象操作 filter(Predicate)：将 Predicate 应用于 Optional 中的内容并返回结果。当 Optional 不满足 Predicate 时返回空。如果 Optional 为空，则直接返回。而流的 filter() 则会在 Predicate 返回 false 时移除流元素。 map(Function)：如果 Optional 不为空，应用 Function 于 Optional 中的内容，并返回结果。否则直接返回 Optional.empty。（与中间操作map类似） flatMap(Function)：同 map()，但是提供的映射函数将结果包装在 Optional 对象中，因此 flatMap() 不会在最后进行任何包装。（与中间操作flatmap类似）Optional.flatMap() 是为那些自己已经生成 Optional 的函数而设计的。可用来组合流中的方法（实现方式是将元素扁平化再实现流）例： Optional&lt;Double&gt; a=Optional.of(-4.0).flatMap(Demo:invers).flatMap(Demo:squareRoot) 以上方法都不适用于数值型 Optional。 // streams/OptionalFilter.java import java.util.*; import java.util.stream.*; import java.util.function.*; class OptionalFilter &amp;#123; static String[] elements = &amp;#123; &quot;Foo&quot;, &quot;&quot;, &quot;Bar&quot;, &quot;Baz&quot;, &quot;Bingo&quot; &amp;#125;; static Stream&lt;String&gt; testStream() &amp;#123; return Arrays.stream(elements); &amp;#125; static void test(String descr, Predicate&lt;String&gt; pred) &amp;#123; System.out.println(&quot; ---( &quot; + descr + &quot; )---&quot;); for(int i = 0; i &lt;= elements.length; i++) &amp;#123;/ System.out.println( testStream() .skip(i) .findFirst() .filter(pred)); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; test(&quot;true&quot;, str -&gt; true);//返回所有元素包括空 test(&quot;false&quot;, str -&gt; false);//返回空（Optional.empty） test(&quot;str != \\&quot;\\&quot;&quot;, str -&gt; str != &quot;&quot;); test(&quot;str.length() == 3&quot;, str -&gt; str.length() == 3); test(&quot;startsWith(\\&quot;B\\&quot;)&quot;, str -&gt; str.startsWith(&quot;B&quot;)); &amp;#125; &amp;#125; Optional 流package com.test.day16; // streams/Signal.java import java.util.*; import java.util.stream.*; import java.util.function.*; public class Signal &amp;#123; private final String msg; public Signal(String msg) &amp;#123; this.msg = msg; &amp;#125; public String getMsg() &amp;#123; return msg; &amp;#125; @Override public String toString() &amp;#123; return &quot;Signal(&quot; + msg + &quot;)&quot;; &amp;#125; static Random rand = new Random(47);//随机数 public static Signal morse() &amp;#123; switch(rand.nextInt(4)) &amp;#123;//nextInt(4)，返回0-4之间的数 case 1: return new Signal(&quot;dot&quot;); case 2: return new Signal(&quot;dash&quot;); default: return null; &amp;#125; &amp;#125; public static Stream&lt;Optional&lt;Signal&gt;&gt; stream() &amp;#123; return Stream.generate(Signal::morse)//通过所提供的产生的每个元件的无限连续的无序流Supplier .map(signal -&gt; Optional.ofNullable(signal));//为空返回Optional.empty，不为空将值包包装在 Optional 中。 &amp;#125; &amp;#125; package com.test.day16; // streams/StreamOfOptionals.java import java.util.*; import java.util.stream.*; public class StreamOfOptionals &amp;#123; public static void main(String[] args) &amp;#123; Signal.stream() .limit(10) .forEach(System.out::println); System.out.println(&quot; ---&quot;); Signal.stream() .limit(10) .filter(Optional::isPresent)//返回非空的元素，isPresent值存在返回true否返回flase .map(Optional::get)//从Optional中提取元素 .forEach(System.out::println); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"流的创建与基础操作","slug":"Java-04","date":"2020-10-16T14:49:11.628Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-04/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-04/","excerpt":"","text":"流是一系列与特定存储机制无关的元素——实际上，流并没有“存储”之说; 利用流，我们无需迭代集合中的元素，就可以提取和操作它们。这些管道通常被组合在一起，在流上形成一条操作管道; 流的一个核心好处是，它使得程序更加短小并且更易理解。当 Lambda 表达式和方法引用（method references）和流一起使用的时候会让人感觉自成一体; 流操作的类型有三种：创建流，修改流元素（中间操作， Intermediate Operations），消费流元素（终端操作， Terminal Operations）。最后一种类型通常意味着收集流元素（通常是到集合中）; 在接口中添加被 default（默认）修饰的方法，即可将流式（stream）方法平滑地嵌入到现有类中。 基础操作.ints( ) 生成整数流，可设定边界 如设定边界为ints（5，20）则生成5（包括）-20（不包括）之间的数 .limit() 截断并获取流中元素 如填入7，则获取前7个元素 // streams/Randoms.java import java.util.*; public class Randoms &amp;#123; public static void main(String[] args) &amp;#123; new Random(47) .ints(5, 20)//生成整数流，设定边界如5-20（不包括20） .distinct()//收集不重复的 .limit(7)//截断，获取7个元素 .sorted()//排序 .forEach(System.out::println); &amp;#125; &amp;#125; 创建流Stream.of()将一组元素转化成为流 stream()集合可通过调用此方法产生一个流 entrySet() 产生一个对象流，每个对象都包含一个 key 键以及与其相关联的 value 值。 可使用getKey()和getValue() 获取对象流的键值 // streams/CollectionToStream.java import java.util.*; import java.util.stream.*; public class CollectionToStream &amp;#123; public static void main(String[] args) &amp;#123; List&lt;Bubble&gt; bubbles = Arrays.asList(new Bubble(1), new Bubble(2), new Bubble(3)); System.out.println(bubbles.stream() .mapToInt(b -&gt; b.i) .sum()); Set&lt;String&gt; w = new HashSet&lt;&gt;(Arrays.asList(&quot;It&#39;s a wonderful day for pie!&quot;.split(&quot; &quot;))); w.stream() .map(x -&gt; x + &quot; &quot;) .forEach(System.out::print); System.out.println(); Map&lt;String, Double&gt; m = new HashMap&lt;&gt;(); m.put(&quot;pi&quot;, 3.14159); m.put(&quot;e&quot;, 2.718); m.put(&quot;phi&quot;, 1.618); m.entrySet().stream()//entrySet() 产生一个对象流，每个对象都包含一个 `key` 键以及与其相关联的 `value` 值。 。 .map(e -&gt; e.getKey() + &quot;: &quot; + e.getValue())//getKey()和getValue() 获取键值 //中间操作 `map()` 会获取流中的所有元素，并且对流中元素应用操作从而产生新的元素，并将其传递到后续的流中。 .forEach(System.out::println); &amp;#125; &amp;#125; boxed() 把基本类型包装成为对应的装箱类型 public class RandomGenerators &amp;#123; public static &lt;T&gt; void show(Stream&lt;T&gt; stream) &amp;#123; stream .limit(4) .forEach(System.out::println); &amp;#125; public static void main(String[] args) &amp;#123; Random rand = new Random(47); show(rand.ints().boxed());//boxed() 流操作将会自动地把基本类型包装成为对应的装箱类型，从而使得 show() 能够接受流 show(rand.longs().boxed()); &amp;#125; &amp;#125; collect()收集操作，它根据参数来组合所有流中的元素。 Collectors.joining()每个元素都根据 joining() 的参数来进行分割。 得到一个 String 类型的结果 Stream.generate() 把任意 Supplier&lt;T&gt; 用于生成 T 类型的流。 // streams/RandomWords.java import java.util.*; import java.util.stream.*; import java.util.function.*; import java.io.*; import java.nio.file.*; public class RandomWords implements Supplier&lt;String&gt; &amp;#123; List&lt;String&gt; words = new ArrayList&lt;&gt;(); Random rand = new Random(47); RandomWords(String fname) throws IOException &amp;#123; List&lt;String&gt; lines = Files.readAllLines(Paths.get(fname)); // 略过第一行 for (String line : lines.subList(1, lines.size())) &amp;#123; for (String word : line.split(&quot;[ .?,]+&quot;)) words.add(word.toLowerCase()); &amp;#125; &amp;#125; public String get() &amp;#123; return words.get(rand.nextInt(words.size())); &amp;#125; @Override public String toString() &amp;#123; return words.stream() .collect(Collectors.joining(&quot; &quot;)); &amp;#125; public static void main(String[] args) throws Exception &amp;#123; System.out.println( Stream.generate(new RandomWords(&quot;Cheese.dat&quot;)) .limit(10) .collect(Collectors.joining(&quot; &quot;)));//以空格分隔流元素并收集 &amp;#125; &amp;#125; package com.test.day15; // streams/Generator.java import java.util.*; import java.util.function.*; import java.util.stream.*; public class Generator implements Supplier&lt;String&gt; &amp;#123; Random rand = new Random(47); char[] letters = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.toCharArray(); public String get() &amp;#123; return &quot;&quot; + letters[rand.nextInt(letters.length)]; &amp;#125; public static void main(String[] args) &amp;#123; String word = Stream.generate(new Generator()) ////Stream.generate() 的用法，它可以把任意 Supplier&lt;T&gt; 用于生成 T 类型的流。 .limit(30)//获取前30个 .collect(Collectors.joining(&quot; &quot;));//collect() 收集操作，它根据参数来组合所有流中的元素。 //使用 Collectors.joining()，你将会得到一个 String 类型的结果， // 每个元素都根据 joining() 的参数来进行分割。 System.out.println(word); &amp;#125; &amp;#125; toArray()将元素装入数组 Arrays的stream()把数组转换成为流; （）中可加入两个额外的参数。第一个参数告诉 stream() 从数组的哪个位置开始选择元素，第二个参数用于告知在哪里停止。 Stream.iterate()以种子（第一个参数）开头，并将其传给方法（第二个参数）； 方法的结果将添加到流，并存储作为第一个参数用于下次调用 iterate()。 skip() 根据参数丢弃指定数量的流元素。 package com.test.day15; // streams/Fibonacci.java import java.util.stream.*; public class Fibonacci &amp;#123; int x = 1; Stream&lt;Integer&gt; numbers() &amp;#123; return Stream.iterate(0, i -&gt; &amp;#123;//terate() 以种子（第一个参数）开头，并将其传给方法（第二个参数）。 // iterate() 只能记忆结果，因此我们需要利用一个变量 x 追踪另外一个元素。 int result = x + i; x = i; return result;//返回值赋予i &amp;#125;); &amp;#125; public static void main(String[] args) &amp;#123; new Fibonacci().numbers() .skip(20) // 过滤前 20 个 .limit(10) // 然后取 10 个 .forEach(System.out::println); &amp;#125; &amp;#125; 中间操作map()获取流中的所有元素，并且对流中元素应用操作从而产生新的元素，并将其传递到后续的流中。 mapToInt(ToIntFunction)操作同上，但结果是 IntStream; mapToLong(ToLongFunction) 操作同上，但结果是 LongStream; mapToDouble(ToDoubleFunction) 操作同上，但结果是 DoubleStream。 package com.test.day15; // streams/FunctionMap.java import java.util.*; import java.util.stream.*; import java.util.function.*; class FunctionMap &amp;#123; static String[] elements = &amp;#123; &quot;12&quot;, &quot;&quot;, &quot;23&quot;, &quot;45&quot; &amp;#125;; static Stream&lt;String&gt; testStream() &amp;#123; return Arrays.stream(elements);//把数组转换成为流并返回 &amp;#125; static void test(String descr, Function&lt;String, String&gt; func) &amp;#123; System.out.println(&quot; ---( &quot; + descr + &quot; )---&quot;); testStream() .map(func)//将函数操作应用在输入流的元素中，并将返回值传递到输出流中。 .forEach(System.out::println); &amp;#125; public static void main(String[] args) &amp;#123; test(&quot;add brackets&quot;, s -&gt; &quot;[&quot; + s + &quot;]&quot;); test(&quot;Increment&quot;, s -&gt; &amp;#123; try &amp;#123; // return s + 1;//错误的拼接了，流中一切元素为字符 return Integer.parseInt(s) + 1 + &quot;&quot;;//将字符串参数作为有符号的十进制整数进行解析并还原为字符串 &amp;#125; catch(NumberFormatException e) &amp;#123; return s; &amp;#125; &amp;#125; ); test(&quot;Replace&quot;, s -&gt; s.replace(&quot;2&quot;, &quot;9&quot;)); //返回一个新的字符串，将所有字符”2“替换成”9“ test(&quot;Take last digit&quot;, s -&gt; s.length() &gt; 0 ? s.charAt(s.length() - 1) + &quot;&quot; : s);//charAt返回指定索引处的 char 值。 &amp;#125; &amp;#125; 流中元素基本类型的转换package com.test.day15; // streams/FunctionMap3.java // Producing numeric output streams（ 产生数值输出流） import java.util.*; import java.util.stream.*; class FunctionMap3 &amp;#123; public static void main(String[] args) &amp;#123; Stream.of(&quot;5&quot;, &quot;7&quot;, &quot;9&quot;) .mapToInt(Integer::parseInt)//int类型 .forEach(n -&gt; System.out.format(&quot;%d &quot;, n)); System.out.println(); Stream.of(&quot;17&quot;, &quot;19&quot;, &quot;23&quot;) .mapToLong(Long::parseLong)//long类型 .forEach(n -&gt; System.out.format(&quot;%d &quot;, n)); System.out.println(); Stream.of(&quot;17&quot;, &quot;1.9&quot;, &quot;.23&quot;) .mapToDouble(Double::parseDouble)//double类型 .forEach(n -&gt; System.out.format(&quot;%f &quot;, n)); &amp;#125; &amp;#125; flatMap() 获取流中的所有元素，并且对流中元素应用操作从而产生新的元素，并将其传递到后续的流中（与 map() 所做的相同） 每个结果都是一个流，将其扁平化为单个元素并拼接到一起 可用来组合流中的方法（实现方式是将元素扁平化再实现流）例： Stream&lt;String&gt; a = words.stream().flatMap(w -&gt; codePoints(w)); flatMap(Function)：当 Function 产生流时使用。 flatMapToInt(Function)：当 Function 产生 IntStream 时使用。 flatMapToLong(Function)：当 Function 产生 LongStream 时使用。 flatMapToDouble(Function)：当 Function 产生 DoubleStream 时使用。 concat() 以参数顺序组合两个流。 package com.test.day15; import java.util.Random; import java.util.stream.IntStream; import java.util.stream.Stream; /*一个整数流开始，然后使用每一个整数去创建更多的随机数。*/ public class StreamOfRandoms &amp;#123; static Random rand = new Random(47); //一个种子为47的随机数生成，多个相同种子的随机生成实例，生成的结果一致 public static void main(String[] args) &amp;#123; Stream.of(1,2,3,4,5) .flatMapToInt(i -&gt; IntStream.concat( //concat()，以参数顺序组合两个流，我们在每个随机 `Integer` 流的末尾添加一个 -1 作为标记 rand.ints(0,100).limit(i)//根据i的值返回i个元素 , //生成随机数，仅返回0（包含）-100（不包含）之间的数 IntStream.of(-1)//生成一个整数流包含-1 )).forEach(n -&gt; System.out.format(&quot;%d\\n&quot;,n)); &amp;#125; &amp;#125; peek()帮助调试。可无修改地查看流中的元素。 distinct()收集流中不重复的元素 空流 Stream.empty() 如果你在没有任何上下文环境的情况下调用 Stream.empty()，Java 并不知道它的数据类型； 解决这个问题:1、2均可 1. Stream.&lt;String&gt;empty()//限定类型为String 2. Stream&lt;String&gt; s = Stream.empty();","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"函数式编程","slug":"Java-03","date":"2020-10-16T14:49:11.626Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-03/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-03/","excerpt":"","text":"任何 Lambda 表达式的基本语法是： 参数。 接着 -&gt;，可视为“产出”。 -&gt; 之后的内容都是方法体。 当只用一个参数，可以不需要括号 ()。 然而，这是一个特例; 正常情况使用括号 () 包裹参数。 为了保持一致性，也可以使用括号 () 包裹单个参数，虽然这种情况并不常见; 如果没有参数，则必须使用括号 () 表示空参数列表; 对于多个参数，将参数列表放在括号 () 中; 表达式的结果自动成为Lambda 表达式的返回值，在此处使用 return 关键字是非法的。 递归方法必须是实例变量或静态变量，否则会出现编译时错误 方法引用方法引用组成：类名或对象名 :: 方法名 package com.test.day6; // functional/MethodReferences.java import java.util.*; interface Callable &amp;#123; // [1] void call(String s); &amp;#125; class Describe &amp;#123; void show(String msg) &amp;#123; // [2] System.out.println(msg); &amp;#125; &amp;#125; public class MethodReferences &amp;#123; static void hello(String name) &amp;#123; // [3] System.out.println(&quot;Hello, &quot; + name); &amp;#125; static class Description &amp;#123; String about; Description(String desc) &amp;#123; about = desc; &amp;#125; void help(String msg) &amp;#123; // [4] System.out.println(about + &quot; &quot; + msg); &amp;#125; &amp;#125; static class Helper &amp;#123; static void assist(String msg) &amp;#123; // [5] System.out.println(msg); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; Describe d = new Describe(); Callable c = d::show; //将 Describe 对象的方法引用赋值给 Callable ，它没有 show() 方法，而是 call() 方法。 c.call(&quot;call()&quot;); //现在可以通过调用 call() 来调用 show()，因为 Java 将 call() 映射到 show(),因为其签名均是String。 c = MethodReferences::hello; //这是一个静态方法引用。 c.call(&quot;Bob&quot;); c = new Description(&quot;valuable&quot;)::help; // 对已实例化对象的方法的引用，称为绑定方法引用。 c.call(&quot;information&quot;); c = Helper::assist; // 内部类方法引用 c.call(&quot;Help!&quot;); &amp;#125; &amp;#125; Runnable接口Runnable 接口自 1.0 版以来一直在 Java 中，因此不需要导入。它也符合特殊的单方法接口格式：它的方法 run() 不带参数，也没有返回值。因此，我们可以使用 Lambda 表达式和方法引用作为 Runnable： // 方法引用与 Runnable 接口的结合使用 class Go &amp;#123; static void go() &amp;#123; System.out.println(&quot;Go::go()&quot;); &amp;#125; &amp;#125; public class RunnableMethodReference &amp;#123; public static void main(String[] args) &amp;#123; new Thread(new Runnable() &amp;#123;//内部类方法 public void run() &amp;#123; System.out.println(&quot;Anonymous&quot;); &amp;#125; &amp;#125;).start(); new Thread( () -&gt; System.out.println(&quot;lambda&quot;)//lambda表达式 ).start(); new Thread(Go::go).start();//方法引用 &amp;#125; &amp;#125; 未绑定的方法引用 在目标类没有对象的时候对其采用方法引用，即为未绑定方法引用（静态类除外） 可使用目标类类型的方法参数解决未绑定方法引用问题 package com.test.day6; // functional/UnboundMethodReference.java // 没有方法引用的对象 class X &amp;#123; String f() &amp;#123; return &quot;X::f()&quot;; &amp;#125; &amp;#125; interface MakeString &amp;#123; String make(); &amp;#125; interface TransformX &amp;#123; String transform(X x); &amp;#125; public class UnboundMethodReference &amp;#123; public static void main(String[] args) &amp;#123; // MakeString ms = X::f; // 不能在没有 X 对象的前提下调用 f()。 因此，X :: f 表示未绑定的方法引用，因为它尚未“绑定”到对象。 TransformX sp = X::f;//TransformX下的String transform(X x)方法接受一个X类的参数，所以可与完成对象绑定并成功调用方法。 X x = new X(); System.out.println(sp.transform(x)); // [2] System.out.println(x.f()); // 同等效果 &amp;#125; &amp;#125; package com.test.day6; // functional/MultiUnbound.java // 未绑定的方法与多参数的结合运用 class This &amp;#123; void two(int i, double d) &amp;#123;&amp;#125; void three(int i, double d, String s) &amp;#123;&amp;#125; void four(int i, double d, String s, char c) &amp;#123;&amp;#125; &amp;#125; /*接口方法中加入对象类型参数 达到绑定对象目的*/ interface TwoArgs &amp;#123; void call2(This athis, int i, double d);//参数This athis达到绑定对象目的 &amp;#125; interface ThreeArgs &amp;#123; void call3(This athis, int i, double d, String s); &amp;#125; interface FourArgs &amp;#123; void call4( This athis, int i, double d, String s, char c); &amp;#125; public class MultiUnbound &amp;#123; public static void main(String[] args) &amp;#123; TwoArgs twoargs = This::two; ThreeArgs threeargs = This::three; FourArgs fourargs = This::four; This athis = new This(); twoargs.call2(athis, 11, 3.14);//相当于woargs.call2(this.athis, 11, 3.14),成功绑定对象并传入参数调用方法 threeargs.call3(athis, 11, 3.14, &quot;Three&quot;); fourargs.call4(athis, 11, 3.14, &quot;Four&quot;, &#39;Z&#39;); &amp;#125; &amp;#125; 构造器引用package com.test.day6; // functional/CtorReference.java class Dog &amp;#123; String name; int age = -1; // For &quot;unknown&quot; Dog() &amp;#123; name = &quot;stray&quot;; &amp;#125; Dog(String nm) &amp;#123; name = nm; &amp;#125; Dog(String nm, int yrs) &amp;#123; name = nm; age = yrs; &amp;#125; &amp;#125; interface MakeNoArgs &amp;#123; Dog make(); &amp;#125; interface Make1Arg &amp;#123; Dog make(String nm); &amp;#125; interface Make2Args &amp;#123; Dog make(String nm, int age); &amp;#125; public class CtorReference &amp;#123; public static void main(String[] args) &amp;#123; /*[1][2][3]分别引用不同签名的构造器*/ MakeNoArgs mna = Dog::new; // [1]根据MakeNoArgs接口中方法的签名引用相符的构造器 Make1Arg m1a = Dog::new; // [2]根据Make1Arg接口中方法的签名引用相符的构造器 Make2Args m2a = Dog::new; // [3]根据MakeNoArgsMake2Args接口中方法的签名引用相符的构造器 Dog dn = mna.make();//相当于调用引用Dog类的构造器 Dog d1 = m1a.make(&quot;Comet&quot;); Dog d2 = m2a.make(&quot;Ralph&quot;, 4); &amp;#125; &amp;#125; 函数式接口 只包含一个抽象方法的接口（接口中方法默认为抽象的） 如果将方法引用或 Lambda 表达式赋值给函数式接口（类型需要匹配），Java 会适配你的赋值到目标接口。 编译器会自动包装方法引用或 Lambda 表达式到实现目标接口的类的实例中。 // functional/FunctionalAnnotation.java @FunctionalInterface //@FunctionalInterface 的作用：接口中如果有多个方法则会产生编译期错误 interface Functional &amp;#123; String goodbye(String arg); &amp;#125; interface FunctionalNoAnn &amp;#123; String goodbye(String arg); &amp;#125; public class FunctionalAnnotation &amp;#123; public String goodbye(String arg) &amp;#123; return &quot;Goodbye, &quot; + arg; &amp;#125; public static void main(String[] args) &amp;#123; FunctionalAnnotation fa = new FunctionalAnnotation(); Functional f = fa::goodbye; FunctionalNoAnn fna = fa::goodbye; // Functional fac = fa; // Incompatible Functional fl = a -&gt; &quot;Goodbye, &quot; + a; FunctionalNoAnn fnal = a -&gt; &quot;Goodbye, &quot; + a; &amp;#125; &amp;#125; java.util.function 包旨在创建一组完整的目标接口，使得我们一般情况下不需再定义自己的接口。 以下是基本命名准则： 如果只处理对象而非基本类型，名称则为 Function，Consumer，Predicate 等。参数类型通过泛型添加。 如果接收的参数是基本类型，则由名称的第一部分表示，如 LongConsumer，DoubleFunction，IntPredicate 等，但基本 Supplier 类型例外。 如果返回值为基本类型，则用 To 表示，如 ToLongFunction &lt;T&gt; 和 IntToLongFunction。 如果返回值类型与参数类型一致，则是一个运算符：单个参数使用 UnaryOperator，两个参数使用 BinaryOperator。 如果接收两个参数且返回值为布尔值，则是一个谓词（Predicate）。 如果接收的两个参数类型不同，则名称中有一个 Bi。 下表描述了 java.util.function 中的目标类型（包括例外情况）： 特征 函数式方法名 示例 无参数； 无返回值 Runnable (java.lang) run() Runnable 无参数； 返回类型任意 Supplier get() getAs类型() Supplier&lt;T&gt; BooleanSupplier IntSupplier LongSupplier DoubleSupplier 无参数； 返回类型任意 Callable (java.util.concurrent) call() Callable&lt;V&gt; 1 参数； 无返回值 Consumer accept() Consumer&lt;T&gt; IntConsumer LongConsumer DoubleConsumer 2 参数 Consumer BiConsumer accept() BiConsumer&lt;T,U&gt; 2 参数 Consumer； 1 引用； 1 基本类型 Obj类型Consumer accept() ObjIntConsumer&lt;T&gt; ObjLongConsumer&lt;T&gt; ObjDoubleConsumer&lt;T&gt; 1 参数； 返回类型不同 Function apply() To类型 和 类型To类型 applyAs类型() Function&lt;T,R&gt; IntFunction&lt;R&gt; LongFunction&lt;R&gt; DoubleFunction&lt;R&gt; ToIntFunction&lt;T&gt; ToLongFunction&lt;T&gt; ToDoubleFunction&lt;T&gt; IntToLongFunction IntToDoubleFunction LongToIntFunction LongToDoubleFunction DoubleToIntFunction DoubleToLongFunction 1 参数； 返回类型相同 UnaryOperator apply() UnaryOperator&lt;T&gt; IntUnaryOperator LongUnaryOperator DoubleUnaryOperator 2 参数类型相同； 返回类型相同 BinaryOperator apply() BinaryOperator&lt;T&gt; IntBinaryOperator LongBinaryOperator DoubleBinaryOperator 2 参数类型相同; 返回整型 Comparator (java.util) compare() Comparator&lt;T&gt; 2 参数； 返回布尔型 Predicate test() Predicate&lt;T&gt; BiPredicate&lt;T,U&gt; IntPredicate LongPredicate DoublePredicate 参数基本类型； 返回基本类型 类型To类型Function applyAs类型() IntToLongFunction IntToDoubleFunction LongToIntFunction LongToDoubleFunction DoubleToIntFunction DoubleToLongFunction 2 参数类型不同 Bi操作 (不同方法名) BiFunction&lt;T,U,R&gt; BiConsumer&lt;T,U&gt; BiPredicate&lt;T,U&gt; ToIntBiFunction&lt;T,U&gt; ToLongBiFunction&lt;T,U&gt; ToDoubleBiFunction&lt;T&gt; 此表仅提供些常规方案。通过上表，你应该或多或少能自行推导出更多行的函数式接口。","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"集合","slug":"Java-02","date":"2020-10-16T14:49:11.625Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-02/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-02/","excerpt":"","text":"在编程时，可以将任意数量的对象放置在集合中，而不用关心集合应该有多大。 基本的集合： Map ， List ， Set 和 Queue 集合不能保存基本类型，但自动装箱机制会负责执行基本类型和集合中保存的包装类型之间的双向转换。 Set （元组）不接受重复元素。 HashSet 提供最快的查询速度，而 TreeSet 保持元素处于排序状态。 LinkedHashSet 按插入顺序保存其元素，但使用散列提供快速访问的能力。 Map （字典）是一种将对象（而非数字）与对象相关联的设计。 HashMap 专为快速访问而设计，而 TreeMap 保持键始终处于排序状态，所以没有 HashMap 快。 LinkedHashMap 按插入顺序保存其元素，但使用散列提供快速访问的能力。 结构图import java.util.*; class Apple &amp;#123; private static long counter; private final long id = counter++; public long id() &amp;#123; return id; &amp;#125; &amp;#125; class Orange &amp;#123;&amp;#125; public class ApplesAndOrangesWithoutGenerics &amp;#123; @SuppressWarnings(&quot;unchecked&quot;) public static void main(String[] args) &amp;#123; ArrayList apples = new ArrayList(); for(int i = 0; i &lt; 3; i++) apples.add(new Apple()); /*ArrayList 保存的是 Object ，所以不仅可以通过 ArrayList 的 add() 方法将 Apple 对象放入这个集合，而且可以放入 Orange 对象。*/ apples.add(new Orange()); for(Object apple : apples) &amp;#123; ((Apple) apple).id(); /*当使用 ArrayList 的 get() 方法来取出你认为是 Apple 的对象时，得到的只是 Object 引用，必须将其转型为 Apple。然后需要将整个表达式用括号括起来，以便在调用 Apple 的 id() 方法之前，强制执行转型。*/ &amp;#125; &amp;#125; &amp;#125; /**通过泛型,限定&lt;Apple&gt;类型防止其它类型对象添加到容器中*/ import java.util.*; class GrannySmith extends Apple &amp;#123;&amp;#125; public class ApplesAndOrangesWithGenerics &amp;#123; public static void main(String[] args) &amp;#123; ArrayList&lt;Apple&gt; apples = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; 3; i++) apples.add(new GrannySmith());//向上转型也可以添加到容器哦 apples.add(new Apple()); // Compile-time error: // apples.add(new Orange()); for(Apple apple : apples) &amp;#123; System.out.println(apple.id()); //使用泛型，容器知道它被限定为什么类型，因此当调用 get() 时，它会替你执行转型，因此从泛型容器中获取元素不需要强制类型转换。 添加元数组 Arrays.asList() 方法接受一个数组或是逗号分隔的元素列表（使用可变参数），并将其转换为 List 对象。 Collections.addAll() 方法接受一个 Collection 对象，以及一个数组或是一个逗号分隔的列表，将其中元素添加到 Collection 中 package com.test.day3; import java.util.*; public class AddingGroups &amp;#123; public static void main(String[] args) &amp;#123; Collection&lt;Integer&gt; collection = new ArrayList&lt;&gt;(Arrays.asList(1,2,3,4,5)); Integer[] moreInts = &amp;#123;6,7,8,9,10&amp;#125;; collection.addAll(Arrays.asList(moreInts));//Collection.addAll() 方法只能接受另一个 Collection 作为参数 /*Collection 可以接受另一个 Collection进行初始化，所以使用 Arrays.asList() 可为这个构造器产生输入。 Collections.addAll() 运行得更快，而且很容易构建一个不包含元素的 Collection ，再调用 Collections.addAll()添加元素 */ Collections.addAll(collection,11,12,13,14,15); Collections.addAll(collection,moreInts); /*使用 Arrays.asList() 的输出作为一个 List ，无法调整大小*/ List&lt;Integer&gt; list = Arrays.&lt;Integer&gt;asList(16,17,18,19,20); //告诉编译器 Arrays.asList() 生成的结果 List 类型的实际目标类型是什么。这称为显式类型参数说明 list.set(1,99); &amp;#125; &amp;#125; 简介 集合提供的 toString() 方法即可生成可读性很好的结果。 Collection 打印出的内容用方括号括住，每个元素由逗号分隔。 Map 则由大括号括住，每个键和值用等号连接 Collection 类型在每个槽中只能保存一个元素。 Set 中元素不重复； Queue ，只在一端插入对象，并从另一端移除对象； Map 在每个槽中存放了两个元素，即键和与之关联的值。 import java.util.*; public class PrintingCollections &amp;#123; static Collection fill(Collection&lt;String&gt; collection) &amp;#123; collection.add(&quot;rat&quot;); collection.add(&quot;cat&quot;); collection.add(&quot;dog&quot;); collection.add(&quot;dog&quot;); return collection; &amp;#125; static Map fill(Map&lt;String, String&gt; map) &amp;#123; map.put(&quot;rat&quot;, &quot;Fuzzy&quot;); map.put(&quot;cat&quot;, &quot;Rags&quot;); map.put(&quot;dog&quot;, &quot;Bosco&quot;); map.put(&quot;dog&quot;, &quot;Spot&quot;); return map; &amp;#125; public static void main(String[] args) &amp;#123; System.out.println(fill(new ArrayList&lt;&gt;())); //ArrayList ，擅长随机访问元素，但在 List 中间插入和删除元素时速度较慢。 System.out.println(fill(new LinkedList&lt;&gt;())); //LinkedList ，它通过代价较低的在 List 中间进行的插入和删除操作，提供了优化的顺序访问。 LinkedList 对于随机访问来说相对较慢，但它具有比 ArrayList 更大的特征集。 System.out.println(fill(new HashSet&lt;&gt;())); System.out.println(fill(new TreeSet&lt;&gt;())); //如果存储顺序很重要，则可以使用 TreeSet ，它将按比较结果的升序保存对象 System.out.println(fill(new LinkedHashSet&lt;&gt;())); //LinkedHashSet ，它按照被添加的先后顺序保存对象。 System.out.println(fill(new HashMap&lt;&gt;())); // 键和值保存在 HashMap 中的顺序不是插入顺序，因为 HashMap 实现使用了非常快速的算法来控制顺序。 System.out.println(fill(new TreeMap&lt;&gt;())); // TreeMap 通过比较结果的升序来保存键 System.out.println(fill(new LinkedHashMap&lt;&gt;())); //LinkedHashMap 在保持 HashMap 查找速度的同时按键的插入顺序保存键。 &amp;#125; &amp;#125; /* Output: [rat, cat, dog, dog] [rat, cat, dog, dog] [rat, cat, dog] [cat, dog, rat] [rat, cat, dog] &amp;#123;rat=Fuzzy, cat=Rags, dog=Spot&amp;#125; &amp;#123;cat=Rags, dog=Spot, rat=Fuzzy&amp;#125; &amp;#123;rat=Fuzzy, cat=Rags, dog=Spot&amp;#125; */ 迭代器统一集合的移动、删除 Iterator 使用 iterator() 方法要求集合返回一个 Iterator。 Iterator 将准备好返回序列中的第一个元素。 使用 next() 方法获得序列中的下一个元素。 使用 hasNext() 方法检查序列中是否还有元素。 使用 remove() 方法将迭代器最近返回的那个元素删除。 ListIterator ListIterator 可以双向移动。它可以生成迭代器在列表中指向位置的后一个和前一个元素的索引，并且可以使用 set() 方法替换它访问过的最近一个元素。可以通过调用 listIterator() 方法来生成指向 List 开头处的 ListIterator ，还可以通过调用 listIterator(n) 创建一个一开始就指向列表索引号为 n 的元素处的 ListIterator 。 集合类型链表LinkedList getFirst() 和 element() 是相同的，它们都返回列表的头部（第一个元素）而并不删除它，如果 List 为空，则抛出 NoSuchElementException 异常。 peek() 方法与这两个方法只是稍有差异，它在列表为空时返回 null 。 removeFirst() 和 remove() 也是相同的，它们删除并返回列表的头部元素，并在列表为空时抛出 NoSuchElementException 异常。 poll() 稍有差异，它在列表为空时返回 null 。 addFirst() 在列表的开头插入一个元素。 offer() 与 add() 和 addLast() 相同。 它们都在列表的尾部（末尾）添加一个元素。 removeLast() 删除并返回列表的最后一个元素。 栈Java 1.0 中附带了一个 Stack 类，设计的很糟糕：如果只需要栈的行为，那么使用继承是不合适的，因为这将产生一个具有 ArrayDeque 的其它所有方法的类。 Java 6 添加了 **ArrayDeque ，其中包含直接实现堆栈功能的方法: package com.test.day5; import java.util.ArrayDeque; import java.util.Deque; public class Stack&lt;T&gt; &amp;#123; private Deque&lt;T&gt; storage = new ArrayDeque&lt;&gt;(); public void push(T v)&amp;#123;storage.push(v);&amp;#125;//将调用ArrayDeque类中addFirst（）方法即将指定元素插入此双端队列的开头。 public T peek() &amp;#123;return storage.peek();&amp;#125; public T pop() &amp;#123;return storage.pop();&amp;#125; public boolean isEmpty() &amp;#123;return storage.isEmpty();&amp;#125;//将调用ArrayDeque类中将调用ArrayDeque类中addFirst（）方法 @Override public String toString()&amp;#123; return storage.toString(); &amp;#125; &amp;#125; onjava8中利用泛型实现的栈： package com.test.day5; import java.util.ArrayDeque; import java.util.Deque; public class Stack&lt;T&gt; &amp;#123; private Deque&lt;T&gt; storage = new ArrayDeque&lt;&gt;(); public void push(T v)&amp;#123;storage.push(v);&amp;#125;//将调用ArrayDeque类中addFirst（）方法即将指定元素插入此双端队列的开头。 public T peek() &amp;#123;return storage.peek();&amp;#125; public T pop() &amp;#123;return storage.pop();&amp;#125; public boolean isEmpty() &amp;#123;return storage.isEmpty();&amp;#125;//将调用ArrayDeque类中将调用ArrayDeque类中addFirst（）方法 @Override public String toString()&amp;#123; return storage.toString(); &amp;#125; &amp;#125; //测试： public class StackTest2 &amp;#123; public static void main(String[] args) &amp;#123; Stack&lt;String&gt; stack = new Stack&lt;&gt;();//创建此对象的同时，Stack类也将创建ArrayDeque对象 for (String s : &quot;My dog has fleas&quot;.split(&quot; &quot;)) stack.push(s); while (!stack.isEmpty()) System.out.println(stack.pop() + &quot; &quot;); &amp;#125; &amp;#125; 集合Set Set 不保存重复的元素。 如果试图将相同对象的多个实例添加到 Set 中，那么它会阻止这种重复行为。 Set 最常见的用途是测试归属性。 **迭代器与集合 ** public class InterfaceVsIterator &amp;#123; public static void display(Iterator&lt;Pet&gt; it) &amp;#123; while(it.hasNext()) &amp;#123; Pet p = it.next(); System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;);//返回越过的值 &amp;#125; System.out.println(); &amp;#125; public static void display(Collection&lt;Pet&gt; pets) &amp;#123; for(Pet p : pets) System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;); System.out.println(); &amp;#125; /*两个版本的 display() 方法都可以使用 Map 或 Collection 的子类型来工作。 而且Collection 接口和 Iterator 都将 display() 方法与低层集合的特定实现解耦。 Collection 要更方便一点，因为它是 Iterable 类型，因此在 display(Collection) 的实现中可以使用 for-in 构造，这使得代码更加清晰*/ public static void main(String[] args) &amp;#123; List&lt;Pet&gt; petList = Pets.list(8); Set&lt;Pet&gt; petSet = new HashSet&lt;&gt;(petList); Map&lt;String, Pet&gt; petMap = new LinkedHashMap&lt;&gt;(); String[] names = (&quot;Ralph, Eric, Robin, Lacey, &quot; + &quot;Britney, Sam, Spot, Fluffy&quot;).split(&quot;, &quot;); for(int i = 0; i &lt; names.length; i++) petMap.put(names[i], petList.get(i)); display(petList); display(petSet); display(petList.iterator()); display(petSet.iterator()); System.out.println(petMap); System.out.println(petMap.keySet()); display(petMap.values()); display(petMap.values().iterator()); &amp;#125; &amp;#125; 队列 offer()在队列的尾部插入一个元素，或者返回 false 。 peek() 和 element() 都返回队头元素而不删除它，但是如果队列为空，则 element() 抛出 NoSuchElementException ，而 peek() 返回 null 。 poll() 和 remove() 都删除并返回队头元素，但如果队列为空，poll() 返回 null ，而 remove() 抛出 NoSuchElementException 。 自动包装机制会自动将 nextInt() 的 int 结果转换为 queue 所需的 Integer 对象，并将 char c 转换为 qc 所需的 Character 对象 package com.test.day4; import java.util.LinkedList; import java.util.Queue; import java.util.Random; public class QueueDemo &amp;#123; public static void printQ(Queue queue)&amp;#123; /*删除队列中所有元素*/ while (queue.peek()!=null)//peek()查询队列第一个元素 System.out.println(queue.remove()+&quot;&quot;); System.out.println(); &amp;#125; public static void main(String[] args) &amp;#123; Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); Random rand = new Random(47);//用来生成随机数 for (int i = 0; i &lt; 10; i++) queue.offer(rand.nextInt(i+10));//向队列添加元素 printQ(queue); Queue&lt;Character&gt; qc = new LinkedList&lt;&gt;(); for (char c: &quot;Brontosaurus&quot;.toCharArray())//将字符串分为单个字符加入队列中 qc.offer(c); printQ(qc); &amp;#125; 优先级队列PriorityQueue 可以通过提供Comparator 来修改队列元素顺序。 PriorityQueue 确保在调用 peek() ， poll() 或 remove() 方法时，获得的元素将是队列中优先级最高的元素 Integer ， String 和 Character 可以与 PriorityQueue 一起使用，因为这些类已经内置了自然排序。如果想在 PriorityQueue 中使用自己的类，则必须包含额外的功能以产生自然排序，或者必须提供自己的 Comparator 。 import java.util.*; /*int string 均有默认的大小顺序*/ public class PriorityQueueDemo &amp;#123; public static void main(String[] args) &amp;#123; PriorityQueue&lt;Integer&gt; priorityQueue = new PriorityQueue&lt;&gt;(); Random rand = new Random(); for(int i = 0; i &lt; 10; i++) priorityQueue.offer(rand.nextInt(i + 10));//将指定的元素插入此优先级队列。 QueueDemo.printQ(priorityQueue);//删除并打印队列所有元素 List&lt;Integer&gt; ints = Arrays.asList(25, 22, 20, 18, 14, 9, 3, 1, 1, 2, 3, 9, 14, 18, 21, 23, 25); priorityQueue = new PriorityQueue&lt;&gt;(ints); QueueDemo.printQ(priorityQueue); priorityQueue = new PriorityQueue&lt;&gt;( ints.size(), Collections.reverseOrder());//反序排列 priorityQueue.addAll(ints); QueueDemo.printQ(priorityQueue); String fact = &quot;EDUCATION SHOULD ESCHEW OBFUSCATION&quot;; List&lt;String&gt; strings = Arrays.asList(fact.split(&quot;&quot;));//将这个字符串分解为字母（依据空格）填入列表中 PriorityQueue&lt;String&gt; stringPQ = new PriorityQueue&lt;&gt;(strings); QueueDemo.printQ(stringPQ); stringPQ = new PriorityQueue&lt;&gt;( strings.size(), Collections.reverseOrder());//按原stringPQ大小，创建一个新的队列，反并序排列 stringPQ.addAll(strings);//将strings中的所有元素添加进队列 QueueDemo.printQ(stringPQ); Set&lt;Character&gt; charSet = new HashSet&lt;&gt;(); for(char c : fact.toCharArray())//toCharArray分割字符。 charSet.add(c); PriorityQueue&lt;Character&gt; characterPQ = new PriorityQueue&lt;&gt;(charSet);//创建队列对象并将集合的元素“安排”到队列中 QueueDemo.printQ(characterPQ); &amp;#125; &amp;#125; /* Output: 0 1 1 1 1 1 3 5 8 14 1 1 2 3 3 9 9 14 14 18 18 20 21 22 23 25 25 25 25 23 22 21 20 18 18 14 14 9 9 3 3 2 1 1 A A B C C C D D E E E F H H I I L N N O O O O S S S T T U U U W W U U U T T S S S O O O O N N L I I H H F E E E D D C C C B A A A B C D E F H I L N O S T U W */ 字典package com.test.day5; import java.util.HashMap; import java.util.Map; import java.util.Random; public class Statistics &amp;#123; public static void main(String[] args) &amp;#123; Random rand = new Random(47); Map&lt;Integer,Integer&gt; m = new HashMap&lt;&gt;();//创建键值均为int类型的字典对象 for (int i = 0; i &lt; 1000; i++)&amp;#123; int r = rand.nextInt(20); Integer freq = m.get(r);//查询有无值r，无则返回null m.put(r, freq == null ? 1: freq + 1 );//如字典中有这个值，则为其加一 &amp;#125; System.out.println(m); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"接口","slug":"Java-01","date":"2020-10-16T14:49:11.624Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-01/","excerpt":"","text":"恰当的原则是优先使用类而不是接口。从类开始，如果使用接口的必要性变得很明确，那么就重构。接口是一个伟大的工具，但它们容易被滥用。 接口中可添加静态方法与默认方法； 一个类实现一个接口的同时必须实现该接口的所有方法（可以不用实现默认方法即关键词为为 default的方法）； extends 只能用于单一类，但是在构建接口时可以引用多个基类接口。注意到，接口名之间用逗号分隔。 模板设计模式 把方法抽象封装到接口或抽象类中，在别的类中对其进行实现即，变得是内容，而其框架则始终如一。 就像我与大厨炒西红柿：大家都是加油、加鸡蛋、加西红柿。只是做出来时味道不同罢了。 接口与抽象类（选择） 特性 接口 抽象类 组合 新类可以组合多个接口 只能继承单一抽象类 状态 不能包含属性（除了静态属性，不支持对象状态） 可以包含属性，非抽象方法可能引用这些属性 默认方法 和 抽象方法 不需要在子类中实现默认方法。默认方法可以引用其他接口的方法 必须在子类中实现抽象方法 构造器 没有构造器 可以有构造器 可见性 隐式 public 可以是 protected 或友元 策略设计模式 创建一个能根据传入的参数类型从而具备不同行为的方法称为策略设计模式。 import java.util.*; class Processor &amp;#123; /*父类*/ public String name() &amp;#123; return getClass().getSimpleName(); &amp;#125; public Object process(Object input) &amp;#123; return input; &amp;#125; &amp;#125; /*子类开始，将所有传入类设置为同一个类的子类*/ class Upcase extends Processor &amp;#123; // 返回协变类型 @Override public String process(Object input) &amp;#123; return ((String) input).toUpperCase(); &amp;#125; &amp;#125; class Downcase extends Processor &amp;#123; @Override public String process(Object input) &amp;#123; return ((String) input).toLowerCase(); &amp;#125; &amp;#125; class Splitter extends Processor &amp;#123; @Override public String process(Object input) &amp;#123; // split() divides a String into pieces: return Arrays.toString(((String) input).split(&quot; &quot;)); &amp;#125; &amp;#125; /*策略开始*/ public class Applicator &amp;#123; public static void apply(Processor p, Object s) &amp;#123; //(Processor p。已知：所有传入类设置为同一个类的子类，故其父类的变量可以作为引用 System.out.println(&quot;Using Processor &quot; + p.name());//获取其类名 System.out.println(p.process(s));//根据其类名调用其覆盖的相应的process方法 &amp;#125; public static void main(String[] args) &amp;#123; String s = &quot;We are such stuff as dreams are made on&quot;; //进入策略，以下3类均为Processor子类，故可用Processor p分别引用以下3个不同类型的对象 apply(new Upcase(), s); apply(new Downcase(), s); apply(new Splitter(), s); &amp;#125; &amp;#125; 常量字段 接口中的字段都自动是 static 和 final public interface Months &amp;#123; int JANUARY = 1, FEBRUARY = 2, MARCH = 3, APRIL = 4, MAY = 5, JUNE = 6, JULY = 7, AUGUST = 8, SEPTEMBER = 9, OCTOBER = 10, NOVEMBER = 11, DECEMBER = 12; &amp;#125; 内部类 所有类都必须是公共可用的，唯独内部类不同。——一枝独秀 内部类的变量必须是最终变量。传入参数默认为fianl 创建内部类对象：在拥有外部类对象之前不可创建内部类对象，且必须使用外部类的对象来创建其内部类对象。 典型手法：外部类中的一个方法返回指向内部类的引用。 可以让内部类实现一个接口，再借接口变量对创建的内部类对象进行引用。 当内部类在方法内部时除该方法外，所有类与方法不得访问。 类只能继承一个父类，实现多个内部类继承类，则等同于实现类的多继承。 迭代器设计模式 利用内部类实现迭代器功能，对其外类元素（方法、字段）进行访问。 package com.test.day2; public class Sequence &amp;#123; private Object[] items; private int next = 0; public Sequence(int size)&amp;#123; items = new Object[size]; &amp;#125; public void add(Object x)&amp;#123; if(next &lt; items.length) items[next++] = x; &amp;#125; private class SequenceSelector implements Selector&amp;#123; private int i = 0; @Override public boolean end() &amp;#123;return i == items.length;&amp;#125; @Override public Object current() &amp;#123;return items[i];&amp;#125; @Override public void next() &amp;#123;if (i &lt; items.length) i++;&amp;#125;//定义一个迭代器，if语句相当于hasNext &amp;#125; public Selector selector()&amp;#123; /*返回指向内部类的引用。*/ return new SequenceSelector(); //当某个外围类的对象创建了一个内部类对象时，此内部类对象必定会秘密地捕获一个指向那个外围类对象的引用。 // 然后，在你访问此外围类的成员时，就是用那个引用来选择外围类的成员。 &amp;#125; public static void main(String[] args) &amp;#123; Sequence sequence = new Sequence(10); for (int i = 0; i &lt; 10; i++) sequence.add(Integer.toString(i));//Integer.toString()表示先讲int转换bai成Integer型，然后再将Integer转换成String型。 Selector selector = sequence.selector();//返回、创建、引用内部类对象操作开始（此处使用接口变量，对内部类对象进行引用） //Selector selector = sequence.new SequenceSelector();//外部类方法返回内部类引用、创建内部类对象 //var selector = sequence.new SequenceSelector();//简写引用、创建内部类对象 // Sequence.SequenceSelector selector = sequence.new SequenceSelector();//使用外部类.内部类引用、创建内部类对象 while (!selector.end())&amp;#123; System.out.println(selector.current() + &quot; &quot;); selector.next(); &amp;#125; &amp;#125; &amp;#125; 这是因为内部类对象会暗暗地连接到建它的外部类对象上。但是，如果你创建的是嵌套类（静态内部类），那么它就不需要对外部类对象的引用。 this、newpublic class DotThis &amp;#123; void f() &amp;#123; System.out.println(&quot;DotThis.f()&quot;); &amp;#125; public class Inner &amp;#123; public DotThis outer() &amp;#123; return DotThis.this;//创建对外部类对象的引用 &amp;#125; &amp;#125; public Inner inner() &amp;#123; return new Inner(); &amp;#125; public static void main(String[] args) &amp;#123; DotThis dt = new DotThis();//在拥有外部类对象之前不可创建内部类对象。 DotThis.Inner dti = dt.inner();//必须使用外部类的对象来创建其内部类对象 dti.outer().f(); &amp;#125; &amp;#125; public class DotNew &amp;#123; public class Inner &amp;#123;&amp;#125; public static void main(String[] args) &amp;#123; DotNew dn = new DotNew(); DotNew.Inner dni = dn.new Inner();//声明一个内部类变量并引用一个内部类对象 // var dni = dn.new Inner();//声明一个内部类变量并引用一个内部类对象 &amp;#125; &amp;#125; 匿名内部类 如果定义一个匿名内部类，并且希望它使用一个在其外部定义的对象，那么编译器会要求其参数引用是 final 的 匿名内部类的初始化（借助抽象类） package com.test.day2; abstract class Base &amp;#123;//抽象类的构造器 Base(int i) &amp;#123; System.out.println(&quot;Base constructor, i = &quot; + i); &amp;#125; public abstract void f(); &amp;#125; public class AnonymousConstructor &amp;#123; public static Base getBase(int i) &amp;#123; return new Base(i) &amp;#123;//利用抽象类构造器进行字段初始化。 &amp;#123; System.out.println( &quot;Inside instance initializer&quot;); &amp;#125; @Override public void f() &amp;#123; System.out.println(&quot;In anonymous f()&quot;); &amp;#125; &amp;#125;; &amp;#125; public static void main(String[] args) &amp;#123; Base base = getBase(47); base.f(); &amp;#125; &amp;#125; 嵌套内部类 普通的内部类对象隐式地保存了一个引用，指向创建它的外围类对象。然而，当内部类是 static 的时，就不是这样了。嵌套类意味着： 要创建嵌套类的对象，并不需要先创建其外部类的对象，即直接创建并引用即可。 不能从嵌套类的对象中访问非静态的外围类对象。 public class Parcel11 &amp;#123; private static class ParcelContents implements Contents &amp;#123; private int i = 11; @Override public int value() &amp;#123; return i; &amp;#125; &amp;#125; protected static final class ParcelDestination implements Destination &amp;#123; private String label; private ParcelDestination(String whereTo) &amp;#123; label = whereTo; &amp;#125; @Override public String readLabel() &amp;#123; return label; &amp;#125; // Nested classes can contain other static elements: public static void f() &amp;#123;&amp;#125; static int x = 10; static class AnotherLevel &amp;#123; public static void f() &amp;#123;&amp;#125; static int x = 10; &amp;#125; &amp;#125; public static Destination destination(String s) &amp;#123; return new ParcelDestination(s); &amp;#125; public static Contents contents() &amp;#123; return new ParcelContents(); &amp;#125; public static void main(String[] args) &amp;#123; Contents c = contents(); //并没有创建外部类的对象，再用外部类对象创建内部类。 //var i = new Parcel11() //var c = i.contents() Destination d = destination(&quot;Tasmania&quot;); &amp;#125; &amp;#125; /**一个接口内部的类（接口内方法、字段默认为final static）*/ public interface ClassInInterface &amp;#123; void howdy(); class Test implements ClassInInterface &amp;#123; @Override public void howdy() &amp;#123; System.out.println(&quot;Howdy!&quot;); &amp;#125; public static void main(String[] args) &amp;#123; new Test().howdy(); &amp;#125; &amp;#125; &amp;#125; 继承内部类 内部类无法被覆盖，但可通过继承覆盖其方法 class WithInner &amp;#123; class Inner &amp;#123; public Yolk() &amp;#123; System.out.println(&quot;Egg.Yolk()&quot;); &amp;#125; &amp;#125; &amp;#125; public class InheritInner extends WithInner.Inner &amp;#123;//继承须以（外部类.内部）类形式。 InheritInner(WithInner wi) &amp;#123; wi.super(); @Override public Yolk() &amp;#123; System.out.println(&quot;BigEgg2.Yolk()&quot;); &amp;#125; public static void main(String[] args) &amp;#123; WithInner wi = new WithInner(); InheritInner ii = new InheritInner(wi); &amp;#125; &amp;#125; package cn.day.a5; // files/PathInfo.java import java.nio.file.*; import java.net.URI; import java.io.File; import java.io.IOException; public class PathInfo &amp;#123; static void show(String id, Object p) &amp;#123; System.out.println(id + &quot;: &quot; + p); &amp;#125; static void info(Path p) &amp;#123; show(&quot;toString&quot;, p); show(&quot;Exists&quot;, Files.exists(p));//测试文件是否存在 show(&quot;RegularFile&quot;, Files.isRegularFile(p)); show(&quot;Directory&quot;, Files.isDirectory(p));//测试文件是否是一个目录。 show(&quot;Absolute&quot;, p.isAbsolute());//判断此路径是否为绝对路径 show(&quot;FileName&quot;, p.getFileName());//返回文件名 show(&quot;Parent&quot;, p.getParent());//返回此文件的父路径，无返回null show(&quot;Root&quot;, p.getRoot());//返回此文件的根路径，无返回null System.out.println(&quot;******************&quot;); &amp;#125; public static void main(String[] args) &amp;#123; System.out.println(System.getProperty(&quot;os.name&quot;)); info(Paths.get(&quot;C:&quot;, &quot;path&quot;, &quot;to&quot;, &quot;nowhere&quot;, &quot;NoFile.txt&quot;));//转化路径（此方法将来可能被弃用） Path p = Paths.get(&quot;PathInfo.java&quot;); info(p); Path ap = p.toAbsolutePath();//获取这个文件的绝对路径 info(ap); info(ap.getParent()); try &amp;#123;/*传入p引用 文件的父路径，调用info进行处理*/ info(p.toRealPath()); &amp;#125; catch(IOException e) &amp;#123; System.out.println(e); &amp;#125; URI u = p.toUri();//返回一个URI来表示该路径 System.out.println(&quot;URI: &quot; + u); Path puri = Paths.get(u);//给定的URI转换为Path对象。 System.out.println(Files.exists(puri)); File f = ap.toFile(); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"hexo for github的那些事情","slug":"hexo-01","date":"2020-10-16T14:49:11.622Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/hexo-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/hexo-01/","excerpt":"","text":"首先申明：本篇并非安装hexo的教程，而是本人安装hexo时遇到的一些问题及解决方案。一站式部署hexo教程：官方文档本人操作均按hexo官方文档进行。按官方文档来，问题会比按网上的帖子少的多，且你遇到的问题一定有人已经遇到过，百度搜索你遇到的错误就很容易解决 官方第一坑官方文档中用gh-pages分支，可是全程没有提到，仅仅用到的时候才提到，这个会出问题，不如从一开始就在gh-pages分支上进行 创建gh-pages分支创建分支时主分支的版本库不能为空 git init //创建本地库 git branch -v //查看分支 vim index.html //创建文件（为win10用户请自行手动创建一个文件，仅仅提交版本库用） git add . git branch gh-pages//创建分支 官方第二坑文档没有明明白白的说deploy:的填写_config.yml中deploy:一定要填写好： deploy: type: &#39;git&#39; repo: 你远程库的ssh地址 branch: gh-pages//分支名 hexo命令易懂叙述：hexo g //生成网页 hexo s //本地预览（部署网站到本地，测试用啦） hexo d //部署网站到远程库 hexo clean //清除缓存（网页缓存） hexo clean&amp;&amp;hexo g&amp;&amp;hexo s //连招，清除缓存生成网页并开启本地预览 hexo clean&amp;&amp;hexo g&amp;&amp;hexo d //连招，清除缓存生成网页并部署到远程库 我用到的一些git命令：git add . //添加所有到版本库 git commit -m&quot;1&quot; //提交到本地库 git push blog gh-pages --force //本地库覆盖远程库 git config --global user.email xxx@163.com //本地标识 我遇到的一些错误： 执行 hexo deploy 后,出现 error deployer not found:github 的错误解决方案：npm install hexo-deployer-git --save 忘记遇到的什么问题了：npm install hexo-renderer-pug hexo-renderer-stylus ps：博客，电脑访问不了的话，可以换手机试试。最经网络老抽风无法访问github.io后缀的域名","categories":[{"name":"hexo","slug":"hexo","permalink":"https://main2035.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://main2035.github.io/tags/hexo/"},{"name":"git","slug":"git","permalink":"https://main2035.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://main2035.github.io/tags/github/"}]},{"title":"Cookie","slug":"Cookie-01","date":"2020-10-16T14:49:11.621Z","updated":"2020-10-29T12:35:13.601Z","comments":true,"path":"2020/10/16/Cookie-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/Cookie-01/","excerpt":"","text":"Cookie 用户访问一个网站时，服务器响应时返回cookie，当用户再次访问此网站时（请求头）会携带cookie，服务器以cookie识别用户 作用：在不登录的情况下，完成服务器对客户端的身份识别 常用方法： new Cookie(String name, String value) 创建Cookie并初始化数据 response.addCookie(Cookie cookie) 发送Cookie到客户端Cookie[] request.getCookies() 获取Cookie setMaxAge(int seconds)用于指定cookie存活时间，时间到后，cookie文件自动失效 1. 正数：将Cookie数据写到硬盘的文件中，以秒为单位计时，到期cookie自动失效 2. 负数：默认值,关闭浏览器就删除cookie 3. 零：删除cookie信息 将中文数据存储至cookie事先要进行URL编码操作，在需要的时候进行解码操作 案例： /** 是否为首次访问：如是则发出欢迎语句，否则提示上次登录时间*/ @WebServlet(&quot;/CookieTest&quot;) public class CookieTest extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; response.setContentType(&quot;text/html;charset=utf-8&quot;);//设置响应消息体格式以及编码 Cookie[] cookies = request.getCookies();//获取Cookie boolean flag = false;//是否首次访问的标志，默认为false //遍历cookies if (cookies !=null &amp;&amp; cookies.length &gt; 0)&amp;#123; for (Cookie cookie:cookies) &amp;#123; String name = cookie.getName();//获取cookie名称 System.out.println(&quot;cookie name=&quot;+name); //不是第一次访问 if (&quot;lastTime&quot;.equals(name))&amp;#123; flag = true;//第一次访问后将其设为true Date date = new Date();//获取当前时间 //设置日期格式 SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); String str_date = sdf.format(date);//对日期进行格式化 System.out.println(&quot;编码前：&quot;+str_date); //URL编码（对中文进行编码便于存储至cookie） str_date = URLEncoder.encode(str_date,&quot;utf-8&quot;); System.out.println(&quot;编码后：&quot;+str_date); cookie.setValue(str_date);//修改cookie的值 cookie.setMaxAge(60*60*24*30);//设置cookie有效期一个月 response.addCookie(cookie);//发送cookie到客户端 //响应操作 String value = cookie.getValue(); System.out.println(&quot;解码前： &quot;+ value); value = URLDecoder.decode(value,&quot;utf-8&quot;);//解码操作 System.out.println(&quot;解码后：&quot; + value); response.getWriter().write(&quot;欢迎回来！您上次访问时间为：&quot; + value); break; &amp;#125; &amp;#125; &amp;#125; if (cookies!=null || cookies.length&gt;0 || flag ==false)&amp;#123; Date date = new Date();//获取当前时间 //设置日期格式 SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); String str_date = sdf.format(date);//对日期进行格式化 System.out.println(&quot;编码前：&quot;+str_date); //URL编码（对中文进行编码便于存储至cookie） str_date = URLEncoder.encode(str_date,&quot;utf-8&quot;); System.out.println(&quot;编码后：&quot;+str_date); Cookie cookie = new Cookie(&quot;lastTime&quot;,str_date);//创建名为lastTime值为当前时间的cookie cookie.setMaxAge(60*60*24*30);//设置cookie有效期一个月 response.addCookie(cookie);//发送cookie到客户端 //响应 response.getWriter().write(&quot;欢迎您首次访问！&quot;); &amp;#125; &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request, response); &amp;#125; &amp;#125; 共享Cookie同一服务器下共享： setPath(String path)设置cookie的获取范围。 默认情况下，设置当前的虚拟目录如果要共享，则可将path设置为”/“ 同一域名下共享： setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享 Session服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession Session的实现依赖于Cookie session的特点 session用于存储一次会话的多次请求的数据，存在服务器端 session可以存储任意类型，任意大小的数据 session与Cookie的区别： session存储数据在服务器端，Cookie在客户端 session没有数据大小限制，Cookie有 session数据安全，Cookie相对于不安全 方法： 获取HttpSession对象 HttpSession session = request.getSession(); 使用HttpSession对象 Object getAttribute(String name) void setAttribute(String name, Object value)void removeAttribute(String name) //在一次会话的多次请求间共享数据 @WebServlet(&quot;/SessionDemo1&quot;) public class SessionDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; HttpSession session = request.getSession();//获取Session对象 session.setAttribute(&quot;msg&quot;,&quot;Hello Session!&quot;);//设置Session &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request, response); &amp;#125; &amp;#125; @WebServlet(&quot;/SessionDemo2&quot;) public class SessionDemo2 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; HttpSession session = request.getSession();//获取Session对象 Object msg =session.getAttribute(&quot;msg&quot;);//获取键为msg的值 System.out.println(msg); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request, response); &amp;#125; &amp;#125; 当客户端关闭后，服务器不关闭，再次获取得的Session与之前的Session不是同一个 如何在关闭客户端或服务端的前提下，保存Session数据呢？ 创建Cookie,键为JSESSIONID，并存入Session id。 @WebServlet(&quot;/SessionDemo2&quot;) public class SessionDemo2 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; HttpSession session = request.getSession();//获取Session对象 Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,session.getId()); cookie.setMaxAge(60*60); response.addCookie(cookie); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request, response); &amp;#125; &amp;#125; 客户端不关闭，服务器关闭后，两次获取的session不是同一个，且数据不丢失。 tomcat自动完成以下工作： session的钝化： 在服务器正常关闭之前，将session对象系列化到硬盘上（保存临时文件至Work目录） session的活化： 在服务器启动后，将session文件转化为内存中的session对象即可。 在idea里的web项目，在重启Tomcat后会删除保存临时文件的Work目录，再新建Work目录从而无法完成活化。","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://main2035.github.io/categories/JavaWeb/"}],"tags":[{"name":"Cookie","slug":"Cookie","permalink":"https://main2035.github.io/tags/Cookie/"},{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/tags/Java/"},{"name":"Session","slug":"Session","permalink":"https://main2035.github.io/tags/Session/"}]},{"title":"request对象","slug":"TomCat-01","date":"2020-10-16T14:49:11.620Z","updated":"2020-10-08T03:49:41.595Z","comments":true,"path":"2020/10/16/TomCat-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/TomCat-01/","excerpt":"","text":"request对象和response对象的原理: request和response对象是由服务器创建的。我们来使用它们 request对象是来获取请求消息，response对象是来设置响应消息 获取请求行信息@WebServlet(&quot;/requestDemo&quot;)//注解添加虚拟访问路径 public class requestDemo extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; String method = request.getMethod();//获取请求方法 String contextPath = request.getContextPath();//获取虚拟目录 String servletPath = request.getServletPath();//获取servlet路径 String queryString = request.getQueryString();//获取请求参数 String requestURI = request.getRequestURI();//获取url String protocol = request.getProtocol();//获取访问协议信息 String remoteAddr = request.getRemoteAddr();//获取客户端ip System.out.println(method); System.out.println(contextPath); System.out.println(servletPath); System.out.println(queryString); System.out.println(requestURI); System.out.println(protocol); System.out.println(remoteAddr); &amp;#125; /*运行结果： GET /demo1 /requestDemo null 0:0:0:0:0:0:0:1 /demo1/requestDemo HTTP/1.1 */ &amp;#125; 获取请求头信息 String getHeader(String name)通过请求头的名称获取请求头 Enumeration&lt;String&gt; getHeaderNames()获取所有的请求头名称 @WebServlet(&quot;/requestDemo2&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; //获取请求头 Enumeration&lt;String&gt; headerNames = request.getHeaderNames();//获取全部请求头名称 while (headerNames.hasMoreElements()) &amp;#123; String name = headerNames.nextElement();//这个方法像迭代器的next()一样 String value = request.getHeader(name);//根据请求头名称获取值 System.out.println(name+&quot;-----&quot;+value); &amp;#125; &amp;#125; &amp;#125; 请求头例子：（判断客户端，设置防盗链等）@WebServlet(&quot;/requestDemo2&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; //防盗链例子： String referer = request.getHeader(&quot;referer&quot;); System.out.println(referer); if (referer!=null)&amp;#123; if (referer.contains(&quot;/demo&quot;))&amp;#123; response.setContentType(&quot;text/html;charset=utf-8&quot;); response.getWriter().write(&quot;播放电影....&quot;); &amp;#125;else &amp;#123; response.setContentType(&quot;text/html;charset=utf-8&quot;); response.getWriter().write(&quot;想看电影吗？来优酷吧...&quot;); &amp;#125; &amp;#125; //判断客户端 // String agent = request.getHeader(&quot;user-agent&quot;); // if (agent.contains(&quot;Chrome&quot;)) System.out.println(&quot;谷歌浏览器~~~&quot;);//判断客户端是否为谷歌浏览器 &amp;#125; &amp;#125; 获取请求体信息POST请求方式才有请求体，请求体中封装了POST请求参数。 BufferedReader getReader()获取字符输入流，只能操作字符数据 ServletInputStream getInputStream()获取字节输入流，可以操作所有类型数据 @WebServlet(&quot;/requestDemo2&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; &amp;#125; //以字节流形式读取请求信息 BufferedReader br = request.getReader();//获取字节流 String line = null; while ((line = br.readLine())!=null)&amp;#123;//读取 System.out.println(line); POST方式乱码问题GET方式的乱码已由Tomcat解决，仅有POST方式存在乱码 @WebServlet(&quot;/requestDemo2&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; request.setCharacterEncoding(&quot;utf-8&quot;);//设置流编码，指定名称获取值是通过流的形式进行的，故会存在编码问题。 String username = request.getParameter(&quot;username&quot;);//获取指定名称参数值 Map&lt;String ,String[]&gt; parameterMap = request.getParameterMap();//获取所有参数并装入map集合 Set&lt;String&gt; keyset = parameterMap.keySet();//将值存入视图进行遍历准备 for (String s : keyset) &amp;#123; String[] values = parameterMap.get(s); for (String value:values)&amp;#123; System.out.println(value); &amp;#125; &amp;#125; System.out.println(username); &amp;#125; 转发转发是指在服务器内部资源间跳转； 即使跳转到多个资源也仅仅是在一个请求的范围内； 跳转时地址栏地址不变。 @WebServlet(&quot;/requestDemo&quot;) public class requestDemo extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; //转发 request.getRequestDispatcher(&quot;/requestDemo1&quot;).forward(request,response); //getRequestDispatcher(&quot;/requestDemo1&quot;)获取转发对象 //forward(request,response)进行转发操作 System.out.println(&quot;requestDemo被访问&quot;); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request,response); //因为访问页面默认为GET访问，提交表单多为POST访问; //所以此处需调用doPost方法并传入参数 &amp;#125; &amp;#125; @WebServlet(&quot;/requestDemo1&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; System.out.println(&quot;requestDemo1被访问&quot;); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request,response); &amp;#125; &amp;#125; 共享数据 void setAttribute(String name,Object obj):存储数据 Object getAttitude(String name):通过键获取值 void removeAttribute(String name):通过键移除键值对 @WebServlet(&quot;/requestDemo1&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; Object hello = request.getAttribute(&quot;hello&quot;);//通过键糊获取值 System.out.println(hello); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request,response); &amp;#125; &amp;#125; @WebServlet(&quot;/requestDemo1&quot;) public class requestDemo1 extends HttpServlet &amp;#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; request.setAttribute(&quot;hello&quot;,&quot;hello world!&quot;);//存储数据(键值) request.getRequestDispatcher(&quot;/requestDemo1&quot;).forward(request,response); &amp;#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123; this.doPost(request,response); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://main2035.github.io/tags/Tomcat/"}]},{"title":"Thread与Runable","slug":"thread-05","date":"2020-10-16T14:49:11.618Z","updated":"2020-09-22T11:52:46.715Z","comments":true,"path":"2020/10/16/thread-05/","link":"","permalink":"https://main2035.github.io/2020/10/16/thread-05/","excerpt":"","text":"import java.io.*; import java.lang.Thread; /** * 多个线程加载同一个Runnable可实现共享数据*/ class MyThread extends Thread&amp;#123; public int x = 0; public void run()&amp;#123; System.out.println(++x); &amp;#125; &amp;#125; class RThread implements Runnable&amp;#123; private int x = 0; public void run()&amp;#123; System.out.println(++x); &amp;#125; &amp;#125; public class Java_3 &amp;#123; public static void main(String[] args) throws Exception&amp;#123; for(int i=0;i&lt;5;i++)&amp;#123; Thread t = new MyThread(); t.start(); &amp;#125; Thread.sleep(1000); System.out.println(); RThread r = new RThread(); for(int i=0;i&lt;5;i++)&amp;#123; Thread t = new Thread(r);//多个线程同时加载一个Runnable t.start(); &amp;#125; &amp;#125; &amp;#125; /**运行结果： 1 1 1 1 1 1 2 3 4 5 */","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java多线程编程","slug":"Java多线程编程","permalink":"https://main2035.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"}]},{"title":"线程加载与线程组","slug":"thread-04","date":"2020-10-16T14:49:11.617Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/thread-04/","link":"","permalink":"https://main2035.github.io/2020/10/16/thread-04/","excerpt":"","text":"饿汉模式(立即加载) 使用类时已创建对象 package cn.day.b8; public class MyObject &amp;#123; private static MyObject myObject = new MyObject();//使用类时已创建对象 public static MyObject getInstance()&amp;#123; return myObject; &amp;#125; &amp;#125; class Thread1 extends Thread &amp;#123; @Override public void run()&amp;#123; System.out.println(MyObject.getInstance().hashCode()); &amp;#125; &amp;#125; class Run&amp;#123; public static void main(String[] args) &amp;#123; var t1 = new Thread1(); var t2 = new Thread1(); var t3 = new Thread1(); t1.start(); t2.start(); t3.start(); &amp;#125; &amp;#125; 懒汉模式（延迟加载） 在属性方法（get方法）中实例化对象 双检查锁实现懒汉单例模式 package cn.day.b8; public class MyObject &amp;#123; private volatile static MyObject myObject ;// volatile增加了可见性，阻止了创建MyObject时的代码重排 public static MyObject getInstance()&amp;#123; try &amp;#123; if (myObject != null)&amp;#123; &amp;#125;else &amp;#123; Thread.sleep(3000); synchronized (MyObject.class)&amp;#123; if (myObject == null)&amp;#123; myObject = new MyObject(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; return myObject; &amp;#125; &amp;#125; class Thread1 extends Thread &amp;#123; @Override public void run()&amp;#123; System.out.println(MyObject.getInstance().hashCode()); &amp;#125; &amp;#125; class Run&amp;#123; public static void main(String[] args) &amp;#123; var t1 = new Thread1(); var t2 = new Thread1(); var t3 = new Thread1(); t1.start(); t2.start(); t3.start(); &amp;#125; &amp;#125; 静态内部类实现懒汉模式 package cn.day.b8; public class MyObject &amp;#123; /*静态代码块实现懒汉模式 private static MyObject myObject = null; static&amp;#123; myObject = new MyObject(); &amp;#125; */ private static class MyObjectHandler &amp;#123; private volatile static MyObject myObject = new MyObject(); &amp;#125; public static MyObject getInstance() &amp;#123; return MyObjectHandler.myObject; &amp;#125; &amp;#125; class Thread1 extends Thread &amp;#123; @Override public void run()&amp;#123; System.out.println(MyObject.getInstance().hashCode()); &amp;#125; &amp;#125; class Run&amp;#123; public static void main(String[] args) &amp;#123; var t1 = new Thread1(); var t2 = new Thread1(); var t3 = new Thread1(); t1.start(); t2.start(); t3.start(); &amp;#125; &amp;#125; 线程组 一级关联：组中有线程而无线程下的线程 package cn.day.b8; public class MyThread &amp;#123; public static void main(String[] args) &amp;#123; ThreadA aRunnable = new ThreadA(); ThreadB bRunnable = new ThreadB(); ThreadGroup group = new ThreadGroup(&quot;一级关联组&quot;);//构造一个新线程组。 Thread aThread = new Thread(group,aRunnable);//加入线程组 Thread bThread = new Thread(group,bRunnable); aThread.start(); bThread.start(); System.out.println(&quot;线组中线程程数 &quot;+ group.activeCount());//返回该线程组及其子组的数量的估计值 System.out.println(&quot;线程组名 &quot;+ group.getName());//返回该线程组的名称 Thread.sleep(3000); group.interrupt();//停止此线程组中所有线程 Thread.enumerate(group);//将当前线程的线程组整体复制到指定线程组 &amp;#125; &amp;#125; class ThreadA extends Thread&amp;#123; @Override public void run()&amp;#123; try &amp;#123; while (!Thread.currentThread().isInterrupted())&amp;#123; System.out.println(&quot;ThreadName &quot;+ Thread.currentThread().getName()); Thread.sleep(3000); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class ThreadB extends Thread&amp;#123; @Override public void run()&amp;#123; try &amp;#123; while (!Thread.currentThread().isInterrupted())&amp;#123; System.out.println(&quot;ThreadName &quot;+ Thread.currentThread().getName()); Thread.sleep(3000); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java多线程编程","slug":"Java多线程编程","permalink":"https://main2035.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"}]},{"title":"Lock对象","slug":"thread-03","date":"2020-10-16T14:49:11.616Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/thread-03/","link":"","permalink":"https://main2035.github.io/2020/10/16/thread-03/","excerpt":"","text":"ReentrantLockTestjdk5加入的，synchronized增强版 lock( ) unlock( ) condition.await( ) **condition.signal( )**等 lock( )**获取锁，unlock**释放锁（同步代码处在lock、unlock之间） condition.await( )**效果同wait( )**,调用此方法前，该线程必须获得锁 condition.signal( ),唤醒线程，效果同notify（）。 condition.signalAll( )**，唤醒所有线程（倒序）效果同notifyAll（）** package cn.day.b7; import cn.day.b6.MyThread; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.ReentrantLock; /*3个线程同步知晓，均不打印B*/ public class MyService &amp;#123; private ReentrantLock lock = new ReentrantLock();//创建此对象用于获取锁、释放锁等操作 //new ReentrantLock(true);当设置为 true 时，在多个线程的争用下，这些锁倾向于将访问权授予等待时间最长的线程。//未定时的 tryLock 方法并没有使用公平设置。 private Condition condition = lock.newCondition();//用以使线程等待、唤醒等操作 public void waitMethod()&amp;#123; try &amp;#123; lock.lock(); System.out.println(&quot;A&quot;); condition.await();//等待唤醒 System.out.println(&quot;B&quot;); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125;finally &amp;#123; lock.unlock(); System.out.println(&quot;释放锁&quot;); &amp;#125; &amp;#125; &amp;#125; class MyThreadA extends Thread&amp;#123; private MyService myService; public MyThreadA(MyService myService)&amp;#123; super(); this.myService = myService; &amp;#125; @Override public void run()&amp;#123; myService.waitMethod(); &amp;#125; &amp;#125; class TestMyService &amp;#123; public static void main(String[] args) &amp;#123; MyService myService = new MyService(); MyThreadA a1 = new MyThreadA(myService); a1.start(); MyThreadA a2 = new MyThreadA(myService); a2.start(); MyThreadA a3 = new MyThreadA(myService); a3.start(); &amp;#125; &amp;#125; 唤醒部分线程package cn.day.b7; import cn.day.b6.MyThread; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.ReentrantLock; public class MyService &amp;#123; private ReentrantLock lock = new ReentrantLock(); /*创建两个Condition对象，分别用来唤醒A、B线程*/ private Condition conditionA = lock.newCondition(); private Condition conditionB = lock.newCondition(); public void awaitA()&amp;#123; try &amp;#123; lock.lock(); System.out.println(&quot;A&quot;); conditionA.await();//等待唤醒 System.out.println(&quot;A被唤醒&quot;); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125;finally &amp;#123; lock.unlock(); System.out.println(&quot;释放锁&quot;); &amp;#125; &amp;#125; public void awaitB()&amp;#123; try &amp;#123; lock.lock(); System.out.println(&quot;B&quot;); conditionB.await();//等待唤醒 System.out.println(&quot;B被唤醒&quot;); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125;finally &amp;#123; lock.unlock(); System.out.println(&quot;释放锁&quot;); &amp;#125; &amp;#125; public void signalAll_B()&amp;#123; lock.lock(); System.out.println(&quot;唤醒B线程&quot;); conditionB.signalAll();//仅唤醒全部B种线程（相同锁） lock.unlock(); &amp;#125; public void signalAll_A()&amp;#123; lock.lock(); System.out.println(&quot;唤醒A线程&quot;);////仅唤醒全部A种线程（相同锁） conditionA.signalAll(); lock.unlock(); &amp;#125; &amp;#125; class MyThreadA extends Thread&amp;#123; private MyService myService; public MyThreadA(MyService myService)&amp;#123; super(); this.myService = myService; &amp;#125; @Override public void run()&amp;#123; myService.awaitA(); &amp;#125; &amp;#125; class MyThreadB extends Thread&amp;#123; private MyService myService; public MyThreadB(MyService myService)&amp;#123; super(); this.myService = myService; &amp;#125; @Override public void run()&amp;#123; myService.awaitB(); &amp;#125; &amp;#125; class TestMyService &amp;#123; public static void main(String[] args) throws InterruptedException &amp;#123; MyService myService = new MyService(); MyThreadA a1 = new MyThreadA(myService); MyThreadA a2 = new MyThreadA(myService); MyThreadB b1 = new MyThreadB(myService); a1.setName(&quot;A1&quot;); a2.setName(&quot;A2&quot;); b1.setName(&quot;B&quot;); a1.start(); a2.start(); b1.start(); System.out.println(&quot;等待3s&quot;); Thread.sleep(3000); myService.signalAll_A();//仅唤醒A种线程 &amp;#125; &amp;#125; 生产者、消费者1V1(生产、消费一对一)、多对多5V5 package cn.day.b7.ConditionTest; import cn.day.b6.MyThread; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.ReentrantLock; public class MyService &amp;#123; private ReentrantLock lock = new ReentrantLock(); private Condition condition = lock.newCondition(); private boolean hasValue = false; public void set()&amp;#123; try &amp;#123; lock.lock(); if (hasValue == true) &amp;#123; condition.await(); &amp;#125; System.out.println(&quot;生产者&quot;); hasValue = true; condition.signalAll(); &amp;#125;catch (InterruptedException e)&amp;#123; e.printStackTrace(); &amp;#125;finally &amp;#123; lock.unlock(); &amp;#125; &amp;#125; public void get()&amp;#123; try &amp;#123; lock.lock(); if (hasValue == false) &amp;#123; condition.await(); &amp;#125; System.out.println(&quot;消费者&quot;); hasValue = false; condition.signalAll(); &amp;#125;catch (InterruptedException e)&amp;#123; e.printStackTrace(); &amp;#125;finally &amp;#123; lock.unlock(); &amp;#125; &amp;#125; &amp;#125; class MyThreadA extends Thread&amp;#123; private MyService myService; public MyThreadA(MyService myService)&amp;#123; super(); this.myService = myService; &amp;#125; @Override public void run()&amp;#123; for (int i =0; i &lt; Integer.MAX_VALUE;i++)&amp;#123; myService.set(); &amp;#125; &amp;#125; &amp;#125; class MyThreadB extends Thread&amp;#123; private MyService myService; public MyThreadB(MyService myService)&amp;#123; super(); this.myService = myService; &amp;#125; @Override public void run()&amp;#123; for (int i =0; i &lt; Integer.MAX_VALUE;i++)&amp;#123;//Integer.MAX_VALUE常量的最大值 myService.get(); &amp;#125; &amp;#125; &amp;#125; class Run&amp;#123; public static void main(String[] args) &amp;#123; MyService myService = new MyService(); MyThreadA a = new MyThreadA(myService); a.start(); MyThreadB b = new MyThreadB(myService); b.start(); &amp;#125; &amp;#125; /*多对多*/ class Run1&amp;#123; public static void main(String[] args) &amp;#123; MyService Service = new MyService(); MyThreadA[] threadA = new MyThreadA[5]; MyThreadB[] threadB = new MyThreadB[5]; for (int i = 0; i &lt; 5; i++)&amp;#123; threadA[i] = new MyThreadA(Service); threadB[i] = new MyThreadB(Service); threadA[i].start(); threadB[i].start(); &amp;#125; &amp;#125; &amp;#125; ReentrantReadWriteLock 共享锁（只读） 共享锁使只读的线程可异步执行；与写操作的线程同步执行 public class MyService &amp;#123; private ReentrantLock lock = new ReentrantReadWriteLock();//共享、排他锁 private String name = &quot;张三&quot; public void get()&amp;#123; try &amp;#123; lock.readlock();//共享锁（异步，只读） System.out.println(name); Thread.sleep(4000); lock.readLock().unlock();//释放共享锁 &amp;#125;catch (InterruptedException e)&amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; 排他锁（写） 与其它锁同步执行 public class MyService &amp;#123; private ReentrantLock lock = new ReentrantReadWriteLock();//共享、排他锁 private String name = &quot;张三&quot; public void set(String name)&amp;#123; try &amp;#123; lock.writelock();//排他锁（同步，只写） System.out.println(name); this.name = name; Thread.sleep(4000); lock.writeLock().unlock();//释放排他锁 &amp;#125;catch (InterruptedException e)&amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; 定时器一个定时任务实例package cn.day.b8; import java.util.Date; import java.util.Timer; import java.util.TimerTask; public class MyTask extends TimerTask &amp;#123;//注意其父类哦 @Override public void run() &amp;#123; System.out.println(&quot;start Time：&quot; + System.currentTimeMillis()); &amp;#125; &amp;#125; class Test&amp;#123; public static void main(String[] args) throws InterruptedException &amp;#123; long nowTime = System.currentTimeMillis(); System.out.println(&quot;当前时间为： &quot;+ nowTime ); long scheduleTime = (nowTime +10000); System.out.println(&quot;计划时间为： &quot;+ scheduleTime); MyTask task = new MyTask(); Timer timer = new Timer();//创建一个新计时器 Thread.sleep(1000); timer.schedule(task,new Date(scheduleTime)); //在指定的时间执行任务，如指定时间早于当前时间则立即执行任务 Thread.sleep(Integer.MAX_VALUE); &amp;#125; &amp;#125; 创建一个Timer对象时，内部就创建了一个新线程（TimerTread） TimerTread线程管理一个队列，队列按顺序执行Task任务 定时任务可由于当前任务的复杂度而导致下个任务延期执行 执行多个定时任务实例 任务执行算法每次将最后一个任务放入队头（第一次仍保持原序列） /*省略代码同上*/ class DoubleTest&amp;#123; public static void main(String[] args) throws InterruptedException &amp;#123; long nowTime = System.currentTimeMillis(); System.out.println(&quot;当前时间为： &quot;+ nowTime ); long scheduleTime1 = (nowTime +5000); long scheduleTime2 = (nowTime +6000); System.out.println(&quot;A计划时间为： &quot;+ scheduleTime1); System.out.println(&quot;B计划时间为： &quot;+ scheduleTime2); MyTask task1 = new MyTask(); MyTask task2 = new MyTask(); Timer timer = new Timer();//只用一个新计时器 timer.schedule(task1,new Date(scheduleTime1)); timer.schedule(task2,new Date(scheduleTime2)); &amp;#125; &amp;#125; 定时间隔执行任务 任务间隔也会因当前任务的复杂度而延期执行，也会因为任务中的Thread.sleep( 50000)而改变任务执行的间隔时间 class Test&amp;#123; public static void main(String[] args) throws InterruptedException &amp;#123; long nowTime = System.currentTimeMillis(); System.out.println(&quot;当前时间为： &quot;+ nowTime ); long scheduleTime = (nowTime +10000); System.out.println(&quot;计划时间为： &quot;+ scheduleTime); MyTask task = new MyTask(); Timer timer = new Timer(); timer.schedule(task,new Date(scheduleTime),4000); //在指定时间执行任务（计划时间早于当前时间则立刻执行），且每间隔4s再次执行任务 //timer.schedule(task,4000)则是延迟4s执行 //timer.schedule(task,4000，2000)则是延迟4s执行并间隔2s无限执行此任务 &amp;#125; &amp;#125; 移除TimerTread线程队列任务 定时任务执行完毕后，进程也不会被销毁 TimerTask.cancel 移除当前任务 Timer.cancel 移除全部任务 package cn.day.b8; import java.util.Date; import java.util.Timer; import java.util.TimerTask; public class MyTask1 extends TimerTask &amp;#123; @Override public void run() &amp;#123; System.out.println(&quot;A run Timer &quot;+ System.currentTimeMillis()); this.cancel();//将此任务移除TimerTread线程队列（不会中断本次任务） System.out.println(&quot;A任务移除&quot;); &amp;#125; &amp;#125; class MyTask2 extends TimerTask &amp;#123; @Override public void run() &amp;#123; System.out.println(&quot;B run Timer &quot;+ System.currentTimeMillis()); &amp;#125; &amp;#125; class Test&amp;#123; public static void main(String[] args) throws InterruptedException &amp;#123; long nowTime = System.currentTimeMillis(); System.out.println(&quot;当前时间为： &quot;+ nowTime ); MyTask1 task1 = new MyTask1(); MyTask2 task2 = new MyTask2(); Timer timer = new Timer(); timer.schedule(task1,new Date(nowTime),2000); timer.schedule(task2,new Date(nowTime),2000); Thread.sleep(5000); /*如 timer.cancel();前有死循环，则无法执行到 timer.cancel();这行； timer.cancel()将无法获得队列锁，更无法移除队列中任务 while(true)&amp;#123; int i ++; &amp;#125;*/ timer.cancel();//移除TimerTread线程队列中所有任务 &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java多线程编程","slug":"Java多线程编程","permalink":"https://main2035.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"}]},{"title":"线程安全与通信","slug":"thread-02","date":"2020-10-16T14:49:11.614Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/thread-02/","link":"","permalink":"https://main2035.github.io/2020/10/16/thread-02/","excerpt":"","text":"线程优先级 线程优先级具有可继承性 cpu将资源让与优先级更高的线程（运行更快） 随机性：并不是执行完高优先级线程再执行低优先级线程，只是说首先执行高优先级线程的概率更大一点 可使用**setPriority( )**设置优先级（范围：0-10） Jdk预设了3个优先级值： MIN_PRIORITY = 1 NORM_PRIORITY = 5 MAX_PRIORITY = 10 守护线程 Java中存在用户线程、守护线程两种线程 守护线程为其它线程运行提供便利，如GC 最后一个用户线程、守护线程退出，进程也就结束了（只要有一个用户进程在运行，那么这个进程就不会结束） package cn.day.b4; public class MyThread2 extends Thread &amp;#123; private int i = 1; @Override public void run()&amp;#123; try &amp;#123; while (true)&amp;#123;//死循环 System.out.println(&quot;i&quot; + (i)); Thread.sleep(1000); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; try &amp;#123; var thread = new MyThread2(); thread.setDaemon(false);//这是个用户线程，此进程将不停的执行下去 // thread.setDaemon(false);这是个守护线程，它将随着用户进程（main）的结束而结束 //setDaemon() 将线程标记为守护线程(true)或用户线程(false)。 thread.start(); Thread.sleep(5000); System.out.println(&quot;end&quot;); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; 对象、变量的并发访问：A线程获得了X对象的锁，此时B线程只能调用X对象中没有synchronized标记的方法 线程安全 方法中的变量不受线程安全影响，而实例字段（变量）将受到非线程安全的影响 当多个线程执行同一个业务对象中的方法时，线程与业务属于多对以一的关系，会产生非线程安全问题 可使用synchronized关键词实现同步执行。 可分别创建两个对象实例（线程与对象方法就是一对一啦），实现异步执行。 在方法声明处添加synchronized是锁对象而非锁方法（Java没有锁方法一说） Java中，锁 就是对象， 对象可以映射为锁。线程拿到锁就可以执行对象中的synchronized同步方法 线程发生异常时将释放对象锁 脏读 比如：在main主线程中，一个其它线程正在执行( 原想在结束后main线程再调用某个方法（属性）)，结果main在未结束的线程前调用了（属性）方法，产生了不理想的结果，这就是导致脏读。 解决方法：对该（属性）方法使用synchronized上锁。 可重入锁 已知线程获取了某个对象锁，则其在线程未结束（对象锁未释放）前仍可获取该对象锁（） package cn.day.b5; public class Service &amp;#123; synchronized public void service1()&amp;#123; System.out.println(&quot;service1&quot;); service2(); &amp;#125; synchronized public void service2()&amp;#123; System.out.println(&quot;service2&quot;); service3(); &amp;#125; synchronized public void service3()&amp;#123; System.out.println(&quot;service3&quot;); &amp;#125; public static void main(String[] args) &amp;#123; var t = new MyThread(); t.start();//在此线程运行时：service1可调用上锁的service2，service2可调用上锁的service3，而不会被线程t2干扰 var t2 = new MyThread1(); t2.start(); &amp;#125; &amp;#125; class MyThread extends Thread&amp;#123; @Override public void run()&amp;#123; Service service = new Service(); service.service1(); &amp;#125; &amp;#125; class MyThread1 extends Thread&amp;#123; @Override public void run()&amp;#123; Service service = new Service(); service.service2(); &amp;#125; &amp;#125; 继承状态下，线程还可重入调用父类的（同步）方法 holdsLock（） 对象持有锁时返回True package cn.day.b5; public class Test &amp;#123; public static void main(String[] args) &amp;#123; System.out.println(&quot;A &quot;+Thread.currentThread().holdsLock(Test.class)); synchronized (Test.class)&amp;#123;//synchronized块 System.out.println(&quot;B &quot;+Thread.currentThread().holdsLock(Test.class)); &amp;#125; &amp;#125; &amp;#125; 同步代码块 当某个对象的synchronized代码块（this）被某个线程访问时，其它线程将被阻塞，并且不能访问该对象的其它同步代码块 synchronized代码块（）内写入一个类的Class对象，那么这个锁对所有该类实例有效 使用同步代码块时：一般不使用String作为对象锁如，而使用Object。 package cn.day.b5; public class String1 &amp;#123; public static void print(String t)&amp;#123; try &amp;#123; synchronized (t)&amp;#123;//锁的是变量T的值 while (true)&amp;#123; System.out.println(Thread.currentThread().getName()); Thread.sleep(1000);//两个线程传入相同的String值会导致一个线程休眠时另一个线程仍无法执行 &amp;#125; &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var string1 = new String1(); var a = new Thread1(string1); a.setName(&quot;A&quot;); a.start(); var b = new Thread2(string1); b.setName(&quot;B&quot;); b.start(); &amp;#125; &amp;#125; class Thread1 extends Thread&amp;#123; private String1 string1; public Thread1(String1 string1)&amp;#123; super(); this.string1 =string1; &amp;#125; @Override public void run()&amp;#123; string1.print(&quot;AA&quot;); &amp;#125; &amp;#125; class Thread2 extends Thread&amp;#123; private String1 string2; public Thread2(String1 string1)&amp;#123; super(); this.string2 =string1; &amp;#125; @Override public void run()&amp;#123; string2.print(&quot;AA&quot;);//两个线程传入相同的String值会导致一个线程休眠时另一个线程仍无法执行 &amp;#125; &amp;#125; 锁对象 锁对象改变则异步执行，否则依旧同步执行(只要锁对象相同就同步执行 ) package cn.day.b5; public class String2 &amp;#123; private String lock = &quot;123&quot;; public void testMethod()&amp;#123; try &amp;#123; synchronized (lock)&amp;#123; System.out.println(Thread.currentThread().getName()+&quot;begin &quot;+System.currentTimeMillis()); lock =&quot;456&quot;;//改变锁对象 Thread.sleep(2000); System.out.println(Thread.currentThread().getName() + &quot;end &quot;+ System.currentTimeMillis()); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; public static void main(String[] args) throws InterruptedException &amp;#123; var string2 = new String2(); Thread1 a = new Thread1(string2); a.setName(&quot;A&quot;); Thread2 b = new Thread2(string2); a.setName(&quot;B&quot;); a.start(); Thread.sleep(50); b.start(); &amp;#125; &amp;#125; class Thread1 extends Thread&amp;#123; private String2 string1; public Thread1(String2 string1)&amp;#123; super(); this.string1 =string1; &amp;#125; @Override public void run()&amp;#123; string1.testMethod(); &amp;#125; &amp;#125; class Thread2 extends Thread&amp;#123; private String2 string2; public Thread2(String2 string1)&amp;#123; super(); this.string2 =string1; &amp;#125; @Override public void run()&amp;#123; string2.testMethod(); &amp;#125;&amp;#125; 静态方法的锁 synchronized加到静态方法是将Class类对象作为锁（而synchronized加到非静态是将方法所在类的对象作为锁） 如果A类中方法都是静态方法且加锁，那么即使创建两个A类实例对象仍无法实现异步。（静态方法可直接导入类再调用:A.方法名;实现异步） volatile（synchronized也可） 让B线程立刻看见A线程更改的数据 禁止代码重排序 线程通信wait/notify 解决资源浪费 package cn.day.b6; import java.util.ArrayList; import java.util.List; /**线程 Thread2 （B）一直监视list.size造成了资源浪费*/ public class MyList &amp;#123; volatile private List list = new ArrayList();//实现多线程之间的可视性，不然线程B将一直执行 public void add()&amp;#123; list.add(&quot;1&quot;); &amp;#125; public int size()&amp;#123; return list.size(); &amp;#125; public static void main(String[] args) &amp;#123; var service = new MyList(); var a = new Thread1(service); a.setName(&quot;A&quot;); a.start(); var b = new Thread2(service); b.setName(&quot;B&quot;); b.start(); &amp;#125; &amp;#125; class Thread1 extends Thread&amp;#123; private MyList list; public Thread1 (MyList list)&amp;#123; super(); this.list = list; &amp;#125; @Override public void run()&amp;#123; try&amp;#123; for (int i = 0; i &lt; 10; i++)&amp;#123; list.add(); System.out.println(&quot;添加了&quot;+(i + 1)+&quot;个元素&quot;); Thread.sleep(1000); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125;class Thread2 extends Thread&amp;#123; private MyList list; public Thread2 (MyList list)&amp;#123; super(); this.list = list; &amp;#125; @Override public void run()&amp;#123; try&amp;#123; while (true)&amp;#123; //Thread.sleep(2000);//B线程将因错过list.size==5而不会终止。 if (list.size()==5)&amp;#123; System.out.println(&quot;==5了，b线程退出&quot;); throw new InterruptedException(); &amp;#125; &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; wait( ) 暂停当前线程并等待被唤醒 wait(1000 ) ,在1s后如无**notify( )**唤醒，则自动唤醒（持有锁后继续执行） package cn.day.b6; public class Thread_A extends Thread &amp;#123; private Object lock; public Thread_A(Object lock)&amp;#123; super(); this.lock = lock; &amp;#125; @Override public void run()&amp;#123; try &amp;#123; synchronized (lock)&amp;#123; System.out.println(&quot;我跳出来了&quot;); lock.wait(1000); System.out.println(&quot;打我啊笨蛋&quot;); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class Thread_B extends Thread &amp;#123; private Object lock; public Thread_B(Object lock)&amp;#123; super(); this.lock = lock; &amp;#125; @Override public void run()&amp;#123; synchronized (lock)&amp;#123; while (true)&amp;#123;//B线程执行完毕后，A线程自动唤醒 System.out.println(&quot;停不下来&quot;); try &amp;#123; Thread.sleep(1000); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; &amp;#125; class TestRun&amp;#123; public static void main(String[] args) &amp;#123; Object lock = new Object(); var t1 = new Thread_A(lock); var t2 = new Thread_B(lock); t1.start(); t2.start(); &amp;#125; &amp;#125; ## **notify( )** * 执行完当前同步代码块内代码后，选择同一个（唤醒多个需要多次调用）锁的等待线程**wait( )**将其唤醒（按照执行wait的顺序） ## notifyAll( ) * （倒序）唤醒全部等待线程**wait( )** ```java package cn.day.b6; public class Thread_A extends Thread &amp;#123; private Object lock; public Thread_A(Object lock)&amp;#123; super(); this.lock = lock; &amp;#125; @Override public void run()&amp;#123; try &amp;#123; synchronized (lock)&amp;#123; System.out.println(&quot;Start wait time= &quot;+System.currentTimeMillis()); lock.wait();//暂停并等待被唤醒 System.out.println(&quot;End wait time= &quot;+System.currentTimeMillis()); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class Thread_B extends Thread &amp;#123; private Object lock; public Thread_B(Object lock)&amp;#123; super(); this.lock = lock; &amp;#125; @Override public void run()&amp;#123; synchronized (lock)&amp;#123; System.out.println(&quot;Start notify time= &quot;+System.currentTimeMillis()); // lock.notify();//选择同一个锁的等待线程将其唤醒（按照执行wait的顺序，依次唤醒） lock.notifyAll()//同notify()，但按相反的顺序唤醒 System.out.println(&quot;End notify time= &quot;+System.currentTimeMillis()); &amp;#125; &amp;#125; &amp;#125; class TestRun&amp;#123; public static void main(String[] args) &amp;#123; try &amp;#123; Object lock = new Object();//同一个对象同一个梦想，哈哈 var t1 = new Thread_A(lock); t1.start(); Thread.sleep(3000); var t2 = new Thread_B(lock); t2.start(); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; 综合运用 共享变量+notifyAll( )+while+synchronized+volatile实现交叉执行 package cn.day.b6; public class MyThread &amp;#123; volatile private boolean prevIsA = false;//volatile，修改值时其它线程均可知晓 synchronized public void backupA()&amp;#123; try&amp;#123; while (prevIsA == true)&amp;#123;//全场依据PrevIsA的值判断该线程是否该休息（释放锁） wait(); &amp;#125; for (int i = 0;i &lt; 5;i++)&amp;#123; System.out.println(&quot;++++++&quot;); &amp;#125; prevIsA = true;//此线程主要步骤执行完后再修改prevIsA值 notifyAll(); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; synchronized public void backupB()&amp;#123; try&amp;#123; while (prevIsA == false) &amp;#123;////全场依据PrevIsA的值判断该线程是否该休息（释放锁） wait(); &amp;#125; for (int i = 0;i &lt; 5; i++)&amp;#123; System.out.println(&quot;------&quot;); &amp;#125; prevIsA = false;////全场依据PrevIsA的值判断该线程是否该休息（释放锁） notifyAll(); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class Thread1 extends Thread&amp;#123; private MyThread dbTools; public Thread1(MyThread dbTools)&amp;#123; super(); this.dbTools = dbTools; &amp;#125; @Override public void run()&amp;#123; dbTools.backupA(); &amp;#125; &amp;#125; class Thread2 extends Thread&amp;#123; private MyThread dbTools; public Thread2(MyThread dbTools)&amp;#123; super(); this.dbTools = dbTools; &amp;#125; @Override public void run()&amp;#123; dbTools.backupB(); &amp;#125; &amp;#125; class MyRun&amp;#123; public static void main(String[] args) &amp;#123; var dbtools = new MyThread(); for (int i = 0; i &lt; 20; i++)&amp;#123;//循环20波，100行 var output = new Thread2(dbtools); output.start(); var input = new Thread1(dbtools); input.start(); &amp;#125; &amp;#125; &amp;#125; join( ) 当前线程释放锁并进入无休止的等待状态，等其它线程结束再执行 join( 2000)，当前线程释放锁，2s后如获得锁，继续执行（无法获得锁，则一直尝试获得锁） ThreadLocal 将数据放于map中 Map中的key存储ThreadLocal对象，value存储值 每个线程的value仅对此线程可见 当线程销毁时，map也随之销毁，如map的数据没有被引用则随时未GC回收 package cn.day.b7; public class Tools &amp;#123; public static ThreadLocal t1 = new ThreadLocal(); &amp;#125; class MyThreadA extends Thread&amp;#123; @Override public void run()&amp;#123; try &amp;#123; for (int i = 0; i &lt; 10; i++)&amp;#123; Tools.t1.set(&quot;A&quot;+(i++)); System.out.println(&quot;A get &quot;+ Tools.t1.get()); int sleepValue = (int)(Math.random()*1000); Thread.sleep(sleepValue); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class MyThreadB extends Thread&amp;#123; @Override public void run()&amp;#123; try &amp;#123; for (int i = 0; i &lt; 10; i++)&amp;#123; Tools.t1.set(&quot;B&quot;+(i++)); System.out.println(&quot;B get &quot;+ Tools.t1.get()); int sleepValue = (int)(Math.random()*1000); Thread.sleep(sleepValue); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class Test&amp;#123; public static void main(String[] args) throws InterruptedException &amp;#123; var a = new MyThreadA(); var b = new MyThreadB(); a.start(); b.start(); for (int i = 0; i &lt; 10; i++)&amp;#123; Tools.t1.set(&quot;main&quot;+(i+1)); System.out.println(&quot;main get &quot;+ Tools.t1.get()); int sleepValue = (int)(Math.random()*1000); try &amp;#123; Thread.sleep(sleepValue); &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; 可通过重写initialValue( )方法，改变map中无值时get（）返回的数据（null） package cn.day.b7; public class ThreadLocalExt extends ThreadLocal &amp;#123; @Override protected Object initialValue()&amp;#123; return &quot;改变&quot;; &amp;#125; &amp;#125; class Run&amp;#123; public static ThreadLocalExt t1= new ThreadLocalExt(); public static void main(String[] args) &amp;#123; System.out.println(t1.get()); &amp;#125; &amp;#125; inheritableThreadLocal 从创建这个线程对象的线程继承map值(继承后并不随着map值的更新而更新) package cn.day.b7; public class TestInheritableThreadLocal extends Thread&amp;#123; public void run()&amp;#123; try &amp;#123; for (int i = 0; i&lt;10; i++)&amp;#123; System.out.println(&quot;在ThreadA线程中取值=&quot;+Tools1.t1.get()); Thread.sleep(100); &amp;#125; &amp;#125; catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; try &amp;#123; for (int i = 0; i &lt;10; i++)&amp;#123; if (Tools1.t1.get() == null)&amp;#123; Tools1.t1.set(&quot;此值是main&quot;); &amp;#125; System.out.println(&quot;在main线程中取值=&quot; + Tools1.t1.get()); Thread.sleep(100); &amp;#125; Thread.sleep(5000); var a = new TestInheritableThreadLocal(); a.start(); &amp;#125; catch (Exception e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; class Tools1&amp;#123; public static InheritableThreadLocal t1 = new InheritableThreadLocal(); &amp;#125; 重写childValue( )方法可对继承的值进行“加工”。","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java多线程编程","slug":"Java多线程编程","permalink":"https://main2035.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"}]},{"title":"线程方法","slug":"thread-01","date":"2020-10-16T14:49:11.613Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/thread-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/thread-01/","excerpt":"","text":"实现多线程必须继承Thread类，已有父类的类可通过实现Runnable实现多线程 Thread也实现了Runnable接口，Runnable接口实现的多线程步骤比Thread更为繁琐 线程安全共享变量 这是一个不共享变量的线程： package cn.day.b2; public class MyThread extends Thread &amp;#123; private int count = 5; public MyThread(String name)&amp;#123; super(); this.setName(name); &amp;#125; @Override public void run()&amp;#123; super.run(); while (count &gt; 0)&amp;#123; count--; System.out.println(&quot;由&quot; + this.currentThread().getName() + &quot;计算， count =&quot; + count); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; MyThread a = new MyThread(&quot;A&quot;); MyThread b = new MyThread(&quot;B&quot;); MyThread c = new MyThread(&quot;C&quot;); a.start(); b.start(); c.start(); &amp;#125; &amp;#125; 可能出现多个线程同时修改变量（不安全）的情况 package cn.day.b2; public class MyThread extends Thread &amp;#123; private int count = 5; @Override public void run()&amp;#123; super.run(); count--; System.out.println(&quot;由&quot; + this.currentThread().getName() + &quot;计算， count =&quot; + count); &amp;#125; public static void main(String[] args) &amp;#123; var mythread = new MyThread(); var a = new Thread(mythread,&quot;A&quot;); var b = new Thread(mythread,&quot;B&quot;); var c = new Thread(mythread,&quot;C&quot;); var d = new Thread(mythread,&quot;D&quot;); var e = new Thread(mythread,&quot;E&quot;);//分配新的 Thread 对象，以便将 mythread 作为其运行对象，将指定的 E 作为其名称 a.start(); b.start(); c.start(); d.start(); e.start(); &amp;#125; &amp;#125; 安全的共享变量（添加互斥区） package cn.day.b2; public class MyThread extends Thread &amp;#123; private int count = 5; @Override synchronized public void run()&amp;#123;//加入锁，只有等一个线程停止后另一个线程才能调用run（）方法 super.run(); count--; System.out.println(&quot;由&quot; + this.currentThread().getName() + &quot;计算， count =&quot; + count); &amp;#125; public static void main(String[] args) &amp;#123; var mythread = new MyThread(); var a = new Thread(mythread,&quot;A&quot;); var b = new Thread(mythread,&quot;B&quot;); var c = new Thread(mythread,&quot;C&quot;); var d = new Thread(mythread,&quot;D&quot;); var e = new Thread(mythread,&quot;E&quot;); a.start(); b.start(); c.start(); d.start(); e.start(); &amp;#125; &amp;#125; run( )与start( ) **run( )**立即执行，不创建新的线程。 start( ),创建新线程并用其执行。 run( )**的执行顺序与start( )**顺序无关 currentThread() 返回对当前正在执行的线程对象的引用 package cn.day.b2.currentThreadExt; public class CountOperate extends Thread &amp;#123; public CountOperate()&amp;#123; System.out.println(&quot;CountOperate---begin&quot;); System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//返回对当前正在执行的线程对象的引用 System.out.println(&quot;this.getName()= &quot; + this.getName());//this指代带CountOperate对象，CountOperate对象的名字并未发生改变，故默认线程名为Thread-0 System.out.println(&quot;CountOperate---end&quot;); &amp;#125; @Override public void run()&amp;#123; System.out.println(&quot;run---begin&quot;); System.out.println(&quot;Thread.currentThread.getName()=&quot;+ Thread.currentThread().getName()); System.out.println(&quot;this.getName() =&quot; + this.getName());//此时线程名为“B” System.out.println(&quot;run---end&quot;); &amp;#125; &amp;#125; package cn.day.b2.currentThreadExt; public class Run &amp;#123; public static void main(String[] args) &amp;#123; var c = new CountOperate(); c.setName(&quot;B&quot;);//调用构造器之前并未指定线程名称 var t1 = new Thread(c); t1.setName(&quot;A&quot;); t1.start(); &amp;#125; &amp;#125; /*运行结果* CountOperate---begin Thread.currentThread().getName()=main this.getName()= Thread-0 CountOperate---end run---begin Thread.currentThread.getName()=A this.getName() =B run---end */ isAlive( ) 判断线程是否存活 package cn.day.b3; public class CountOperate extends Thread &amp;#123; public CountOperate()&amp;#123;//构造函数时主线程main确认存活 System.out.println(&quot;CountOperate---begin&quot;); System.out.println(&quot;Thread.currentThread().getName()= &quot; + Thread.currentThread().getName()); System.out.println(&quot;Thread.currentThread().isAlive()= &quot; + Thread.currentThread().isAlive()); System.out.println(&quot;this.getName() =&quot; + this.getName()); System.out.println(&quot;this.isAlive() =&quot; + this.isAlive()); System.out.println(&quot;CountOpreate---end&quot;); &amp;#125; @Override public void run()&amp;#123; System.out.println(&quot;run---begin&quot;); System.out.println(&quot;Thread.currentThread().getName() =&quot; + Thread.currentThread().getName()); System.out.println(&quot;Thread.currentThread().isAlive() =&quot; + Thread.currentThread().isAlive()); System.out.println(&quot;this.getName() =&quot; + this.getName()); System.out.println(&quot;this.isAlive() =&quot; + this.isAlive());//为false，而重命名的A线程存活 System.out.println(&quot;run---end&quot;); &amp;#125; public static void main(String[] args) &amp;#123; var c = new CountOperate();//构造完对象后，main线程失活为false var t1 = new Thread(c);//main线程又存活了 System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());//isAlive()判断该线程是否存活 t1.setName(&quot;A&quot;); t1.start(); System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive()); &amp;#125; &amp;#125; sleep（） 使线程休眠 package cn.day.b3; public class MyThread2 extends Thread &amp;#123; @Override public void run()&amp;#123; try &amp;#123; System.out.println(&quot;run threadName=&quot; + this.currentThread().getName() + &quot;begin =&quot; + System.currentTimeMillis()); //currentTimeMillis()返回以毫秒为单位的当前时间 Thread.sleep(2000);//线程休眠2s System.out.println(&quot;run threadName=&quot; + this.currentThread().getName() + &quot;end =&quot; + System.currentTimeMillis() ); &amp;#125;catch (InterruptedException e)&amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var mythread = new MyThread2(); System.out.println(&quot;begin =&quot; + System.currentTimeMillis()); mythread.start(); System.out.println(&quot;end =&quot; + System.currentTimeMillis()); /*begin =1594439524699 main线程执行100多毫秒 end =1594439524710 run threadName=Thread-0begin =1594439524710 Thread线程执行2s多 run threadName=Thread-0end =1594439526721*/ &amp;#125; &amp;#125; 线程堆栈方法StackTraceElement[] getStackTrace( ) 返回一个表示该线程堆栈跟踪元素的数组。（线程未启动或终止则返回length为0的数组即null） package cn.day.b3; public class Test &amp;#123; public void a()&amp;#123; b(); &amp;#125; public void b()&amp;#123; c(); &amp;#125;public void c()&amp;#123; d(); &amp;#125;public void d()&amp;#123; e(); &amp;#125; public void e()&amp;#123; StackTraceElement[] array = Thread.currentThread().getStackTrace(); if (array != null)&amp;#123; for (int i = 0; i &lt; array.length; i++)&amp;#123; var eachElement = array[i]; System.out.println(&quot;className=&quot; + eachElement.getClassName() + &quot; methodName=&quot; + eachElement.getMethodName() + &quot; fileName=&quot; + eachElement.getFileName() + &quot; lineNumber=&quot;+eachElement.getLineNumber()); //eachElement.getClassName()返回包含由该堆栈跟踪元素表示的执行点的类的全限定名。 //eachElement.getMethodName()返回包含由该堆栈跟踪元素所表示的执行点的方法的名称 //eachElement.getLineNumber()返回包含由该堆栈跟踪元素表示的执行点源极线的行号 &amp;#125; &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var test = new Test(); test.a(); &amp;#125; &amp;#125; /*结果： className=java.lang.Thread methodName=getStackTrace fileName=Thread.java lineNumber=1598 className=cn.day.b3.Test methodName=e fileName=Test.java lineNumber=15 // 最后（最新）调用的为栈顶 className=cn.day.b3.Test methodName=d fileName=Test.java lineNumber=12 className=cn.day.b3.Test methodName=c fileName=Test.java lineNumber=10 className=cn.day.b3.Test methodName=b fileName=Test.java lineNumber=8 className=cn.day.b3.Test methodName=a fileName=Test.java lineNumber=5 //最先的调用为栈底 className=cn.day.b3.Test methodName=main fileName=Test.java lineNumber=27 */ dumpStack( ) 将当前线程堆栈跟踪信息输出至标准错误流 package cn.day.b3; public class Test &amp;#123; public void a()&amp;#123; b(); &amp;#125; public void b()&amp;#123; c(); &amp;#125;public void c()&amp;#123; d(); &amp;#125;public void d()&amp;#123; e(); &amp;#125; public void e()&amp;#123; int age = 0; age = 100; if (age == 100)&amp;#123; Thread.dumpStack();//将当前线程堆栈跟踪信息输出至标准错误流 &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var test = new Test(); test.a(); &amp;#125; &amp;#125; /*结果 java.lang.Exception: Stack trace at java.base/java.lang.Thread.dumpStack(Thread.java:1379) at cn.day.b3.Test.e(Test.java:18) at cn.day.b3.Test.d(Test.java:12) at cn.day.b3.Test.c(Test.java:10) at cn.day.b3.Test.b(Test.java:8) at cn.day.b3.Test.a(Test.java:5) at cn.day.b3.Test.main(Test.java:24) */ staric Map&lt;Thread,StackTraceElement[]&gt; getAllStackTraces( ) 返回所有活动线程的堆栈跟踪（映射）信息 映射的键即线程，而每个值都是一个StackTraceElement数组 package cn.day.b3; import java.util.Iterator; import java.util.Map; public class Test &amp;#123; public void a()&amp;#123; b(); &amp;#125; public void b()&amp;#123; c(); &amp;#125;public void c()&amp;#123; d(); &amp;#125;public void d()&amp;#123; e(); &amp;#125; public void e()&amp;#123; Map&lt;Thread,StackTraceElement[]&gt; map = Thread.currentThread().getAllStackTraces(); if (map != null &amp;&amp; map.size() != 0)&amp;#123; Iterator keyIterator = map.keySet().iterator(); while (keyIterator.hasNext())&amp;#123; Thread eachThread = (Thread) keyIterator.next();//键即线程 StackTraceElement[] array = map.get(eachThread);//返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。 System.out.println(&quot;------每个线程的基本信息&quot;); System.out.println(&quot; 线程名称：&quot; + eachThread.getName()); System.out.println(&quot;StackTraceElement[].length=&quot; + array.length); System.out.println(&quot; 线程状态：&quot; + eachThread.getState()); if (array.length != 0)&amp;#123; System.out.println(&quot;输出stackTraceElement[] 数组具体信息：&quot;); for (int i = 0; i &lt; array.length; i++) &amp;#123; StackTraceElement eachElement = array[i]; System.out.println(&quot; &quot;+ eachElement.getClassName() + &quot; &quot; +eachElement.getMethodName() + &quot; &quot; + eachElement.getFileName() + &quot; &quot; + eachElement.getLineNumber()); &amp;#125; &amp;#125; else &amp;#123; System.out.println(&quot;没有StackTraceElement[]信息，因为线程&quot; + eachThread.getName() + &quot;中的StackTraceElement[].length==0&quot;); &amp;#125; System.out.println(); System.out.println(); &amp;#125; &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var test = new Test(); test.a(); &amp;#125; &amp;#125; getId( ) 获取线程Id interrupted( )、isinterrupted( ) **interrupted( )**测试当前线程是否已经中断。线程的中断状态 由该方法清除。换句话说，如果连续两次调用该方法，则第二次调用将返回 false（在第一次调用已清除了其中断状态之后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）。 isinterrupted( ) 测试线程对象是否为中断状态且不清除状态标志。 interrupt( )、中断处理 在线程中做一个停止标记，配合异常或return终止线程 return中断法 package cn.day.b4; public class MyThread1 extends Thread &#123; @Override public void run( ) &#123; System.out.println(“线程开始”); super.run(); if (Thread.interrupted()) &amp;#123;//检测线程状态 System.out.println(&quot;已经停止状态了！&quot;); return; &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var thread = new MyThread1(); thread.start(); thread.interrupt();//中断该线程 &amp;#125; &#125; * 异常中断法（一般采用）：可在**catch**块中对异常信息进行统一处理。 ```java package cn.day.b4; public class MyThread extends Thread &amp;#123; @Override public void run( )&amp;#123; super.run(); try&amp;#123; for (int i = 0; i &lt; 50000000; i++) &amp;#123;//此循环数值要足够大，否则在main中方法标记中断线程之前循环就结束了 // if (this.interrupted())&amp;#123;//检测线程状态 if (Thread.interrupted())&amp;#123;//检测线程状态 // if (this.isInterrupted())&amp;#123;//检测线程状态 System.out.println(&quot;已经停止状态了！&quot;); throw new InterruptedException(); &amp;#125; System.out.println(&quot;i=&quot;+(i + 1)); &amp;#125; &amp;#125;catch (InterruptedException e)&amp;#123; System.out.println(&quot;进MyThread.java类run方法中的catch了&quot;); e.printStackTrace();//打印此throwable及其追踪到标准错误流,错误的栈轨迹等 &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; try &amp;#123; var thread = new MyThread(); thread.start(); Thread.sleep(2000); thread.interrupt();//中断该线程 &amp;#125;catch (InterruptedException e) &amp;#123; e.printStackTrace(); &amp;#125; System.out.println(&quot;end&quot;); System.out.println(Thread.interrupted()); &amp;#125; &amp;#125; interrupt方法遇到sleep方法（wait也一样）同样会发生异常(中断线程) package cn.day.b4; public class MyThread extends Thread &amp;#123; @Override public void run() &amp;#123; super.run(); try &amp;#123; for (int i = 0; i &lt; 50000; i++) &amp;#123; System.out.println(&quot;i=&quot; + (i + 1)); &amp;#125; System.out.println(&quot;run begin&quot;); Thread.sleep(200000); System.out.println(&quot;run end&quot;); &amp;#125; catch (InterruptedException e) &amp;#123; System.out.println(&quot;进MyThread.java类run方法中的catch了&quot;); e.printStackTrace();//打印此throwable及其追踪到标准错误流,错误的栈轨迹等 &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var thread = new MyThread(); thread.start(); thread.interrupt();//中断该线程 System.out.println(&quot;end&quot;); &amp;#125; &amp;#125; 其它中断线程的方法（已废弃）stop（） Stop（）对线程的停止具有不确定性，如线程在添加元素而不知道添加到哪里就被中断了 此方法抛出的ThreadDeath异常不需要显式捕捉 此方法用于销毁线程对象，如想重启线程，需使用Start（）方法 suspend( )、resume（） **suspend( )**暂停线程， resume（）恢复线程 易独占公共同步对象，导致其它线程无法访问公共同步对象 易导致数据不完整 yield（） 放弃产品CPU资源，让与其它任务（线程） 时间不确定：如刚放弃又拾起","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java多线程编程","slug":"Java多线程编程","permalink":"https://main2035.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"}]},{"title":"SQL基础","slug":"sql-01","date":"2020-10-16T14:49:11.612Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/sql-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/sql-01/","excerpt":"","text":"常见注释 – 很少支持 #行内注释 /**/段落注释 基础语法SELECT检索数据 语法 作用 例子 释义 select 查找列，并返回行 select prod_name from products；#可使用,分隔列名来查找多个列。 查找prod_name列，并返回其下的所有行，在products表中。 * 通配符 select * from products； 查找所有列并返回所有行，在products表中。 distinct 返回不重复的值 select distinct vend_id from products；#不可配合通配符使用除非所有列完全相同 查找vend_id列并返回其下所有行中不重复的值，在products表中。 limit 限制 select prod_name from products limit 5,5; 查找prod_name列并返回其下第5行起5行的值，在products表中。 排序检索数据 语法 作用 例子 释义 order by 排序 select prod_id,prod_price,prod_namefrom Productsorder by 2;#默认升序（ASC）排列#指定按多个列排列时：仅当指定的第一列中有重复元素时，才对其（存在重复值的）按指定的下一列进行排序。 即按照查找的第二个列进行排序，也可指定列名（prod_price） desc 降序 select prod_id,prod_price,prod_namefrom Productsorder by 2 DESC,3 desc; 即按照查找的第二个列进行降序排序，desc仅对其前的列有效； 过滤数据 语法 作用 例子 释义 where 在客户端过滤数据 select *from Productswhere prod_price &gt;= 5.99order by prod_price desc;#同排序操作一同使用时，不得位于排序操作之前#支持&lt;&gt;=!=等操作，其中&lt;&gt;操作等同于!=例：select *from Productswhere prod_id &lt;&gt;’fc’order by prod_price desc;#过滤字符串不区分大小写 1.查找所有列，在Products表中，并返回prod_price &gt;=5.99的所有行2.查找所有列，在Products表中，并返回除prod_id = “fc”之外的所有行 between 值的范围过滤 select prod_name,prod_pricefrom Productswhere prod_price between 4 and 10 查找prod_name,prod_price两列在Products表中，并返回prod_price值为4-10范围内的的的所有行 is 可用来检查null（空值） select prod_name,prod_pricefrom Productswhere prod_price is null 返回所有没有价格的商品 and,or 逻辑操作符and且or与，这里是短路的 select *from Productswhere vend_vend_id =’1001’ and prod_price &lt;=4;#and的优先级比or要高，and，or共同使用时为避免错误应用（）明确分组，#也可使用in代替or，例：select prod_name,prod_price from products where vend_id in(‘1001’,’1002’)order by prod_name等同于：select prod_name,prod_price from products where vend_id = ‘1001’ or vend_id = ‘1002’order by prod_name 返回所有vend_vend_id =’1001’ 且 prod_price &lt;=4;的行 not 否定其后的条件 select prod_name,prod_price from products where not vend_id in(‘1001’,’1002’)order by prod_name 可与in连用，返回vend_id=1001 vend_id=1002外的所有行 通配符搜索 语法 作用 例子 % 匹配0、1或多个字符包含空格。不会匹配到null select prod_namefrom productswhere prod_name like ‘f%%’ _ 匹配单个字符，包含空格 select prod_namefrom productswhere prod_name like ‘fuse_’ rtrim（）ltrim（） 去除右边、左边空格 创建计算字段 select prod_id ,quantity,item_price,quantity*item_price as expanded_price from orderitems where order_num = 20008; #如上创建了一个expanded_price字段（quantity*item_price的结果的别名），其仅在此时有效而不会存放到表中。 使用函数 select vend_name, upper(vend_name) as vend_name_upcase from vendors #将vend_name列下的所有行以大写形式返回 select avg(prod_price) as avg_peice from products where vend_id =&#39;1001&#39; #返回平均值 select count(*) as num_cust from customers #返回长度（数目），也可对列表中特定值进行计数 分组 select vend_id,count(*) as num_prods from products #对vend_id每行进行计数 group by vend_id;#按照vend_id排序并分组 select cust_id,count(*) as orders from orders group by cust_id having count(*)&gt;=2#过滤分组中&gt;=2的，having支持where的所有操作 select order_num,count(*) as items from orderitems group by order_num having count(*) &gt;=3 order by items,order_num desc#对分组依照选定的列进行排序 子句查询 select cust_name,cust_contact from customers where cust_id =(select cust_id from orders where order_num = (select order_num from orderitems where prod_id = &#39;jp2000&#39;)); #由内而外，哈哈 等效于： select order_num from orderitems where prod_id = &#39;jp2000&#39;； select cust_id from orders where order_num =20006 select cust_name,cust_contact from customers where cust_id =10003 联结（返回不在同一个表中的行）/*等值语法*/ select vend_name, prod_name,prod_price from vendors,products where vendors.vend_id=products.vend_id;#此处过滤联结条件。 #如没有联结条件过滤，将检索出“笛卡尔积”：表1行数*表2行数 /*规范语法*/ select vend_name, prod_name,prod_price from vendors inner join products on vendors.vend_id=products.vend_id 自联结（比子查询更快）/*子查询*/ select cust_id, cust_name, cust_contact from customers where cust_name = (select cust_name from customers where cust_contact =&#39;jim jones&#39;); /*自联结*/ select c1.cust_id, c1.cust_name,c1.cust_contact from customers as c1,customers as c2#不以别名进行会引发错误 where c1.cust_name=c2.cust_name and c2.cust_contact=&#39;jim jones&#39;#联结cust_name与c2.cust_name ，并过滤cust_contact=&#39;jim jones&#39;的行 /*（c1的cust_name同c2相同，找到了c2的cust_contact=&#39;jim jones&#39;也就相当于找到了c1cust_contact=&#39;jim jones&#39;，知道了cust_contact=&#39;jim jones&#39;就可知道cust_id）*/ 组合查询select cust_name,cust_contact,cust_email,cust_state from customers where cust_state in(&#39;il&#39;,&#39;in&#39;,&#39;mi&#39;) union #组合上下select多个select之间需要多个union分隔，union默认排除重复，union all则不排除 select cust_name,cust_contact,cust_email,cust_state#union中每个查询必须包含相同的列、表达式、或聚集函数 from customers where cust_name =&#39;wascals&#39; order by cust_name;#不能分别对每条union指定不同的排序 INSERT依赖于次序的插入/*在得知列的次序后才可使用此方式添加，若发生了列的次序变动此添加方式将不安全*/ insert into customers values(&#39;1000000006&#39;,&#39;toy land&#39;,&#39;123 any street&#39;,&#39;new york&#39;,&#39;ny&#39;, &#39;11111&#39;,&#39;usa&#39;,null, null); #依赖于次序的插入，必须为每一列提供一个值，如某列无添加则应写上null 提供列名的插入insert into customers(cust_id,cust_contact,cust_email,cust_name,cust_address,cust_city,cust_state,cust_zip) #必须为提供了列名的列给出一个值 values(null, null,&#39;1000000006&#39;,&#39;toy land&#39;,&#39;123 any street&#39;,&#39;new york&#39;,&#39;ny&#39;, &#39;11111&#39;); 从另一个表插入insert into 表名（列名） select 列名 from 表名 where 过滤 复制一个表 /*sql*/ select * into custcopy from customers; /* mysql*/ create table custcopy as select * from customers; UPDATE更新单个列update customers set cust_email = &#39;kim@@thetoystore.com&#39; where cust_id = &#39;100000000005&#39;#如不指定，将更新customers表cust_email列下的所有行 更新多个列update customers set cust_email = &#39;kim@@thetoystore.com&#39;,cust_contact=&#39;sam roberts&#39; where cust_id = &#39;100000000006&#39; DELLETEdelete from customers where cust_id = &#39;1000000006&#39;#删除此行，不过滤则删除所有行 #update删除列 #truncate删除表 添加删除列&amp;&amp;表/*添加表时为防止覆盖，应删除表后再进行添加*/ create table orderitems (order_num integer not null, order_item integer not null, prod_id char(10) not null, quantity integer not null default 1,#设置quantity列下的行默认值为1 item_price decimal(8,2) not null);#not null即不允许填入null，默认可填入null，只有为 not null的列方可为主键及唯一标识 /*add列*/ alter table vendors add vend_phone char (20); /*del列*/ alter table vendors drop column vend_phone;#此操作不可逆 /*删除表*/ drop table custcopy;#此操作不可逆 视图create view#创建视图 drop view 视图名#删除视图 /*以视图简化联结，创建视图*/ create view productcustomers as select cust_name , cust_contact,prod_id from customers,orders,orderitems where customers.cust_id=orders.cust_id and orderitems.order_num=orders.order_num; /*可对视图采取与表相同的查询操作*/ select * from productcustomers; /*一个视图过滤查询例子*/ create view customeremaillist as select cust_id, cust_name,cust_email from customers where cust_email is not null;#返回查询中所有cust_email不为空的，并将其添加到视图中 /*视图计算字段例子*/ create view orderitemsexpanded as select order_num,prod_id,quantity,item_price,quantity*item_price,quantity*item_price as expanded_price from orderitems 事务管理/*撤销整体*/ start transaction ; -- 标识事务处理块,块中内容未执行完则整体撤销 /*撤销部分操作*/ savepoint delete1;#标识 rollback to delete1;返回标识delete1","categories":[{"name":"SQL","slug":"SQL","permalink":"https://main2035.github.io/categories/SQL/"}],"tags":[{"name":"SQL入门","slug":"SQL入门","permalink":"https://main2035.github.io/tags/SQL%E5%85%A5%E9%97%A8/"}]},{"title":"Shell入门","slug":"shell-01","date":"2020-10-16T14:49:11.610Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/shell-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/shell-01/","excerpt":"","text":"变量 变量分为用户变量与系统变量 为变量赋值时“=”号两边不能有空格 可在``中写入命令，并将其交给变量引用，也可采用： 变量=$(命令 ) 达到相同的效果 #!/bin/bash #头文件，表明此脚本使用bash shell编写 echo &quot;hello,world!&quot; #打印字符串 echo &quot;PATH=$PATH&quot; #$表示变量引用，此处引用的是系统变量 echo &quot;user=$USER&quot; A=100 echo &quot;A=$A&quot; #打印用户定义的变量 unset#扰乱，就是删除前一个变量的值 echo &quot;A=$A&quot; RESULT=`ls -l /home`#这个变量引用一个命令ls -l /home echo $RESULT #打印这个变量（命令运行的结果） echo &quot;&quot; MY_DATE=$(date)#这个变量引用一个命令date echo &quot;data=$MY_DATE&quot; 环境变量（全局变量） 在/etc/profile 文件中定义环境变量TOMCAT_HOME=/opt/tomcat export TOMCAT_HOMEexport将 shell 变量输出为环境变量 定义环境变量后使用source /etc/profile让其生效 #!/bin/bash :&lt;&lt;! 注释代码块使用:&lt;&lt;!将要被注释的代码块! echo &quot;hello,world!&quot; echo &quot;PATH=$PATH&quot; echo &quot;user=$USER&quot; a=100 echo &quot;a=$a&quot; unset echo &quot;a=$a&quot; RESULT=`ls -l /home` echo $RESULT echo &quot;&quot; MY_DATE=$(date) echo &quot;data=$MY_DATE&quot; ! echo $TOMCAT_HOME readonly B=10#静态变量无视unset unset echo $B 运行结果： 预定义变量#!/bin/bash echo $$#当前进程的进程号(PID) ./a.sh &amp; #执行此脚本，后台运行 echo $! #后台运行的进程号 echo $? #上一次执行命令返回的状态（0为正常，否则上一个命令没有正确执行） ~ 位置参数变量#!/bin/bash echo &quot;$0 $1 $2&quot; #分别对应第 0 1 2个位置参数 ，0对应命令本身，如下图 参数1对应4、参数2对应5 echo $* #所有位置参数（不包括位置0），将其作为整体对待 echo $@ #所有位置参数（不包括位置0），将其分别对待 echo $# #所有位置参数个数（不包括位置0） 运行结果： 运算符 3种书写形式： $((运算式)) $[运算式] expr m + n expr m - n 注意 expr 运算符间要有空格 乘,除,取余：expr \\*, /, % #!/bin/bash #注意运算符前后的空格，必须有哦 A=$((4 + 8)) B=$[4 * 8] C=`expr 4 \\* 8` echo &quot;$A&quot; echo &quot;$B&quot; echo &quot;$C&quot; 条件判断 常用判断条件 两个整数的比较= 字符串比较-lt 小于-le 小于等于-eq 等于-gt 大于-ge 大于等于-ne 不等于 按照文件权限进行判断-r 有读的权限 [ -r 文件 ]-w 有写的权限-x 有执行的权限 按照文件类型进行判断-f 文件存在并且是一个常规的文件-e 文件存在-d 文件存在并是一个目录 #!/bin/bash #比较字符串 if [ &quot;b&quot; = &quot;b&quot; ] then echo &quot;Yes&quot; fi #比较数值 if [ 4 -eq 4 ] then echo &quot;Yes&quot; fi #判断文件 if [ -d /home ] then#满足条件执行： echo &quot;Yes&quot; fi #if反过来结尾 流程控制 if elif #!/bin/bash if [ $0 = &quot;./a.sh&quot; ]#注意[ 之间的 ]空格 then echo &quot;Yes&quot; elif [ $1 -eq 4 ] then echo &quot;Yes&quot; elif [ $2 = &quot;b&quot; ] then echo &quot;Yes&quot; fi 运行结果： case #!/bin/bash case $1 in &quot;1&quot;) echo &quot;Yes&quot;;; &quot;2&quot;)#位置参数1的值为2时执行 echo &quot;No&quot;;; *)#以上所有条件都不满足则执行 echo &quot;All&quot;;; esac#case反写作结尾 运行结果： for for in #!/bin/bash for i in &quot;$@&quot; do echo &quot;对单个进行处理=$i&quot; done echo &quot;&quot; for i in &quot;$*&quot; do echo &quot;作为整体对待=$i&quot; done#表示循环结束 ~ 运行结果： for常规 #!/bin/bash SUM=0#赋值运算符前后不能有空格 for((i=1;i&lt;=10000;i++))#for循环（（））中运算符的空格可有可无 do SUM=$[$SUM+$i]#像这样两个变量与运算符直接有无空格均可 done echo &quot;sum=$SUM&quot; 运行结果： while #!/bin/bash SUM=0 i=0 while [ $i -lt $1 ]#[]内外两边均有空格，需要注意。 do SUM=$[$SUM+$i] i=$[$i+1] done echo &quot;sum=$SUM&quot; 运行结果： 从控制台读入#!/bin/bash read -p &quot;你是一个哈皮（Yes/No）?&quot; WHY#-p即附带提示，WHY保存输入值 echo &quot;$WHY&quot; read -t 10 -p &quot;你是一个哈皮（Yes/No）?&quot; WHY#-t计时，超过定义的10s即停止输入 echo &quot;$WHY&quot; 运行结果： 函数 系统函数 basename [string] [suffix]删掉所有的前缀包括最后一个(‘/’)字符,然后将余下的字符串显示出来。指定了suffix,basename命令会将指定的后缀也去掉 dirname返回完整路径最后 / 的前面的部分 运行结果： 自定义函数 #!/bin/bash function getSum()&amp;#123;#不用写参数 SUM=$[$2 + $1] echo &quot;sum=$SUM&quot; &amp;#125; getSum $1 $2#方法名后面是传入的参数 ~ 运行结果： GitHub自动提交远程库实例shell的内容： #!/bin/bash GITPATH=/home/garfield/文档 #本地仓库路径 ADD=$(git add .) #添加所有文件到暂存区 DATE=$(date +%y%m%d) GITPUSH=$(git push blog master)#推送到远程库 GITPULL=$(git pull blog master)#同步远程库到本地（防止冲突） cd $GITPATH $ADD git commit -m &quot;$DATE&quot;#提交到版本库并备注时间 $GITPULL $GITPUSH ~ ~ 运行结果 定时任务内容： *20*** /home/garfield/文档/git_push.sh","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://main2035.github.io/categories/Ubuntu/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://main2035.github.io/tags/shell/"}]},{"title":"mysql for cmd","slug":"mysql-00","date":"2020-10-16T14:49:11.609Z","updated":"2020-09-21T01:07:35.474Z","comments":true,"path":"2020/10/16/mysql-00/","link":"","permalink":"https://main2035.github.io/2020/10/16/mysql-00/","excerpt":"","text":"初始化数据库：mysqld --initialize --console 安装数据库：mysqld install 启动mysql服务：net start mysql 终止mysql服务：net stop mysql 创建数据库到创建表： 创建了一个名为db4的数据库，并选择数据库db4，在其中创建一个装有数据名为user的表。 MySQL提示使用ALTERUSER语句修改密码安装mysql 登陆后，添加数据库时提示：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 解决方式如下： MySQL版本5.7.6版本以前用户可以使用如下命令： SET PASSWORD = PASSWORD(&#39;新密码&#39;); MySQL版本5.7.6版本开始的用户可以使用如下命令： ALTER USER USER() IDENTIFIED BY &#39;新密码&#39;;","categories":[{"name":"mysql","slug":"mysql","permalink":"https://main2035.github.io/categories/mysql/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://main2035.github.io/tags/JavaWeb/"},{"name":"mysql","slug":"mysql","permalink":"https://main2035.github.io/tags/mysql/"}]},{"title":"Class文件结构","slug":"jvm-03","date":"2020-10-16T14:49:11.608Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/jvm-03/","link":"","permalink":"https://main2035.github.io/2020/10/16/jvm-03/","excerpt":"","text":"class文件是以8个字节为基础的二进制流； class文件中存在表、无符号数这两种数据结构，同时每个class文件均可视为一张表； 无符号数以u1、u2、u3、u4分别指代1、2、4、8字节，而所有表均以_info结尾 魔数class文件开头的4个字节CA FE BA BE被称为魔数，用以区分该文件是否为class文件 版本号第5、6个字节是次版本号，第7、8个字节是主版本号； 虚拟机无法执行超过其版本号的class文件。 常量池 常量池中主要存放字面量、符号引用；为第9到第30个字节 常量池入口有一项u2数据用来保存常量池的容量大小，即容量计数值； 容量计数值从1开始（计数范围1-21），不引用任何一个常量池项目时为0，而集合类型的容量计数从0开始； 虚拟机加载类时，首先从常量池获得对应的符号引用，并选择在类创建或运行时解析、翻译到具体内存地址中； 常量池中所有常量都是一个表； tag（标志位）用于区分常量类型，name_index是常量池的索引值。 访问标志紧接着常量池后的两个字节便是访问标志，用来识别信息如：这是个接口、模块，这是个public访问修饰类型等； 两个为真的地址做并运算结果即为访问标识符（access_flags）的值。 索引类索引、父类索引均为u2类型数据而接口索引为u2类型集合； 类索引、父类索引均指向一个类型为CONSTANT_Class_info的类型描述符常量，通过此常量中的索引值可以找到定义在CONSTANT_Utf-8_info类型中的全限定名字符串； 除java.lang.Object类外其他类的父类索引均不为0； 如图： 从0x000000F1开始的3个u2类型数据分别为0x0001、0x0003、0x0000，即类索引为1，父类索引为3，接口索引集合大小为0 字段表集合仅包含类的字段变量，从0x000000F8开始，而不包含方法内部的局部变量、继承来的字段。 如图： fields_count的值说明这个类仅有一个字段表数据； access_flags的值0x0002代表访问修饰符private为真； 字段名称即name_index值为0x0005在常量表中对应值为“m”； 字段描述符即descriptor_index值为0x0006指向常量池字符串“I”，至此我们可以推断出该字段为 private int m 方法表集合与字段表集合相似，方法表集合也依次采用了：访问标志access_flags、名称索引name_index、描述符索引descriptor_index、属性表集合attributes； 方法中的代码编译为字节码后存放在方法属性表集合的Code属性中 如图： 第一个u2类型数据表示集合中有两个方法； 第一个方法的访问标志值为0x0001，即public； 名称索引值为0x0007，对应常量池方法名为； 描述索引值为0x0008，对应常量为（）v； 属性表计数器值为0x0001，表示此方法仅有1个属性，属性名为索引值0x0009对应的常量 属性表集合class文件、字段表、方法表都有自己的属性表集合； 虚拟机规范预定义属性： 对于每个属性，它的名称都要从常量池中引用一个CONSTANT_Utf-8_info类型常量来表示； 属性值的结构是完全自定义的，仅需通过一个u4说明属性值占有位数即可 Code属性接口与抽象类中不存在Code属性， 如图： attribute_name_index代表该属性的名称，它指向了CONSTANT_Utf-8_info类型常量“Code”； attribute_length表示属性值长度，属性值长度为属性表长度减去6个字节（attribute_name_index与attribute_length共占6个字节）； max_stack表示操作栈的最大深度值，虚拟机需要根据这个值来确定栈帧中操作栈的深度； max_locals表示局部变量需要的存储空间，单位为变量槽即分配局部变量时的最小单位，32位数据类型用1个变量槽，64位数据类型用2个变量槽如double、long； 变量槽重用：当执行的代码超过一个变量的作用域时，此变量的变量槽可被其它局部变量重用； max_locals的大小：javac编译器将根据变量作用域大小分配变量槽给各个变量，根据同时存在的最大局部变量数量和类型计算出max_locals的大小 code_length用于存储编译后所得字节码的长度，code用于存储编译后所得的字节码指令；","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"JVM虚拟机","slug":"JVM虚拟机","permalink":"https://main2035.github.io/tags/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"追踪式垃圾回收算法","slug":"jvm-02","date":"2020-10-16T14:49:11.606Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/jvm-02/","link":"","permalink":"https://main2035.github.io/2020/10/16/jvm-02/","excerpt":"","text":"四种引用： 强引用：指程序中普遍存在的引用赋值；被强引用关联的对象只要强引用关系存在，被引用的对象就不会被回收 软引用：指有用而非必须的对象；被软引用关联的对象在系统发生内存溢出之前会将其回收 弱引用：指非必须的对象（比软引用弱）；被弱引用关联的对象在下一次垃圾回收前无论内存是否足够，均将其回收 虚引用：无法通过此引用来取得对象实例，使用此引用只是为了在对象被回收时收到一个系统通知 分代收集 分代假说 弱分代假说（新生代）：大多数对象都是朝生夕灭 强分代假说（老年代）：对象熬过的收集次数越多就越难被回收 跨代引用假说：跨代引用相对于同代引用仅占少数 垃圾分类：根据强、弱分代假说，将Java堆分为两个内存区域分别存储新生代与老年代，每次回收后存活的新生代对象将逐步晋升到老年代中。 老年代引用新生代：相互引用的两个对象应同生同灭，所以该新生代会逐步晋升到老年代中从而消除跨代引用 根据跨带引用假说，在新生代上建立全局数据结构“记忆集”，这个集合中标记存在跨代引用的老年代，收集扫描时仅扫描此集合中标识的老年代 标记算法标记清除算法 标记需要回收的对象，清除所有标记的对象 标记需要保存的对象，清除所有未标记的对象 缺点：标记清除算法需要大量的标记、清除动作，且清除后会产生大量不连续的内存空间（可能导致无法为大的对象分配内存） 标记整理算法 标记过程与标记清除算法相同，但并不直接对可回收对象进行回收，而是让所有存活对象向内存空间一端移动，然后直接清除另外一端 缺点：移动对象操作时需全程暂停用户应用程序 和稀泥式解决方案：令虚拟机使用标记清除算法直到内存碎片化程度影响到对象内存分配，再使用标记整理算法 标记复制算法 将内存分为两块，每次只使用一块，当这块内存满时将其中存活的对象复制到另一块内存中，并自我清除。 缺点：标记复制算法需要大量的内存空间，且内存中回收对象的数量直接影响着此算法的效率。 此算法常用于新生代回收 Appel式回收（标记复制算法的改进） 将新生代分为一块较大的Eden空间与两块较小的Survivor空间。 分配内存时使用Eden与一块Survivor，回收时将使用的Eden与Survivor上存活的对象复制到另一块Survivor上，并自我清除。 当另一块Survivor空间装不下已使用的Eden与Survivor中的存活对象时，就会发生分配担保（装不下的存活对象直接晋升至老年代）","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Jvm虚拟机","slug":"Jvm虚拟机","permalink":"https://main2035.github.io/tags/Jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"运行时数据区域","slug":"jvm-01","date":"2020-10-16T14:49:11.605Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/jvm-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/jvm-01/","excerpt":"","text":"运行时数据区域 程序计数器：每个线程都有一个程序计数器，它指示当前线程所执行字节码的行号 Java虚拟机栈：每个方法执行时均会创建一个栈帧，其存储局部变量表（基本类型与对象引用）、操作数栈、动态连接、方法出口等信息 本地方法栈：与Java虚拟机栈类似，其为本地方法服务 Java堆（GC堆）：在虚拟机运行时创建用以存放对象实例，且为所有线程共享。 方法区：存储已被虚拟机加载的类型信息、常量、静态变量、编译后的代码缓存等数据，且为所有线程共享。 运行时常量池：属于方法区，在加载类后class文件中的常量池表（字面量、符号引用）将存入运行时常量池 直接内存（不属于运行时数据区域）：基于通道与缓冲区的I/O方式，其使用Native函数库直接分配堆外内存，并通过存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作 为对象分配内存： 创建对象时，虚拟机首先检测这个类是否已被加载、解析、初始化，如没有则首先执行类的加载过程。 垃圾收集器的空间整理能力决定堆是否规整 分配堆内存的两种方式：指针碰撞： Java堆内存是规整的，有一个指针其两边分别是已使用、未使用的堆内存，分配内存时把指针向未使用的一边挪动一段与对象大小相同的距离 空闲列表： Java堆内存不是规整的，使用与未使用的堆内存纵横交错，需要使用一个列表记录未使用的堆内存，分配内存时从列表中找到一块足够大的堆内存分配给对象 对象内存分配的细节 为对象分配堆内存空间时为防止同一时间创建多个对象的内存分配冲突（对象A、B分配同一块内存），可采用以下两种操作： 上锁：为分配的内存空间进行同步处理 闭包（本地线程分配缓冲）：为每个线程预先分配一块内存 分配完堆内存后，虚拟机将堆内存初始化值为0（对象头除外） 对象内存分为3个部分：对象头、实例数据、对其填充 对象、方法区访问对象 句柄访问：Java栈中reference存储对象的句柄地址，句柄中包含对象的实例、类型数据的地址信息 直接指针访问：Java栈中reference直接存储对象地址 判断对象是否存活 引用计数算法：每个对象都有一个引用计数器，每当被一个地方引用时计数器值便加一，每当失去一个引用计数器值便减一（不采用） 可达性分析算法：通过GCRoots根对象作为起点，根据引用关系向下搜索，构成一条引用链如果某个对象到GCRoots间没有任何引用链，那么这个对象就是可回收的。 回收对象： 可达性分析算法中可回收的对象并不会被立即回收，而是对其进行第二次筛选； 如此对象有覆盖finalize（）方法且此方法且未被虚拟机调用，则执行finalize（）方法，并将其放入F—Queue队列中（低优先级的Finalizer线程将执行finalize（）方法），在此期间如对象与引用链建立联系则不会被回收（如赋值、引用等） 回收方法区： 方法区的垃圾回收分为两部分，废弃的常量与不再使用的类型： 废弃的常量：一个常量不被引用，则这个常量将被从常量池中清除（接口、方法、字段符号与之类似） 不再使用的类型：需要满足以下3个条件方可被回收（而不是立即回收） 该类不存在任何实例（实例均被回收） 加载该类的加载器已被回收 该类对应的class对象没有被引用，且无法通过反射访问该类的方法","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Jvm虚拟机","slug":"Jvm虚拟机","permalink":"https://main2035.github.io/tags/Jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"JS数组","slug":"js-05","date":"2020-10-16T14:49:11.604Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/js-05/","link":"","permalink":"https://main2035.github.io/2020/10/16/js-05/","excerpt":"","text":"Js数组是无类型的，其元素可以为任意类型，也可以是任意对象或数组； Js数组是动态的，无需声明其大小，数组长度会根据需要增长与缩减； 省略的数组直接量将被赋予undefined值； 数组是对象的特殊形式，所以其可以从原型中继承元素，可以定义元素的getter与setter方法；数组的索引是对象属性名的特殊类型。 var b = [1,,3]//索引1处值即为undefined var c = [,];//空数组，因为数组直接量结尾处的“,”可选加与不加，数组中只有1个“,”时默认为是结尾处的“,” var d = [];//空数组 var d = new Array(10);//利用Array()构造函数创建一个预分配大小的数组。 /*负值与非整数的数组索引，将被转换为字符串，字符串作为属性名使用*/ var a = [3.1415926] = pi; var b = [-180] = deg; 稀疏数组a = new Array(5);//a为空数组，但其长度为5 b = []; b[1000] = 122;//添加一个元素，数组长度为1001 /*length属性小于当前长度时，超出length值-1的元素将被删除。*/ b.length = 999;//此时数组为空。 /*让数组变为只读*/ c = [1,2,3]; Object.defineProperty(a,&quot;length&quot;,&amp;#123;writable:false&amp;#125;)//将length属性设置为不可写 添加数组元素栈、队列、双端队列的实现。 push(),unshift() **push()**在尾部添加元素; **unshift()**在头部添加元素. a = []; a.push(&quot;pu&quot;);//与直接量添加a[a.length]=&quot;pu&quot;;效果相同 a.unshift(&quot;d&quot;,&quot;j&quot;);//unshif插入元素是一次性插入的，所以不会影响顺序 /*delete可删除数组元素（数组是特殊对象），但不改变其长度*/ delete a[0]; pop(),shift() 栈的实现（配合push()）：pop() 减少数组1长度（即删除末尾元素），并返回被删除的元素值 队列的实现（配合unshift()）：shift()从头部删除一个元素，并将被删除元素以后的元素索引减一（队列，所有人向前走一步） 双端队列：push(),unshift() pop(),shift()实现。 遍历数组forEach 一般，调用的函数作为forEach第一个参数，调用函数一般提供3个参数：数组元素、元素索引、数组本身 forEach只能利用”异常“机制终止遍历 var data = [1,2,3,4,5,]; var sum = 0; data.forEach(function(value)&amp;#123;sum+=value;&amp;#125;);//求和 data.forEach(function(v,i,a)&amp;#123;a[i]=v+1;&amp;#125;);//每个元素+1 /*终止遍历*/ function foreach(a,f,t)&amp;#123; try&amp;#123;a.forEach(f,t);&amp;#125; catch(e)&amp;#123;if(e===foreach.break)return;else throw e;&amp;#125; &amp;#125; foreach.break = new Error(&quot;Stoplteration&quot;); 数组方法join 将数组组成字符串返回 /*join */ var a = [1,2,3,4] a.join();//默认以“,”分隔 a.join(&#39;_&#39;);//自定义元素分隔(_) /*split */ var b = &quot;hello World&quot; var c =b.split(正则表达式或字符串);//将字符串分割为若干块并创建一个数组 reverse 逆序数组元素（直接在原数组中排序），并返回排序后的数组 var a = [1,2,3,4] a.reverse() sort 默认以字母顺序进行排序，且返回排序后的数组 undefined 元素会被排列到尾部 自定义排序：sort接受一个比较函数，该函数有两个比较参数，返回小于0的值则第一个参数在前，反之第二个参数在前。 /*排列数值*/ var a = [12,574,88,78]; a.sort(); a.sort(function(a,b)&amp;#123;return a-b;&amp;#125;) /*排列字符串且不区分大小写*/ a = [&#39;ant&#39;,&#39;Bug&#39;,&#39;cos&#39;] a.sort(function(s,t)&amp;#123;var a = s.toLowerCase();var b = t.toLowerCase(); if(a&lt;b)return -1;//写小于0的任意值 if(a&gt;b)return 1;//写大于0的任意值 return 0;//相等返回0 &amp;#125;); concat 创建并返回新的数组 如果其参数中包含某个数组则添加其元素，创建并返回新的数组 var a = new Array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;); var b = new Array(&#39;1f&#39;,&#39;2f&#39;,&#39;3f&#39;); a.concat(4,5,6,b);//a = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, 4, 5, 6, &quot;1f&quot;, &quot;2f&quot;, &quot;3f&quot;]; slice 返回数组参数指定位置的片段或子数组 var a = new Array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;); a.slice(0,2)//返回[&quot;1&quot;, &quot;2&quot;]，返回第一个参数位置（包含第一个位置）到第2个参数位置前的子数组。 splice 插入或删除数组元素，并返回一个包含已删除元素的数组。 第一个参数指定了插入或删除的位置，第二个参数指定了删除元素的数量（若是添加则此参数填0） var a =[1,32,95,98,6,,78]; a.splice(2, 0,&#39;f1&#39;);//删除0个在索引2前插入&#39;f1&#39; a.splice(4,1,[1,5,,6],&#39;j&#39;);//在索引4出删除1个元素并插入一个数组[1,5,,6]与一个元素&#39;j&#39; toString与toLocaleString toString将每个元素转换为字符串，并输出用逗号分隔的字符串列表。 toLocaleString使用“本地化“版本的toString，将元素转换为字符串并分隔（自定义） Es 5数组方法大多数方法第一个参数接收一个函数，并对数组中每个元素调用一次该函数； 对于稀疏数组中不存在的元素（undefined），不调用传递函数； 调用函数一般提供3个参数：数组元素、元素索引、数组本身。 map 将数组的所有元素传递给指定函数，并返回一个包含该函数返回值的数组 var a = [1,5]; var b = a.map( function(x)&amp;#123; return x*x;&amp;#125;);//返回的是新数组哦 fileter 返回数组元素的子集 只返回稠密数组（自动跳过稀疏数组中为空的元素） /*返回子集 */ var a= [1,5,98,8]; var b = a.filter(function(x)&amp;#123;return x&gt;5;&amp;#125;);//过滤 var c = a.filter(function(x,y)&amp;#123;return y%2==0;&amp;#125;); /*压缩空缺*/ var a = a.filter(function(x)&amp;#123;return x!==undefined &amp;&amp; x!=null;&amp;#125;); every与some 对数组元素按照指定的函数进行判定，返回布尔值 every针对所有元素，some仅当一些元素 一旦every与some确定结果，遍历便停止了 var a =[1,5,8,,9]; a.every(function(x)&amp;#123;return x &lt; 5 ;&amp;#125;);//数组中全部元素大于5？否，返回false a.some(function(x)&amp;#123;return x &lt;5;&amp;#125;);//数组中有元素大于5？yes，返回false reduce与reduceRight reduce 使用指定函数使数组元素相互结合，其有两个参数第一个是“到目前为止操作的结果”，第二个是初始值。（可不写初始值，默认数组第一个元素为初始值） var a = [1,2,5] var sum = a.reduce(function(x,y)&amp;#123;return x+y&amp;#125;，2)//sum =8 var sum = a.reduce(function(x,y)&amp;#123;return x+y&amp;#125;)//sum =10 reduceRight和reduce操作相同，但其从右到左处理数组 indexOf 与 lastIndexOf 依照给定的值在数组中搜索元素，返回找到的第一个元素，不存在则返回-1 indexOf从头开始搜索 lastIndexOf从尾开始搜索 第一个参数是要搜索的值，第二个参数（可省略）指定从哪个索引开始搜索 function findall(a,x)&amp;#123;//传入数组与将要查找的值 var results = [],len = a.length,pos = 0;// while(pos&lt;len)&amp;#123;pos = indexOf(x,pos);//从索引o开始搜索 if(pos===-1)break;results.push(pos);pos +=1;//找不到结束；否则在数组results中存储索引，继续搜索 &amp;#125; return results; &amp;#125; 类数组对象 类数组对象没有继承自Array.prototype,但其仍可使用Function.call方法调用数组方法 var a = &amp;#123;&quot;0&quot;:&quot;a&quot;,&quot;1&quot;:&quot;b&quot;,&quot;2&quot;:&quot;c&quot;,length:3&amp;#125; Array.prototype.join.call(a,&quot;+&quot;)//调用join方法 Array.prototype.slice.call(a,0)//调用slice方法 Array.prototype.map.call(a,function(x)&amp;#123;return x.toLowerCase();&amp;#125;)//调用map方法 作为数组的字符串 charAt 方法可用来访问单个字符(即可对字符串采取索引访问操作) 数组的通用操作也适用于字符串 var a = &quot;hello!&quot; a.charAt(2)//返回&#39;l&#39; Array.prototype.filter.call(a,function(x)&amp;#123;return x.match(/[^aeiou]/);&amp;#125;)//只匹配非元音字符","categories":[{"name":"JS","slug":"JS","permalink":"https://main2035.github.io/categories/JS/"}],"tags":[{"name":"JS基础","slug":"JS基础","permalink":"https://main2035.github.io/tags/JS%E5%9F%BA%E7%A1%80/"}]},{"title":"JS对象","slug":"js-04","date":"2020-10-16T14:49:11.602Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/js-04/","link":"","permalink":"https://main2035.github.io/2020/10/16/js-04/","excerpt":"","text":"包装对象 字符串、布尔值、数字等可通过包装器，构造一个临时对象 必要时，js会进行包装器与字符串、数字、布尔值的相互转换 var a = &quot;hello&quot;; var word = a.substring(a.indexOf(&quot;&quot;)+1,a.length);//结果word=ello //substring() 方法用于提取字符串中介于两个指定下标之间的字符。 //indexOf() 方法返回某个指定的字符串值在字符串中首次出现的位置。 对象直接量/*像py里的字典*/ var book =&amp;#123; &quot;main title&quot;:&quot;The Definitive Guide&quot;, &quot;author&quot;:&quot;David Flanagan&quot; &amp;#125;; //对象直接量的原型为constructor.prototype new创建对象var mydate = new Date();//new+构造函数创建对象 删除、查询、添加、继承/*添加、查询对象属性 */ var customer=&amp;#123;a1:&quot;1&quot;,a2:&quot;2&quot;,a3:&quot;3&quot;&amp;#125; var addr=&quot;&quot;; for(i=0;i&lt;4,i++)&amp;#123;//拼接customer属性 addr+=customer[&quot;a&quot;+i]+&#39;\\n&#39; &amp;#125; customer.a4 =&#39;4&#39;;//为customer创建一个名为a4的属性，值为4 customer[a5]=&quot;5&quot;//为customer创建一个名为a5的属性，值为5 var mynumber =customer.a4;//查询customer的a4属性，并将其赋值于此变量 /*继承对象、删除对象属性*/ var o = &amp;#123;&amp;#125; o.x = 1; var p = inherit(o);//继承对象，包含其toString方法与属性 p.y = 2; delete p.x;//delete无法删除对象继承的属性，可直接在其父上操作 delete o.x; var q = inherit(p); q.z = 3; var s = q.toString(); /*delete:用来删除对象属性（包含数组元素），也可删除未使用var声明的变量包含（this.的全局变量）*/ 存取器属性 读取、写入、可枚举、可配置 只有getter方法，就是只读属性 只有setter方法 ，就是只写属性 /*直接定义存储器属性*/ var random = &amp;#123; get octet()&amp;#123; return Math.floor(Math.random() *256); &amp;#125;, get uint16()&amp;#123; return Math.floor(Math.random() *65536); &amp;#125;, get int16()&amp;#123; return Math.floor(Math.random() *65536)-32768; &amp;#125; &amp;#125;; /*老式api*/ __lookupGetter__(),__lookupSetter__()//返回属性的getter与setter方法； __defineSetter__(),__defineGetter__()//定义属性的getter与setter方法；//有两个参数，第一个为属性名字，第二个是getter与seeter方法 设置属性特性属性特性 包括：值、可写性、可枚举性、可配置性，分别对应：value,writable,enumerable,configurable /** * 设置属性特性 */ /*单个 */ var o =&amp;#123;&amp;#125;; Object.defineProperty(o,&quot;x&quot;,&amp;#123;value:1,writable:true,enumerable:false,configurable:true&amp;#125;); //Object.defineProperty方法修改自己已有属性或创建自有属性，不可修改继承属性 Object.keys(o);//将o.x属性变为只读 o.x =2 ;//操作失败 Object.defineProperty(o,&quot;x&quot;,&amp;#123;value:2&amp;#125;); /*多个 */ var p = Object.defineProperties(&amp;#123;&amp;#125;,&amp;#123;x:&amp;#123;value:1,writable:true,enumerable:true,configurable:true&amp;#125;, y:&amp;#123;value:1,writable:true,enumerable:true,configurable:true&amp;#125;, r:&amp;#123;get:function()&amp;#123;return Math.sqrt(this.x*this.x+this.y*this.y)&amp;#125;, enumerable:true,configurable:true&amp;#125; &amp;#125;); /*复制属性特性 */ Object.defineProperty(Object.prototype,&quot;extend&quot;, /*定义Object.prototype.extend*/ &amp;#123;writable:true,enumerable:false,configurable:true,value:function(o)&amp;#123; var names = Object.getOwnPropertyNames(o);//得到所有自由属性包括不可枚举属性 for (var i = 0; i&lt; names.length; i++)&amp;#123; if(names[i]in this)continue;//如果属性已存在，则跳过 var desc = Object.getOwnPropertyDescriptor(o,names[i]);//为this创建一个属性 Object.defineProperty(this,names[i],desc); &amp;#125; &amp;#125;&amp;#125;); Object.getOwnPropertyDescriptor() 获取对象的属性描述 对于继承属性与不存在属性均返回undefined Object.defineProperty() 修改已创建对象的属性特性，不能修改继承属性 /*用法：Object.defineProperty(操作对象，属性名，&amp;#123;属性描述符对象：value,writable,enumerable,configurable&amp;#125;)*/ var o =&amp;#123;&amp;#125;; Object.defineProperty(o,&quot;x&quot;,&amp;#123;value:1,writable:true,enumerable:false,configurable:true&amp;#125;);//为对象O创建一个不可枚举的属性x //修改或创建完成后返回新的对象 Object.defineProperties() 同时修改多个对象属性特性，不能修改继承属性 var p = Object.defineProperties(&amp;#123;&amp;#125;,&amp;#123;x:&amp;#123;value:1,writable:true,enumerable:true,configurable:true&amp;#125;,//p是一个空对象 /*为其创建x，y，r属性*/ y:&amp;#123;value:1,writable:true,enumerable:true,configurable:true&amp;#125;, r:&amp;#123;get:function()&amp;#123;return Math.sqrt(this.x*this.x+this.y*this.y)&amp;#125;, enumerable:true,configurable:true&amp;#125; &amp;#125;); 原型 通过对象直接量创建的对象使用Object.prototype作为它们的原型 new创建的对象，prototype作为其原型 Object.create()创建的对象，使用第一个参数作为其原型（可以是null） Object.create() 创建 var p =&amp;#123;x:1&amp;#125;; var o =Object.create(p);//使用原型p创建对象o p.isPrototype(o)//o继承至p? Object.prototype.isPrototypeOf(o)//P继承至Object.prototype？ Object.getPrototypeOf() 查询对象原型 var a = &amp;#123;&amp;#125;; Object.getPrototypeOf(a); 可扩展 是否可以添加、删除属性； /*将对象传入*/ Object.esExtensible()//判断对象是否可扩展 Object.isSealed()//检测对象是否封闭（不可扩展） Object.prevenExtensions()//将对象自身转换为不可扩展的（此操作不可逆），其原型添加属性时此对象仍会继承这些属性 Object.seal()//与Object.prevenExtensions()类似 Object.freeze()//冻结：不可扩展且数据属性设置为只读（setter存储器属性不受影响） Object.isFrozen();//检测是否冻结 /*创建一个封闭（不可扩展）对象，包含一个冻结原型一个不可枚举属性*/ var o = Object.seal(Object.create(Object.freeze(&amp;#123;x:1&amp;#125;),&amp;#123;y:&amp;#123;value:2,writable:true&amp;#125;&amp;#125;)); 序列化/*序列化对象 */ o = &amp;#123;x:1,y:&amp;#123;z:[false,null,&quot;&quot;]&amp;#125;&amp;#125;; s = JSON.stringify(o);//序列化对象o（转换为字符串） p = JSON.parse(s);//还原为对象,p是深度复制","categories":[{"name":"JS","slug":"JS","permalink":"https://main2035.github.io/categories/JS/"}],"tags":[{"name":"JS基础","slug":"JS基础","permalink":"https://main2035.github.io/tags/JS%E5%9F%BA%E7%A1%80/"}]},{"title":"JS函数","slug":"js-03","date":"2020-10-16T14:49:11.601Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/js-03/","link":"","permalink":"https://main2035.github.io/2020/10/16/js-03/","excerpt":"","text":"函数方法（方法体同声明均提升到顶部位置） function printprops(o)&amp;#123; for(var p in o)&amp;#123; console.log(p + &quot;:&quot; + o[p] + &quot;\\n&quot;); &amp;#125; &amp;#125;//返回nudefined 函数表达式（方法体原地保留、仅提前声明） var f = function(x)&amp;#123;return x*x;&amp;#125;//适合做只用一次的函数 函数中声明的变量仅在函数体内可见，因此可用函数来声明局部变量（也可通过let方法声明局部块） (function()&amp;#123;/*局部变量*/&amp;#125;());//结束并立即调用函数 函数是特殊的对象，所以也可拥有属性、方法，还可使用Function构造函数对象 嵌套函数 省略的实参都是undefined，多出的参数自动省略 函数可赋值给变量、存储在数组、对象属性中（称为方法），还可作为参数传入另一函数 /**函数赋值于变量*/ function square(x)&amp;#123;return x*x;&amp;#125; var s = square; /**函数作为对象属性，此时叫方法*/ var o=&amp;#123;square:function(x)&amp;#123;return x*x;&amp;#125;&amp;#125;; /*函数存储在数组中*/ var a = [function(x)&amp;#123;return x*x;&amp;#125;,20]; a[0](a[1]);//看似nb的直接量调用a0的括号中装上a1，哈哈 内部函数可使用外部函数的参数和变量 function hypotenuse(a,b)&amp;#123; function square(x)&amp;#123;return x*x;&amp;#125; return Math.sqrt(square(a)+square(b)) //调用square函数时，传入了外部函数的a,b参数 &amp;#125; 函数作为对象方法var o =&amp;#123; m:function()&amp;#123;//函数作为对象方法 var self = this;//指代对象O console.log(this====o); f(); function f()&amp;#123;//嵌套函数 console.log(this===o);//这里的this不是O console.log(self===o); &amp;#125; &amp;#125; &amp;#125;; o.m(); 构造函数var o = new Object();//无参数构造函数 var o = new Object;//无参数构造函数 实参对象 arguments标识符指向实参对象引用 function f(x)&amp;#123; console.log(x); arguments[0]=null;//修改参数x console.log(x); &amp;#125; caller 指代当前执行的函数 var factorial = function(x)&amp;#123; if(x&lt;=1)return 1; return x*arguments.callee(x-1);//递归调用 &amp;#125; 接收任意数量的实参 function max(/*number...*/)&amp;#123; &amp;#125; 函数属性uniquelnteger.counter = 0;//为函数属性设置初始值 function uniquelnteger()&amp;#123; return uniquelnteger.counter++; &amp;#125; /**作为数组储存*/ function factorial(n)&amp;#123; if(isFinite(n)&amp;&amp;n&gt;0&amp;&amp;n===Math.round(n))&amp;#123; if(!(n in factorial))//判断n在不在 factorial[n]=n*factorial(n-1);//计算并存储a return factorial[n]; &amp;#125;else return NaN; &amp;#125;factorial[1]=1 闭包var scope = &quot;global scope&quot;; function checkscope()&amp;#123; var scope = &quot;local scope&quot;; function f()&amp;#123;return scope;&amp;#125; return f(); &amp;#125; checkscope();//返回局部变量值local scope /**************类似java对象之间的闭包性*******************/ function counter()&amp;#123; var n = 0; return&amp;#123; count:function()&amp;#123;return n++;&amp;#125;, reset:function()&amp;#123;n = 0;&amp;#125; &amp;#125;; &amp;#125; var c = counter(),d = counter();//即分别创建两个作用域链 c.count(),d.count();//初始值都是0，调用后+1 c.reset();//重置c为0，对其中一个作用域lian c.count(),d.count();//c-0 ，d-1 /*******************实现存取器***************/ //用参数n保存变量值 function counter(n)&amp;#123; return&amp;#123; get count()&amp;#123;return n++;&amp;#125;, set count(m)&amp;#123; if(m&gt;=n)n=m; else throw Error(&quot;count can only be set to a larger value&quot;); &amp;#125; &amp;#125;; &amp;#125; var c = counter(1000); c.count; c.count;//访问（读）操作 c.count = 2000;//写操作 /********访问实例：********/ /*错误的闭包示范*/ function constfuncs()&amp;#123; var funcs=[]; for(var i=0;i&lt;10;i++) funcs[i]=function()&amp;#123;return i;&amp;#125;;//闭包内的i是同一个i，即最终i=10 return funcs;//最终返回10 &amp;#125; var funcs=constfuncs(); funcs[5]()//10 /*正确的闭包示范*/ function constfuncs(v)&amp;#123;return function()&amp;#123;return v;&amp;#125;;&amp;#125; var funcs =[]; for(var i = 0 ;i&lt;10; i++)funcs[i]=constfuncs(i);//在闭包外每个i都是不同的i funcs[5]()//5 方法call( ),apply( )f.call(o);//以对象o的方法形式调用函数f f.apply(o); f.call(o ,1,2)//以对象o的方法形式调用函数f，并传入参数 f.apply(o,[1,2]); bind( ) 绑定，一个函数调用bind( )方法，并传入一个对象，那么bind( )方法会返回一个新的函数，调用新的函数即可把原函数当作传入对象的方法来使用 function f(y)&amp;#123;return this.x+y;&amp;#125;;//函数 var o =&amp;#123;x:1;&amp;#125;;//对象 var g = f.bind(o);//新函数 g(2);//调用新函数 构造函数 每次调用**Function( )**就会创建新对象 var f = new Function(&quot;x&quot;,&quot;y&quot;,&quot;return x*y&quot;); //等同于 var f=function(x,y)&amp;#123;return x*y&amp;#125; Function( )构建对象的函数体编译会在顶层函数（全局作用域）进行 var scope = &quot;hello&quot;; function a()&amp;#123; var scope = &quot;world&quot;; return new Function(&quot;return scope&quot;); &amp;#125; a()();//返回hello","categories":[{"name":"JS","slug":"JS","permalink":"https://main2035.github.io/categories/JS/"}],"tags":[{"name":"JS基础","slug":"JS基础","permalink":"https://main2035.github.io/tags/JS%E5%9F%BA%E7%A1%80/"}]},{"title":"变量&&语法","slug":"js-02","date":"2020-10-16T14:49:11.600Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/js-02/","link":"","permalink":"https://main2035.github.io/2020/10/16/js-02/","excerpt":"","text":"函数体内局部变量优先级高于全局变量； 函数内的变量声明将提升至函数体顶部，同时在原位置完成初始化var声明； 在for循环中使用var声明变量时，该变量的作用域为for循环所属函数。 var a=[]; for(var i = 0;i&lt;10;i++)&amp;#123; var q = i; a[i]=function()&amp;#123;console.log(q)&amp;#125; &amp;#125; a[0]() /*其中，由于for循环并不是一个函数体，所以for循环中定义的变量q和i是作用域for循环所在的函数体，和a同级， i++ 和 q=i 并不是重新定义变量，只是重复赋值，最终循环结束，i = 10,q=9; */ let声明的变量，只在let所在的代码块有效果 1. var a=[]; 2. for(let i = 0;i&lt;10;i++)&amp;#123; 3. ley q = i; 4. a[i]=function()&amp;#123;console.log(q)&amp;#125; 5. &amp;#125; 6. a[6]() //这里会输出 6 let声明的变量仅在块级作用域有效，所以这里的i只在本轮循环有效果，每次循环的i其实都是一个新的变量 function 声明/*定义一个函数 */ //one: function mysqrt(x)&amp;#123;//使用此声明则函数名与函数初始化块均“提前”到脚本或函数的顶部 return Math.sqrt(x*x); &amp;#125; //two var mysqrt = function(x)&amp;#123;return Math.sqrt(x*x);&amp;#125;//使用此声明则仅有变量声明“提前”到脚本或函数的顶部，初始化体仍在原来的位置 for-in for-in 会跳过null、undefined 只遍历可枚举的（包含继承的属性名） /*使用for-in 变量数组元素 */ var o = &amp;#123;x:1,y:2,z:3&amp;#125; var a = [],i = 0//声明一个数组与一个变量 for(a[i++]in o); continue,break带标签的continue,break作用相同，均是跳转到指定循环（均不得跳转至所属函数边界，即所属函数外） mainloop: while(token!=null)&amp;#123; continue mainloop; &amp;#125; mainloop: while(token!=null)&amp;#123; break mainloop;//mainloop为自定义标记 &amp;#125; with语句检索对象列表，解析变量名 /*用于简化代码*/ with(document.forms[0])&amp;#123; name.value=&quot;&quot;; address.value=&quot;&quot;; email.value=&quot;&quot;; &amp;#125; /*简化前*/ var f = document.form[0]; f.name.value=&quot;&quot;; f.address.value=&quot;&quot;; f.email.value=&quot;&quot;; 操作符===严格相等 比较过程中没有类型的转换，两个值类型不同则其不等 值为null或undefined则其不等 均是相同的布尔值则相等 其中一个值为NaN则不等** == 值为null或undefined则其相等 两个不同类型的值转换后相等则其相等（如：true转换为1 false转换为0 再进行比较） in 左操作数是一个字符串或可以转换为字符串，有操作数是一个对象 如右侧对象包含左侧操作数，表达式返回true var a = &amp;#123;x:a&amp;#125; &quot;x&quot; in a; //true instanceof 如左侧对象是右侧类的实例，表达式将返回true var mynew = new Date(); mynew instanceof Date;//返回true null、undefined null是一个特殊对象（非对象），多用来表示字符串、数字、对象得无值。 undefined（未定义） 表示属性或元素不存在 ===可区分null与undefined，而==则不行 类型转换x+&quot;&quot;//等价于String(x) +x//等价于Number(x) !!x//等价于Boolean(x) 对象向字符串转换 有toString则通过此方法将其变为字符串，无toString则通过ValueOf，二者均无则报错。 空数组向数值转换结果为0 异常处理 throw 抛出异常 try&amp;#123;/*可能出现异常的代码*/&amp;#125; catch()&amp;#123;/*对异常的处理*/&amp;#125; finally&amp;#123;/*不管发不发生异常都执行的语句*/&amp;#125;","categories":[{"name":"JS","slug":"JS","permalink":"https://main2035.github.io/categories/JS/"}],"tags":[{"name":"JS基础","slug":"JS基础","permalink":"https://main2035.github.io/tags/JS%E5%9F%BA%E7%A1%80/"}]},{"title":"JS作用域","slug":"JS-01","date":"2020-10-16T14:49:11.599Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/JS-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/JS-01/","excerpt":"","text":"编译JavaScript是编译型语言，不同的是JavaScript的代码编译发生在代码执行前的几微秒内 LHS与RHSLHS查找的目的为了赋值 RHS查找的目的是为了引用值 作用域作用域查找从词法作用域（即最内部作用域）开始逐层向上查找，直到匹配到或触顶为止 全局变量会自动成为全局对象，因此可通过 window.a（a是要访问的变量）访问被同名变量屏蔽的全局变量 欺骗词法使用欺骗词法则JavaScript引擎无法对作用域栈进行优化 eval /*在函数内动态创建变量b，屏蔽全局变量b*/ function foo(str,a)&amp;#123; eval(str);//动态创建代码 console.log(a,b); &amp;#125; var b = 2; foo(&quot;var b = 3;&quot;,1); /*结果：1,3*/ with/*重复引用对象的多个属性*/ var obj = &amp;#123; a = 1, b = 2 &amp;#125;; with(obj)&amp;#123; a = 3; b = 4; c = 5;//对象obj中没有c，返回undefined,并创建一个全局变量c = 5; &amp;#125; 函数作用域函数中的作用域属于局部作用域，函数具有很好的闭包性，隐藏该隐藏的。 JavaScript中多 立即执行函数表达式（IIFE） 两种方式 /*ONE*/ (function foo()&amp;#123; var a = 2; console.log(a); &amp;#125;)(); /*TWO*/ (function foo()&amp;#123; var a = 2; console.log(a); &amp;#125;());//括号位置不同哦 传入参数 /*传入window对象，引用全局变量*/ var a = 2; (function (global)&amp;#123;//匿名IIFE var a = 3; console.log(a); console.log(global.a); &amp;#125;)(window) /*结果：3,2*/ 提升变量声明、函数声明均会提升到顶部。 let声明的块中的变量声明不会提升，而是保留在原地 函数先于变量提升，函数表达式不会被提升，后面的函数声明覆盖前面的函数声明 function a()&amp;#123; console.log(1); &amp;#125; a = function a()&amp;#123;//不会被提升 console.log(2); &amp;#125; function a()&amp;#123; console.log(3); &amp;#125; a(); /*结果：3*/ 模块调用一个函数只返回其属性数据，而没有返回闭包对象（函数内的函数）的不是真模块 具有函数属性的对象不是真模块 /*一个模块*/ function CoolModule()&amp;#123; var something = &quot;so&quot;; var another = [1,2,3]; function doSomething()&amp;#123; console.log(something); &amp;#125; function doAnother()&amp;#123; console.log(another.join(&quot;!&quot;)); &amp;#125; return &amp;#123; doSomething:doSomething, doAnother:doAnother &amp;#125;; &amp;#125; var foo = CoolModule(); foo.doAnother(); foo.doSomething(); /*一个单例模式*/ var foo = (function CoolModule()&amp;#123; var something = &quot;so&quot;; var another = [1,2,3]; function doSomething()&amp;#123; console.log(something); &amp;#125; function doAnother()&amp;#123; console.log(another.join(&quot;!&quot;)); &amp;#125; return &amp;#123; doSomething:doSomething, doAnother:doAnother &amp;#125;; &amp;#125;)(); foo.doAnother(); foo.doSomething(); /*结果： 1！2！3！ so */ ES6 模块未来模块机制（python）//a.js,一个单独的模块 function a()&amp;#123; ... &amp;#125; export a;//将当前模块的（变量、函数）标识符导出为公共API //b.js import a from &quot;a&quot;;//从模块a，导入函数a() function b()&amp;#123; ... &amp;#125; export b;","categories":[{"name":"JS","slug":"JS","permalink":"https://main2035.github.io/categories/JS/"}],"tags":[{"name":"JS基础","slug":"JS基础","permalink":"https://main2035.github.io/tags/JS%E5%9F%BA%E7%A1%80/"}]},{"title":"JDBC基本使用","slug":"JDBC-01","date":"2020-10-16T14:49:11.597Z","updated":"2020-09-21T01:08:35.945Z","comments":true,"path":"2020/10/16/JDBC-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/JDBC-01/","excerpt":"","text":"前言：Java DataBase Connectivity Java 数据库连接， Java语言操作数据库，是官方（sun公司）定义的一套操作所有关系型数据库的接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。 步骤： 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar 1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下 2.右键–&gt;Add As Library 注册驱动 获取数据库连接对象 Connection 定义sql 获取执行sql语句的对象 Statement 执行sql，接受返回结果 处理结果 释放资源 Statement：执行sql的对象增删改查 boolean execute(String sql) ：可以执行任意的sql int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句,即增删改查 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。 package cn.itcast.jdbc; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.sql.Statement; public class TestJDBC1&amp;#123; public static void main(String[] args) &amp;#123; Statement stmt = null; Connection conn = null; try &amp;#123; //注册驱动 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //定义sql语句 String sql = &quot;insert into account values(null,&#39;王五&#39;,3000)&quot;; //获取Connection对象 conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;); //获取执行sql的对象Statement stmt = conn.createStatement(); //执行sql int count = stmt.executeUpdate(sql);//此方法将返回执行后的影响行数数值,此方法用于执行增、删、改、查的sql语句 // int count = stmt.execute(sql) ：可以执行任意的sql System.out.println(count); if(count &gt; 0)&amp;#123; System.out.println(&quot;添加成功！&quot;); &amp;#125;else&amp;#123; System.out.println(&quot;添加失败！&quot;); &amp;#125; &amp;#125; catch (ClassNotFoundException e) &amp;#123; e.printStackTrace(); &amp;#125; catch (SQLException throwables) &amp;#123; throwables.printStackTrace(); &amp;#125;finally &amp;#123; //释放资源 if (stmt != null)&amp;#123; try &amp;#123; stmt.close(); &amp;#125; catch (SQLException throwables) &amp;#123; throwables.printStackTrace(); &amp;#125; &amp;#125; if (conn != null)&amp;#123; try &amp;#123; conn.close(); &amp;#125; catch (SQLException throwables) &amp;#123; throwables.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; &amp;#125; 封装数据库表到对象 ResultSet executeQuery(String sql) ：执行DQL（select)语句 （可用来将表数据封装为对象并装载入集合） package cn.itcast.jdbc; import java.sql.*; import java.util.ArrayList; import java.util.Date; import java.util.List; public class TestJDBC3 &amp;#123; public List&lt;Emp&gt; findAll()&amp;#123; Statement stmt = null; Connection conn = null; ResultSet rs = null; List&lt;Emp&gt;list = null; try &amp;#123; //注册驱动 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //定义sql语句 String sql = &quot;select * from emp&quot;; //获取Connection对象 conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;,&quot;root&quot;,&quot;root&quot;); //获取执行sql的对象Statement stmt = conn.createStatement(); //执行sql rs = stmt.executeQuery(sql); Emp emp = null; list = new ArrayList&lt;Emp&gt;(); while (rs.next())&amp;#123; // * boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true // * getXxx(参数):获取数据 // * Xxx：代表数据类型 如： int getInt() , String getString() // * 参数： // 1. int：代表列的编号,从1开始 如： getString(1) // 2. String：代表列名称。 如： getDouble(&quot;balance&quot;) //获取数据 int id = rs.getInt(&quot;id&quot;); String ename = rs.getString(&quot;ename&quot;); int job_id = rs.getInt(&quot;job_id&quot;); int mgr = rs.getInt(&quot;mgr&quot;); Date joindate = rs.getDate(&quot;joindate&quot;); double salary = rs.getDouble(&quot;salary&quot;); double bonus = rs.getDouble(&quot;bonus&quot;); int dept_id = rs.getInt(&quot;dept_id&quot;); //创建Emp对象并赋值 emp = new Emp(); emp.setId(id); emp.setEname(ename); emp.setJob_id(job_id); emp.setMgr(mgr); emp.setSalary(salary); emp.setBonus(bonus); emp.setDept_id(dept_id); //装载进集合 list.add(emp); &amp;#125; &amp;#125; catch (ClassNotFoundException e) &amp;#123; e.printStackTrace(); &amp;#125; catch (SQLException throwables) &amp;#123; throwables.printStackTrace(); &amp;#125;finally &amp;#123; //释放资源 if (rs != null)&amp;#123; try &amp;#123; rs.close(); &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if (stmt != null)&amp;#123; try &amp;#123; stmt.close(); &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; return list; &amp;#125; public static void main(String[] args) &amp;#123; var a = new TestJDBC3(); System.out.println(a.findAll()); &amp;#125; &amp;#125; JDBC控制事务 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。 操作： 开启事务 提交事务 回滚事务 使用Connection对象来管理事务 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务 在执行sql之前开启事务 提交事务：commit() 当所有sql都执行完提交事务 回滚事务：rollback() 在catch中回滚事务 public class JDBCDemo10 &amp;#123; public static void main(String[] args) &amp;#123; Connection conn = null; PreparedStatement pstmt1 = null; PreparedStatement pstmt2 = null; try &amp;#123; //1.获取连接 conn = JDBCUtils.getConnection(); //开启事务 conn.setAutoCommit(false); //2.定义sql //2.1 张三 - 500 String sql1 = &quot;update account set balance = balance - ? where id = ?&quot;; //2.2 李四 + 500 String sql2 = &quot;update account set balance = balance + ? where id = ?&quot;; //3.获取执行sql对象 pstmt1 = conn.prepareStatement(sql1); pstmt2 = conn.prepareStatement(sql2); //4. 设置参数 pstmt1.setDouble(1,500); pstmt1.setInt(2,1); pstmt2.setDouble(1,500); pstmt2.setInt(2,2); //5.执行sql pstmt1.executeUpdate(); // 手动制造异常 int i = 3/0; pstmt2.executeUpdate(); //提交事务 conn.commit(); &amp;#125; catch (Exception e) &amp;#123; //事务回滚 try &amp;#123; if(conn != null) &amp;#123; conn.rollback(); &amp;#125; &amp;#125; catch (SQLException e1) &amp;#123; e1.printStackTrace(); &amp;#125; e.printStackTrace(); &amp;#125;finally &amp;#123; JDBCUtils.close(pstmt1,conn); JDBCUtils.close(pstmt2,null); &amp;#125; &amp;#125; &amp;#125; ​ 使用数据库连接池通常我们获取一个数据库连接对象，在使用后将其释放。这需要繁琐的申请与释放操作，而我们有更好的方案：即从数据库连接池处获取对象，在不使用的时候再将其归还到连接池中。 Druid：数据库连接池实现技术，由阿里巴巴提供的 操作步骤： 导入jar包 定义配置文件：以properties形式，可叫任意名称，可放在任意目录下。 加载配置文件。Properties 获取数据库连接池对象：通过工厂来来获取 DruidDataSourceFactory 获取连接：getConnection 导入并使用jar包 Properties文件配置driverClassName=com.mysql.jdbc.Driver url=jdbc:mysql://127.0.0.1:3306/db4 username=root password=root initialSize=1//初始数据库连接数 maxActive=10//最大数据库连接数 maxWait=3000 数据库连接池的工具类package cn.itcast.utils; import com.alibaba.druid.pool.DruidDataSourceFactory; import javax.sql.DataSource; import java.io.IOException; import java.sql.Connection; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.util.Properties; /** * Druid连接池的工具类 */ public class JDBCUtils &amp;#123; //1.定义成员变量 DataSource private static DataSource ds ; static&amp;#123; try &amp;#123; //1.加载配置文件 Properties pro = new Properties(); pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;)); //2.获取DataSource ds = DruidDataSourceFactory.createDataSource(pro); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; catch (Exception e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; /** * 获取连接 */ public static Connection getConnection() throws SQLException &amp;#123; return ds.getConnection(); &amp;#125; /** * 释放资源 */ public static void close(Statement stmt,Connection conn)&amp;#123; /* if(stmt != null)&amp;#123; try &amp;#123; stmt.close(); &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if(conn != null)&amp;#123; try &amp;#123; conn.close();//归还连接 &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125;*/ close(null,stmt,conn); &amp;#125; public static void close(ResultSet rs , Statement stmt, Connection conn)&amp;#123; if(rs != null)&amp;#123; try &amp;#123; rs.close(); &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if(stmt != null)&amp;#123; try &amp;#123; stmt.close(); &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if(conn != null)&amp;#123; try &amp;#123; conn.close();//归还连接 &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; /** * 获取连接池方法 */ public static DataSource getDataSource()&amp;#123; return ds; &amp;#125; &amp;#125; 使用连接池工具类 package cn.itcast.datasource.druid; import cn.itcast.utils.JDBCUtils; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; /** * 使用新的工具类 */ public class DruidDemo2 &amp;#123; public static void main(String[] args) &amp;#123; /* * 完成添加操作：给account表添加一条记录 */ Connection conn = null; PreparedStatement pstmt = null; try &amp;#123; //1.获取连接 conn = JDBCUtils.getConnection(); //2.定义sql String sql = &quot;insert into account values(null,?,?)&quot;; //3.获取pstmt对象 pstmt = conn.prepareStatement(sql); //4.给？赋值 pstmt.setString(1,&quot;王五&quot;); pstmt.setDouble(2,3000); //5.执行sql int count = pstmt.executeUpdate(); System.out.println(count); &amp;#125; catch (SQLException e) &amp;#123; e.printStackTrace(); &amp;#125;finally &amp;#123; //6. 释放资源 JDBCUtils.close(pstmt,conn); &amp;#125; &amp;#125; &amp;#125; Spring JDBC Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发 步骤： 导入jar包(注意版本要匹配，如mysql版本，数据库驱动版本等) 创建JdbcTemplate对象。依赖于数据源DataSource JdbcTemplate template = new JdbcTemplate(ds); 调用JdbcTemplate的方法来完成CRUD的操作 update():执行DML语句。增、删、改语句 queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合 注意：这个方法查询的结果集长度只能是1 queryForList():查询结果将结果集封装为list集合 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中 query():查询结果，将结果封装为JavaBean对象 query的参数：RowMapper 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装 new BeanPropertyRowMapper&lt;类型&gt;(类型.class) queryForObject：查询结果，将结果封装为对象 一般用于聚合函数的查询 import cn.itcast.domain.Emp; import cn.itcast.utils.JDBCUtils; import org.junit.Test; import org.springframework.jdbc.core.BeanPropertyRowMapper; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.jdbc.core.RowMapper; import java.sql.Date; import java.sql.ResultSet; import java.sql.SQLException; import java.util.List; import java.util.Map; public class JdbcTemplateDemo2 &amp;#123; //Junit单元测试，可以让方法独立执行 //1. 获取JDBCTemplate对象 private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource()); /** * 1. 修改1号数据的 salary 为 10000 */ @Test public void test1()&amp;#123; //2. 定义sql String sql = &quot;update emp set salary = 10000 where id = 1001&quot;; //3. 执行sql int count = template.update(sql); System.out.println(count); &amp;#125; /** * 2. 添加一条记录 */ @Test public void test2()&amp;#123; String sql = &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;; int count = template.update(sql, 1015, &quot;郭靖&quot;, 10); System.out.println(count); &amp;#125; /** * 3.删除刚才添加的记录 */ @Test public void test3()&amp;#123; String sql = &quot;delete from emp where id = ?&quot;; int count = template.update(sql, 1015); System.out.println(count); &amp;#125; /** * 4.查询id为1001的记录，将其封装为Map集合 * 注意：这个方法查询的结果集长度只能是1 */ @Test public void test4()&amp;#123; String sql = &quot;select * from emp where id = ? or id = ?&quot;; Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002); System.out.println(map); //&amp;#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&amp;#125; &amp;#125; /** * 5. 查询所有记录，将其封装为List */ @Test public void test5()&amp;#123; String sql = &quot;select * from emp&quot;; List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql); for (Map&lt;String, Object&gt; stringObjectMap : list) &amp;#123; System.out.println(stringObjectMap); &amp;#125; &amp;#125; /** * 6. 查询所有记录，将其封装为Emp对象的List集合 */ @Test public void test6()&amp;#123; String sql = &quot;select * from emp&quot;; List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &amp;#123; @Override public Emp mapRow(ResultSet rs, int i) throws SQLException &amp;#123; Emp emp = new Emp(); int id = rs.getInt(&quot;id&quot;); String ename = rs.getString(&quot;ename&quot;); int job_id = rs.getInt(&quot;job_id&quot;); int mgr = rs.getInt(&quot;mgr&quot;); Date joindate = rs.getDate(&quot;joindate&quot;); double salary = rs.getDouble(&quot;salary&quot;); double bonus = rs.getDouble(&quot;bonus&quot;); int dept_id = rs.getInt(&quot;dept_id&quot;); emp.setId(id); emp.setEname(ename); emp.setJob_id(job_id); emp.setMgr(mgr); emp.setJoindate(joindate); emp.setSalary(salary); emp.setBonus(bonus); emp.setDept_id(dept_id); return emp; &amp;#125; &amp;#125;); for (Emp emp : list) &amp;#123; System.out.println(emp); &amp;#125; &amp;#125; /** * 6. 查询所有记录，将其封装为Emp对象的List集合 */ @Test public void test6_2()&amp;#123; String sql = &quot;select * from emp&quot;; List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class)); for (Emp emp : list) &amp;#123; System.out.println(emp); &amp;#125; &amp;#125; /** * 7. 查询总记录数 */ @Test public void test7()&amp;#123; String sql = &quot;select count(id) from emp&quot;; Long total = template.queryForObject(sql, Long.class); System.out.println(total); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/tags/Java/"},{"name":"JDBC","slug":"JDBC","permalink":"https://main2035.github.io/tags/JDBC/"}]},{"title":"Stack,Queue,Tree","slug":"Java-Stack-01","date":"2020-10-16T14:49:11.596Z","updated":"2021-08-04T12:24:51.402Z","comments":true,"path":"2020/10/16/Java-Stack-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-Stack-01/","excerpt":"","text":"graph LR A[扫描输入] --&gt;B&amp;#123;是否为运算符&amp;#125; B --&gt; |是运算符| C&amp;#123;运算符栈是否为空&amp;#125; B --&gt;|是数值| D&amp;#123;判断是否为多位数&amp;#125; D --&gt;|是多位| J[扫描到运算符为止] J --&gt; K D --&gt;|是个位| K[压入数值栈] C --&gt;|为空| E[将运算符压入栈] C --&gt;|不为空| F&amp;#123;比较运算符优先级&amp;#125; F --&gt;|优先级高于栈顶| G[入栈] F --&gt;|优先级低于栈顶| H[弹出运算符栈与数值栈中元素] H --&gt;|进行计算| I[将计算结果与比较优先级的运算符分别入栈] O[中缀表达式算法] 中缀表达式转后缀表达式方法：为每个运算符旁的数值加括号如:a+b*c; 改为 (a+(b*c))，再将运算符移到括号外，得到后缀表达式 abc*+ 转为算法： 新建运算符栈，从左至右扫描， 运算符栈空时直接入栈，不为空则比较优先级，优先级大于时直接入栈，等于或小于时先（原栈顶元素）出栈，（档期元素）再入栈 到达末尾（即扫描完毕时），弹出所有运算符并追加到表达式末尾 后缀表达式求值：遇到符号弹出数值进行求值（数值优先处于符号右方） 栈数组实现：package com.pdf.data; import org.junit.Test; public class ArrayStack &amp;#123; /*字段分别为：栈大小、模拟栈的数组、栈顶*/ private int maxsize; private int[] stack; private int top = -1; public ArrayStack(int maxsize)&amp;#123; this.maxsize = maxsize; stack = new int[this.maxsize]; &amp;#125; /*The stack is full*/ public boolean isFull()&amp;#123; return top+1 == maxsize; &amp;#125; /*The stack is void*/ public boolean isEmpty()&amp;#123; return top == -1; &amp;#125; /*Press-in data*/ public void push(int value)&amp;#123; if (isFull())&amp;#123; System.out.println(&quot;Stack fill&quot;); return; &amp;#125; top++; stack[top]=value; &amp;#125; /*Pop-up data*/ public int pop()&amp;#123; if (isEmpty())&amp;#123; throw new RuntimeException(&quot;Stack Void&quot;); &amp;#125; int value = stack[top]; top--; return value; &amp;#125; /*print Stack*/ public void list()&amp;#123; if (isEmpty())&amp;#123; System.out.println(&quot;Stack void&quot;); return; &amp;#125; for (int i=top;i&gt;=0;i--)&amp;#123; System.out.printf(&quot;stack[%d]=%d\\n&quot;,i,stack[i]); &amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; var mStack = new ArrayStack(100); for (int i = 1; i &lt; 101; i++) &amp;#123; assert i &lt; 50:i;//断言 mStack.push(i); &amp;#125; mStack.list(); &amp;#125; &amp;#125; 链表实现：package com.abstrast.data.stack; import java.util.EmptyStackException; /*链表实现栈*/ public final class LinkedStack&lt;T&gt; implements StackInterface&lt;T&gt; &amp;#123; private Node topNode;//指向栈顶 public LinkedStack()&amp;#123; topNode = null; &amp;#125; /*节点类*/ private class Node&amp;#123; private T data; private Node next; Node(T newEntry,Node topNode)&amp;#123; data = newEntry; next = topNode; &amp;#125; public Node getNextNode() &amp;#123; return next; &amp;#125; public T getData() &amp;#123; return data; &amp;#125; &amp;#125; @Override public void push(T newEntry) &amp;#123; // Node newNode = new Node(newEntry,topNode); // topNode = newNode; topNode = new Node(newEntry,topNode);// 压入数据时直接指向栈顶 &amp;#125; @Override public T pop() &amp;#123; T top = peek(); topNode = topNode.getNextNode(); return top; &amp;#125; @Override public T peek() &amp;#123;//查看栈顶元素 if(isEmpty()) throw new EmptyStackException(); else return topNode.getData(); &amp;#125; @Override public boolean isEmpty() &amp;#123; return topNode ==null;//顶栈为null则为空 &amp;#125; @Override public void clear() &amp;#123;//没有顶栈则栈为空 topNode = null; &amp;#125; // public static void main(String[] args) &amp;#123; // var a = new LinkedStack&lt;String&gt;(); // a.push(&quot;a&quot;); // a.push(&quot;b&quot;); // a.push(&quot;c&quot;); // a.push(&quot;d&quot;); // a.peek(); // a.pop(); // a.peek(); // &amp;#125; &amp;#125; 动态栈import java.util.Iterator; /** * 这是一个动态数组栈*/ public class ResizingArrayStack&lt;Item&gt; implements Iterable&lt;Item&gt;&amp;#123;//实现Iterable&lt;Item&gt;接口后可以使用foreach遍历 private Item[] a = (Item[]) new Object[1];//栈元素数量，通过强制类型转换Object数组实现泛型号=数组 private int N = 0;//元素数量 public boolean isEmpty()&amp;#123; return N == 0; &amp;#125; public int size()&amp;#123; return N; &amp;#125; /*实现动态数组*/ private void resize(int max)&amp;#123; Item[] temp = (Item[]) new Object[max];//创建空间大小为2倍的新数组 for (int i = 0; i &lt; N; i++)&amp;#123;//复制数组元素 temp[i] = a[i]; &amp;#125; a = temp; &amp;#125; public void push(Item item)&amp;#123; if (N == a.length)resize(2*a.length);//数组存储空间不足，则扩大为2倍 a[N++] = item;//每次添加元素N+1 &amp;#125; public Item pop()&amp;#123; Item item = a[--N]; a[N] = null;//防止游离元素，即不在栈中，但仍存在于数组中的元素 if (N &gt; 0&amp;&amp;N == a.length/4)resize(a.length/2);//如果该数组仅仅占用1/4,那么缩小它 return item; &amp;#125; public Iterator&lt;Item&gt; iterator()&amp;#123;//实现了一个迭代器 return new ReverseArrayIterator(); &amp;#125; private class ReverseArrayIterator implements Iterator&lt;Item&gt;&amp;#123; private int i = N; public boolean hasNext()&amp;#123;return i &gt; 0;&amp;#125; public Item next()&amp;#123;return a[--i];&amp;#125;//next即越过并返回这个元素， // 数组下标从0开始，而数组中只要存在元素那么数量便从1开始，故需要减1（否则下标N下的元素不存在则返回null） public void remove()&amp;#123;&amp;#125; &amp;#125; public static void main(String[] args) &amp;#123; long startTime = System.currentTimeMillis(); // 获取开始时间 var a = new ResizingArrayStack&lt;String&gt;(); for (int i = 0; i &lt; 1000000; i++) &amp;#123; a.push(&quot;abc&quot;+i); &amp;#125; for (String s: a) System.out.println(s); long endTime = System.currentTimeMillis(); // 获取结束时间 System.out.println(&quot;程序运行时间： &quot; + (endTime - startTime) + &quot;ms&quot;); &amp;#125; &amp;#125; 队列链表队列package cn.three.cloth.queue; import java.util.Iterator; import java.util.NoSuchElementException; public class ListQueue &lt;T&gt;implements Iterable&lt;T&gt;&amp;#123; /**分析： * 队列实现需包含：队列长度、头指针，尾指针、结点类。 *功能:增、删、清空查看队列、队列有无、查看队列头元素 * 迭代：队列类实现可迭代接口Iterable&lt;T&gt;，再由内部类实现迭代器。 */ private int length; private Node head,tail; /*节点类*/ private class Node&lt;T&gt;&amp;#123; private T data; private Node next; Node(T data) &amp;#123; this.data = data; &amp;#125; @Override public String toString() &amp;#123; return &quot;Node(&quot; + &quot;data=&quot; + data + &quot;, next=&quot; + next + &#39;)&#39;; &amp;#125; &amp;#125; /*判断队列是否为空*/ private boolean isEmpty()&amp;#123; // return length!=0;也可以哦 return head == null; &amp;#125; /*添加元素*/ private void enqueue(T x)&amp;#123; if (isEmpty())&amp;#123; tail = head = new Node&lt;T&gt;(x); length++; &amp;#125;else &amp;#123; tail = tail.next = new Node&lt;T&gt;(x);//尾指针与与原尾结点均指向新结点 length++; &amp;#125; &amp;#125; /*删除元素*/ public T dequeue()&amp;#123; if (isEmpty())&amp;#123; throw new UnsupportedOperationException(&quot;队列无数据&quot;); &amp;#125;else&amp;#123; T returnValue = (T) head.data; head = head.next; length--; return returnValue; &amp;#125; &amp;#125; /*清空队列*/ public void makeEmpty()&amp;#123; head=tail=null; length=0; &amp;#125; /*返回头元素*/ public T getHead() throws Exception &amp;#123; if (isEmpty())&amp;#123; throw new Exception(&quot;队列无数据&quot;); &amp;#125;else&amp;#123; return (T) head.data; &amp;#125; &amp;#125; /*查看队列中所有元素*/ public void showQueue()&amp;#123; Node head =this.head;//引用head便于进行遍历 while (head.next!=null)&amp;#123; System.out.println(head.data); head=head.next; &amp;#125; System.out.println(head.data); &amp;#125; /*迭代器*/ @Override public Iterator&lt;T&gt; iterator() &amp;#123; return (Iterator&lt;T&gt;) new DequeueIterator();//返回迭代器对象 &amp;#125; private class DequeueIterator implements Iterator&lt;T&gt;&amp;#123; private Node current = head; public boolean hasNext() &amp;#123; return current != null; &amp;#125; public void remove() &amp;#123; throw new UnsupportedOperationException( &quot;remove is not supported!&quot;); &amp;#125; public T next() &amp;#123; if (!hasNext()) throw new NoSuchElementException(); T item = (T) current.data; current = current.next; return item; &amp;#125; &amp;#125; @Override public String toString() &amp;#123; return &quot;ListQueue&amp;#123;&quot; + &quot;length=&quot; + length + &quot;, head=&quot; + head + &quot;, tail=&quot; + tail + &#39;&amp;#125;&#39;; &amp;#125; /*测试*/ public static void main(String[] args) throws Exception &amp;#123; var a = new ListQueue&lt;Integer&gt;();//创建队列 for (int i = 0; i &lt; 10; i++) &amp;#123;//添加元素 a.enqueue(i); &amp;#125; for (int i: a) &amp;#123; System.out.println(i); &amp;#125; //覆盖toString只为了更直观的查看队列 System.out.println(a+&quot;&quot;); &amp;#125; &amp;#125; 数组模拟队列&amp;&amp;单例模式import org.junit.Test; public class ArrayQueue &amp;#123; private static int maxsize; /*分别创建最大容量、头指针、尾指针、数组*/ private int front = -1; private int rear = -1; private int[] arr; private static ArrayQueue MYARRAYQUEUE; private ArrayQueue(int maxsize)&amp;#123; this.maxsize = maxsize; arr = new int[maxsize]; &amp;#125; /*队列是否为满*/ public boolean isFull()&amp;#123; return rear == maxsize-1;//因为尾、头部指针开始均指向-1，故容量减1为满 &amp;#125; /*队列是否为空*/ public boolean isEmpty()&amp;#123; return rear == front; &amp;#125; /*添加数据到队列*/ public void addQueue(int n)&amp;#123; if (isFull())&amp;#123; System.out.println(&quot;挤挤总会有的？？？&quot;); return; &amp;#125; arr[++rear]=n;// 写入尾部 &amp;#125; public static synchronized ArrayQueue getArrayQueue(int a)&amp;#123; if(null != MYARRAYQUEUE)return MYARRAYQUEUE; maxsize = a; MYARRAYQUEUE = new ArrayQueue(a); return MYARRAYQUEUE; &amp;#125; public void showQueue() &amp;#123; var a = ArrayQueue.getArrayQueue(maxsize); // 遍历 if (isEmpty()) &amp;#123; System.out.println(&quot;队列空的，没有数据~~&quot;); return; &amp;#125; for (int i = 0; i &lt; arr.length; i++) &amp;#123; System.out.printf(&quot;arr[%d]=%d\\n&quot;, i, arr[i]); &amp;#125; &amp;#125; &amp;#125; class RunArrayQueue extends Thread&amp;#123; @Override public void run() &amp;#123; var a = ArrayQueue.getArrayQueue(4); a.showQueue(); a.addQueue(4); a.addQueue(5); a.addQueue(6); a.showQueue(); &amp;#125; public static void main(String[] args) &amp;#123; var a = new RunArrayQueue(); var b = new RunArrayQueue(); a.start(); b.start(); &amp;#125; &amp;#125; 环形队列public class CircleArrayQueue &amp;#123; private static int maxsize; /*分别创建最大容量、头指针、尾指针、数组*/ private int front = 0; private int rear = 0; private int[] arr; private CircleArrayQueue(int maxsize) &amp;#123; this.maxsize = maxsize; arr = new int[maxsize]; &amp;#125; /*队列是否为满*/ public boolean isFull() &amp;#123; return (rear + 1) % maxsize == front; //无论指针怎么移动，rear总与最后一个元素间隔一格 &amp;#125; /*队列是否为空*/ public boolean isEmpty() &amp;#123; return rear == front; &amp;#125; /*添加数据到队列*/ public void addQueue(int n) &amp;#123; if (isFull()) &amp;#123; System.out.println(&quot;挤挤总会有的？？？&quot;); return; &amp;#125; arr[rear] = n; rear = (rear + 1) % maxsize; &amp;#125; /*取出数据*/ public int getQueue() &amp;#123; if (isEmpty())&amp;#123; throw new RuntimeException(&quot;队列为空你币没了&quot;); &amp;#125; int value = arr[front]; front = (front + 1)%maxsize; return value; &amp;#125; /*打印队列*/ public void showQueue() &amp;#123; // 遍历 if (isEmpty()) &amp;#123; System.out.println(&quot;队列空的，没有数据~~&quot;); return; &amp;#125; for (int i = 0; i &lt; front + size(); i++) &amp;#123; System.out.printf(&quot;arr[%d]=%d\\n&quot;, i%maxsize, arr[i%maxsize]); &amp;#125; &amp;#125; public int size()&amp;#123; return (rear + maxsize -front)%maxsize; &amp;#125; //显示队列头信息 public int headQueue()&amp;#123; if (isEmpty())&amp;#123; throw new RuntimeException(&quot;队列为空&quot;); &amp;#125; return arr[front]; &amp;#125; public static void main(String[] args) &amp;#123; var a = new CircleArrayQueue(10); &amp;#125; &amp;#125; 双向队列不带头结点package cn.three.cloth.queue; import java.util.Iterator; import java.util.NoSuchElementException; public class ListQueue2&lt;T&gt;implements Iterable&lt;T&gt;&amp;#123; /**双向队列不带头结点 */ private int length; private Node head,tail; /*节点类*/ private class Node&lt;T&gt;&amp;#123; private T data; private Node next; private Node prev; Node(T data) &amp;#123; this.data = data; &amp;#125; @Override public String toString() &amp;#123; return &quot;Node&amp;#123;&quot; + &quot;data=&quot; + data + &quot;, next=&quot; + next + &quot;, prev=&quot; + prev + &#39;&amp;#125;&#39;; &amp;#125; &amp;#125; /*判断队列是否为空*/ private boolean isEmpty()&amp;#123; // return length==0;也可以哦 return head == null; &amp;#125; /*队头添加元素*/ private void addHead(T x)&amp;#123; if (isEmpty())&amp;#123; tail = head = new Node(x); length++; &amp;#125; else &amp;#123; Node newNode = head;//指向原head指向的首结点 head = new Node(x);//将head指向添加的新结点 //head.prev=null;类中的成员字段会自动初始化为null，故不必设置新首结点prev=null head.next = newNode;//将新结点的next指向原首节点 newNode.prev = head;//原首结点的prev指向新结点 length++;//队列长度+1 &amp;#125; &amp;#125; /*队尾添加元素*/ private void addTail(T x)&amp;#123; if (isEmpty())&amp;#123; tail = head = new Node(x); length++; &amp;#125; else &amp;#123; Node newNode = tail; tail = new Node(x); //tail.next=null;类中的成员字段会自动初始化为null，故不必设置新尾结点next=null newNode.next = tail;//原尾结点的next指向新结点 tail.prev=newNode;//新结点的prev指向原尾结点 length++; &amp;#125; &amp;#125; /*队头删除元素*/ public T removeHead()&amp;#123; if (isEmpty())&amp;#123;//队列无元素抛出异常 throw new UnsupportedOperationException(&quot;队列无数据&quot;); &amp;#125;else&amp;#123; T returnValue = (T) head.data; head = head.next; length--; //如果删除时队列中只存在一个元素则head=null，否则令首节点的prev=null if (length==0)&amp;#123; tail=head=null; &amp;#125;else &amp;#123; head.prev=null; &amp;#125; return returnValue; &amp;#125; &amp;#125; /*队尾删除元素*/ public T removeTail()&amp;#123; if (isEmpty())&amp;#123; throw new UnsupportedOperationException(&quot;队列无数据&quot;); &amp;#125;else&amp;#123; T returnValue = (T) tail.data; tail = tail.prev; length--; if (length==0)&amp;#123; tail=head=null; &amp;#125;else &amp;#123; tail.next=null; &amp;#125; return returnValue;//返回被删除结点的值 &amp;#125; &amp;#125; /*清空队列*/ public void makeEmpty()&amp;#123; head=tail=null; length=0; &amp;#125; /*返回头元素*/ public T getHead() throws Exception &amp;#123; if (isEmpty())&amp;#123; throw new Exception(&quot;队列无数据&quot;); &amp;#125;else&amp;#123; return (T) head.data; &amp;#125; &amp;#125; /*查看队列中所有元素*/ public void showQueue()&amp;#123; Node head =this.head;//引用head便于进行遍历 while (head.next!=null)&amp;#123; System.out.println(head.data); head=head.next; &amp;#125; System.out.println(head.data); &amp;#125; /*迭代器*/ @Override public Iterator&lt;T&gt; iterator() &amp;#123; return (Iterator&lt;T&gt;) new DequeueIterator();//返回迭代器对象 &amp;#125; private class DequeueIterator implements Iterator&lt;T&gt;&amp;#123; private ListQueue2.Node current = head;//指向首结点 public boolean hasNext() &amp;#123; return current != null; &amp;#125; public void remove() &amp;#123; throw new UnsupportedOperationException( &quot;remove is not supported!&quot;); &amp;#125; public T next() &amp;#123; if (!hasNext()) throw new NoSuchElementException(); T item = (T) current.data;//存储当前结点中的值 current = current.next;//更新指针，指向下一个结点 return item;//返回当前结点中的值 &amp;#125; &amp;#125; @Override public String toString() &amp;#123; return &quot;ListQueue&amp;#123;&quot; + &quot;length=&quot; + length + &quot;, head=&quot; + head + &quot;, tail=&quot; + tail + &#39;&amp;#125;&#39;; &amp;#125; /*测试*/ public static void main(String[] args) throws Exception &amp;#123; var a = new ListQueue2&lt;Integer&gt;();//创建队列 for (int i = 0; i &lt; 10; i++) &amp;#123;//添加元素 a.addHead(i); a.removeTail(); &amp;#125;a.removeTail(); for (int i: a) &amp;#123; System.out.println(i); &amp;#125; //覆盖toString只为了更直观的查看队列 System.out.println(a+&quot;&quot;); &amp;#125; &amp;#125; ###带头结点 package cn.three.cloth.queue; import java.util.Iterator; import java.util.NoSuchElementException; public class ListQueue3&lt;T&gt;implements Iterable&lt;T&gt;&amp;#123; /**双向队列带头结点的 * 引入一个头结点nil， 初始化时nil的prev和next分别指向自身。用于判断队列是否为空 * 加入新元素以后只需要操作新增节点，nil 和 nil的下一个节点。 */ private int length; private Node headNode; /*节点类*/ private class Node&lt;T&gt;&amp;#123; private T data; private Node next; private Node prev; //使用了默认结点构造器 @Override public String toString() &amp;#123; return &quot;Node&amp;#123;&quot; + &quot;data=&quot; + data + &quot;, next=&quot; + next + &quot;, prev=&quot; + prev + &#39;&amp;#125;&#39;; &amp;#125; &amp;#125; public ListQueue3()&amp;#123; headNode = new Node(); headNode.next = headNode; headNode.prev = headNode; &amp;#125; /*判断队列是否为空*/ private boolean isEmpty()&amp;#123; // return length==0;也可以哦 return headNode.next == headNode; &amp;#125; /*队头添加元素 * 添加的所有元素都将位于头结点之后*/ private void addHead(T x)&amp;#123; Node newNode = new Node();//创建新结点 newNode.data=x; //以下操作顺序不能颠倒 //先将新结点的前驱为头结点，后继为头结点的原后继 newNode.prev=headNode; newNode.next=headNode.next; //再将头结点的原后继的前驱、改为新结点 headNode.next.prev=newNode; headNode.next=newNode;//最后将头结点的后继为新结点 length++;//队列长度+1 &amp;#125; /*队尾添加元素 * 添加的所有元素都将位于头结点之前*/ private void addTail(T x)&amp;#123; Node newNode = new Node();//创建新结点 newNode.data=x; newNode.next=headNode;//新结点的后继为头结点 //以下操作顺序不能颠倒 newNode.prev=headNode.prev;//现将新结点的前驱为头结点的前驱 headNode.prev.next=newNode;//再将头结点前驱的后继为新结点 headNode.prev=newNode;//最后将头结点前驱改为新结点 length++;//队列长度+1 &amp;#125; /*队头删除元素*/ public T removeHead()&amp;#123; if (isEmpty()) throw new NoSuchElementException(&quot;Can&#39;t remove from empty deque&quot;); Node del = headNode.next;//指向将要删除的结点 T retunValue = (T) del.data; //将即将被删除元素的后继结点的前驱改为头结点，并将头结点的后继设为此结点 del.next.prev = headNode; headNode.next = del.next; length--; return retunValue; &amp;#125; /*队尾删除元素*/ public T removeTail()&amp;#123; if (isEmpty()) throw new NoSuchElementException(&quot;Can&#39;t remove from empty deque&quot;); Node del = headNode.prev;//指向将要删除的结点 T retunValue = (T) del.data; //将即将被删除元素的后继结点的前驱改为头结点，并将头结点的后继设为此结点 del.prev.next=headNode; headNode.prev=del.prev; length--; return retunValue; &amp;#125; /*清空队列*/ public void makeEmpty()&amp;#123; headNode.next=null; length=0; &amp;#125; /*迭代器*/ @Override public Iterator&lt;T&gt; iterator() &amp;#123; return (Iterator&lt;T&gt;) new DequeueIterator();//返回迭代器对象 &amp;#125; private class DequeueIterator implements Iterator&lt;T&gt;&amp;#123; private ListQueue3.Node current = headNode.next;//指向头结点 public boolean hasNext() &amp;#123; return current != headNode; &amp;#125; public void remove() &amp;#123; throw new UnsupportedOperationException( &quot;remove is not supported!&quot;); &amp;#125; public T next() &amp;#123; if (!hasNext()) throw new NoSuchElementException(); T item = (T) current.data;//存储当前结点中的值 current = current.next;//更新指针，指向下一个结点 return item;//返回当前结点中的值 &amp;#125; &amp;#125; /*测试*/ public static void main(String[] args) throws Exception &amp;#123; var a = new ListQueue3&lt;Integer&gt;();//创建队列 for (int i = 0; i &lt; 10; i++) &amp;#123; a.addTail(i); &amp;#125;a.removeHead(); for (int i: a) &amp;#123; System.out.println(i); &amp;#125; &amp;#125; &amp;#125; 树二叉树二叉树结点类： package cn.three.cloth.Tree; /** * 二叉树结点类*/ public class Node&lt;T&gt;&amp;#123; private int no; private T element; private Node left; private Node right; public Node(int no, T element) &amp;#123; this.no = no; this.element = element; &amp;#125; public int getNo() &amp;#123; return no; &amp;#125; public T getElement() &amp;#123; return element; &amp;#125; public Node getLeft() &amp;#123; return left; &amp;#125; public Node getRight() &amp;#123; return right; &amp;#125; public void setNo(int no) &amp;#123; this.no = no; &amp;#125; public void setElement(T element) &amp;#123; this.element = element; &amp;#125; public void setLeft(Node left) &amp;#123; this.left = left; &amp;#125; public void setRight(Node right) &amp;#123; this.right = right; &amp;#125; @Override public String toString() &amp;#123; return &quot;Node&amp;#123;&quot; + &quot;no=&quot; + no + &quot;, element=&quot; + element +&quot;&amp;#125;&quot;; &amp;#125; /*前、中、后序遍历开始*/ //前序遍历 public void preOrder()&amp;#123; System.out.println(this); if (this.left != null)&amp;#123; this.left.preOrder(); &amp;#125; if (this.right != null)&amp;#123; this.right.preOrder(); &amp;#125; &amp;#125; //中序遍历 public void infixOrder()&amp;#123; if (this.left != null)&amp;#123; this.left.infixOrder(); &amp;#125; System.out.println(this); if (this.right != null)&amp;#123; this.right.infixOrder(); &amp;#125; &amp;#125; //后序遍历 public void postOrder()&amp;#123; if (this.left != null)&amp;#123; this.left.postOrder(); &amp;#125; if (this.right != null)&amp;#123; this.right.postOrder(); &amp;#125; System.out.println(this); &amp;#125; /*前、中、后序查找开始*/ //前序查找、 public Node preOrderSearch(int no)&amp;#123; if (this.no == no)&amp;#123; return this; &amp;#125; Node resNode = null; if (this.left != null)&amp;#123; resNode = this.left.preOrderSearch(no); &amp;#125; if (resNode != null)&amp;#123; return resNode; &amp;#125; if (this.right != null)&amp;#123; resNode = this.right.preOrderSearch(no); &amp;#125; return resNode; &amp;#125; //中序查找 public Node infixOrderSearch(int no)&amp;#123; Node resNode = null; if (this.left != null)&amp;#123; resNode = this.left.infixOrderSearch(no); &amp;#125; if (resNode != null)&amp;#123; return resNode; &amp;#125; if (this.no == no)&amp;#123; return this; &amp;#125; if (this.right != null)&amp;#123; resNode = this.right.infixOrderSearch(no); &amp;#125; return resNode; &amp;#125; //后序查找 public Node postOrderSearch(int no)&amp;#123; Node resNode = null; if (this.left != null)&amp;#123; resNode = this.left.postOrderSearch(no); &amp;#125; if (resNode != null)&amp;#123; return resNode; &amp;#125; if (this.right != null)&amp;#123; resNode = this.right.postOrderSearch(no); &amp;#125; if (this.no == no)&amp;#123; return this; &amp;#125; return resNode; &amp;#125; /*删除结点*/ public void delNode(int no)&amp;#123; //判断当前结点的左、右结点是否为要删除结点 if (this.left !=null &amp;&amp; this.left.no == no)&amp;#123; this.left = null; return; &amp;#125; if (this.right !=null &amp;&amp; this.right.no == no)&amp;#123; this.right = null; return; &amp;#125; //··左、右递归删除 if (this.left != null)&amp;#123; this.left.delNode(no); &amp;#125;; if (this.right != null)&amp;#123; this.right.delNode(no); &amp;#125;; &amp;#125; &amp;#125; 二叉树： package cn.three.cloth.Tree; /** * 二叉树*/ public class BinaryTree1 &amp;#123; private Node root; public void setRoot(Node root) &amp;#123; this.root = root; &amp;#125; /*前、中、后序遍历*/ public void preOrder()&amp;#123; if (this.root != null)&amp;#123; this.root.preOrder(); &amp;#125;else System.out.println(&quot;当前二叉树为空&quot;); &amp;#125; public void infixOrder()&amp;#123; if (this.root != null)&amp;#123; this.root.infixOrder(); &amp;#125;else System.out.println(&quot;当前二叉树为空&quot;); &amp;#125; public void postOrder()&amp;#123; if (this.root != null)&amp;#123; this.root.postOrder(); &amp;#125;else System.out.println(&quot;当前二叉树为空&quot;); &amp;#125; /*前、中、后序遍历*/ public Node preOrderSearch(int no)&amp;#123; if (root != null)&amp;#123; return root.preOrderSearch(no); &amp;#125;else &amp;#123; return null; &amp;#125; &amp;#125; public Node infixOrderSearch(int no)&amp;#123; if (root != null)&amp;#123; return root.infixOrderSearch(no); &amp;#125;else &amp;#123; return null; &amp;#125; &amp;#125; public Node postOrderSearch(int no)&amp;#123; if (root != null)&amp;#123; return root.postOrderSearch(no); &amp;#125;else &amp;#123; return null; &amp;#125; &amp;#125; public void delNode(int no)&amp;#123; if (root != null)&amp;#123;//该树不为空树 if (root.getNo() == no)&amp;#123;//该树根结点是否为目标结点 root = null; &amp;#125;else &amp;#123; root.delNode(no);//递归删除（Node类中的）以此结点为根结点。沿着左结点遍历查询删除，如未找到则再沿着根结点的右结点遍历查询 &amp;#125; &amp;#125;else &amp;#123; System.out.println(&quot;该树为空！&quot;); &amp;#125; &amp;#125; &amp;#125; 应用稀疏数组 public class SparseArray &amp;#123; public static void main(String[] args) &amp;#123; // 创建一个原始的二维数组 11 * 11 // 0: 表示没有棋子， 1 表示 黑子 2 表蓝子 int chessArr1[][] = new int[11][11]; chessArr1[1][2] = 1; chessArr1[2][3] = 2; chessArr1[4][5] = 2; // 输出原始的二维数组 System.out.println(&quot;原始的二维数组~~&quot;); for (int[] row : chessArr1) &amp;#123; for (int data : row) &amp;#123; System.out.printf(&quot;%d\\t&quot;, data); &amp;#125; System.out.println(); &amp;#125; // 将二维数组 转 稀疏数组的思 // 1. 先遍历二维数组 得到非0数据的个数 int sum = 0; for (int i = 0; i &lt; 11; i++) &amp;#123; for (int j = 0; j &lt; 11; j++) &amp;#123; if (chessArr1[i][j] != 0) &amp;#123; sum++; &amp;#125; &amp;#125; &amp;#125; // 2. 根据非0数据个数再加一（记录总行、列、有效值个数）创建对应的稀疏数组 int sparseArr[][] = new int[sum + 1][3]; // 给稀疏数组赋值 sparseArr[0][0] = 11; sparseArr[0][1] = 11; sparseArr[0][2] = sum; // 遍历二维数组，将非0的值存放到 sparseArr中 int count = 0; //count 用于记录是第几个非0数据 for (int i = 0; i &lt; 11; i++) &amp;#123; for (int j = 0; j &lt; 11; j++) &amp;#123; if (chessArr1[i][j] != 0) &amp;#123; count++; sparseArr[count][0] = i;//行 sparseArr[count][1] = j;//列 sparseArr[count][2] = chessArr1[i][j];//值 &amp;#125; &amp;#125; &amp;#125; // 输出稀疏数组的形式 System.out.println(); System.out.println(&quot;得到稀疏数组为~~~~&quot;); for (int i = 0; i &lt; sparseArr.length; i++) &amp;#123; System.out.printf(&quot;%d\\t%d\\t%d\\t\\n&quot;, sparseArr[i][0], sparseArr[i][1], sparseArr[i][2]); &amp;#125; System.out.println(); //将稀疏数组 --》 恢复成 原始的二维数组 /* * 1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的 chessArr2 = int [11][11] 2. 在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可. */ //1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组 int chessArr2[][] = new int[sparseArr[0][0]][sparseArr[0][1]]; //2. 在读取稀疏数组后几行的数据(从第二行开始)，并赋给 原始的二维数组 即可 for(int i = 1; i &lt; sparseArr.length; i++) &amp;#123; chessArr2[sparseArr[i][0]][sparseArr[i][1]] = sparseArr[i][2]; &amp;#125; // 输出恢复后的二维数组 System.out.println(); System.out.println(&quot;恢复后的二维数组&quot;); for (int[] row : chessArr2) &amp;#123; for (int data : row) &amp;#123; System.out.printf(&quot;%d\\t&quot;, data); &amp;#125; System.out.println(); &amp;#125; &amp;#125; &amp;#125;","categories":[{"name":"dataStructure","slug":"dataStructure","permalink":"https://main2035.github.io/categories/dataStructure/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/tags/Java/"}]},{"title":"","slug":"javadm-04","date":"2020-10-16T14:49:11.595Z","updated":"2020-09-15T02:21:01.000Z","comments":true,"path":"2020/10/16/javadm-04/","link":"","permalink":"https://main2035.github.io/2020/10/16/javadm-04/","excerpt":"","text":"单元测试单元测试时，程序运行的成功与否并不依靠返回值、打印语句来判断;通常我们使用断言而非print来展示返回值 Assert.assertEquals(-1,value)//预测变量value的值为-1 assert i &lt; 50:i;//断言i的值小于50（如i大于等于50将发生异常并返回实际i的值） idea中运行结果为绿色就是运行成功，红色则失败。 @Before在测试方法前自动执行，通常用来申请资源 @After在测试方法后自动执行，通常用来释放资源 注解元注解 import java.lang.annotation.*; //元注解：对注解进行注解 @Target(ElementType.TYPE)//该注解可以被写在什么位置，取值如：类、方法、字段、包等 @Retention(RetentionPolicy.RUNTIME)//表明注解保留的时间段如：运行时即存入字节码并为JVM所接收、仅保留到字节码、保留到编译时（前） @Documented//注解可以被抽取到javadoc文档中 @Inherited//该注解是否可以被继承 public @interface MyAnnotation &amp;#123; String value(); int a(); &amp;#125; @MyAnnotation(value = &quot;value&quot;,a=0) public class MyAnnotationTest &amp;#123; &amp;#125; 用于描述注解的注解","categories":[],"tags":[]},{"title":"代理模式","slug":"Javadm-03","date":"2020-10-16T14:49:11.593Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Javadm-03/","link":"","permalink":"https://main2035.github.io/2020/10/16/Javadm-03/","excerpt":"","text":"只要代理对象以某种方式代表具体实现的方法调用，那么基本思想就算实现了。而，拥有一个公共接口是很方便的，因此具体实现必须实现代理对象调用的所有方法。 // patterns/ProxyDemo.java // Simple demonstration of the Proxy pattern interface ProxyBase &amp;#123; void f(); void g(); void h(); &amp;#125; class Proxy implements ProxyBase &amp;#123; private ProxyBase implementation;//这是一个私有字段 Proxy() &amp;#123; implementation = new Implementation();//创建所代理类（Implementation）的对象 &amp;#125; /*覆盖方法并调用所代理类（Implementation）的方法*/ @Override public void f() &amp;#123; implementation.f(); &amp;#125; @Override public void g() &amp;#123; implementation.g(); &amp;#125; @Override public void h() &amp;#123; implementation.h(); &amp;#125; &amp;#125; class Implementation implements ProxyBase &amp;#123; /*与代理类实现同一个接口,必须实现（覆盖）接口中所有方法哦/ @Override public void f() &amp;#123; System.out.println(&quot;Implementation.f()&quot;); &amp;#125; @Override public void g() &amp;#123; System.out.println(&quot;Implementation.g()&quot;); &amp;#125; @Override public void h() &amp;#123; System.out.println(&quot;Implementation.h()&quot;); &amp;#125; &amp;#125; public class ProxyDemo &amp;#123; public static void main(String[] args) &amp;#123; Proxy p = new Proxy(); p.f(); p.g(); p.h(); &amp;#125; &amp;#125; /* Output: Implementation.f() Implementation.g() Implementation.h() */ /*总结： 1.代理模式中通常代理类与被代理类实现一个公共接口利于交流。 2.在创建代理类对象的时，被代理类的对象也将同时创建（因为new被代理类写在代理类的构造器中）并为代理类的一个私有变量引用 3. so，想要调用被代理类的方法只需使用代理类 私有变量.被代理类的方法 （即在代理类中使用方法调用被代理类的方法）*/","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java设计模式","slug":"Java设计模式","permalink":"https://main2035.github.io/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"单例模式","slug":"Javadm-02","date":"2020-10-16T14:49:11.592Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Javadm-02/","link":"","permalink":"https://main2035.github.io/2020/10/16/Javadm-02/","excerpt":"","text":"最简单的设计模式，它是一种仅提供一个对象实例的方法。 interface Resource &amp;#123; int getValue(); void setValue(int x); &amp;#125; /* * 由于这不是从Cloneable基类继承而且没有添加可克隆性， * 因此将其设置为final可防止通过继承添加可克隆性。 * 这也实现了线程安全的延迟初始化： */ final class Singleton &amp;#123; private static final class ResourceImpl implements Resource &amp;#123; private int i; private ResourceImpl(int i) &amp;#123;//只有一个私有构造器供静态内部类调用 this.i = i; &amp;#125; /*两个属性*/ public synchronized int getValue() &amp;#123; return i; &amp;#125; public synchronized void setValue(int x) &amp;#123; i = x; &amp;#125; &amp;#125; private static class ResourceHolder &amp;#123; private static Resource resource = new ResourceImpl(47); &amp;#125; public static Resource getResource() &amp;#123;//此公共静态方法供外部调用，返回对象 return ResourceHolder.resource; &amp;#125; &amp;#125; public class SingletonPattern &amp;#123; public static void main(String[] args) &amp;#123; Resource r = Singleton.getResource(); System.out.println(r.getValue()); Resource s2 = Singleton.getResource(); s2.setValue(9); System.out.println(r.getValue()); try &amp;#123; // 不能这么做，会发生：compile-time error（编译时错误）. // Singleton s3 = (Singleton)s2.clone(); &amp;#125; catch(Exception e) &amp;#123; throw new RuntimeException(e); &amp;#125; &amp;#125; &amp;#125; /* Output: 47 9 */","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java设计模式","slug":"Java设计模式","permalink":"https://main2035.github.io/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"状态模式","slug":"Javadm-01","date":"2020-10-16T14:49:11.590Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Javadm-01/","link":"","permalink":"https://main2035.github.io/2020/10/16/Javadm-01/","excerpt":"","text":"将代理对象在生命周期内从一个实现切换到另一种实现 package cn; //patterns/StateDemo.java //状态模式的简单演示 interface StateBase &amp;#123; void f(); void g(); void h(); void changeImp(StateBase newImp); &amp;#125; /** * 多个操作类，多个代理类; * 一个共同接口一脉相承，中途变法自家兄弟*/ class State implements StateBase &amp;#123; private StateBase implementation; State(StateBase imp) &amp;#123; implementation = imp;//引用new Implementation1() new Implementation2() &amp;#125; @Override public void changeImp(StateBase newImp) &amp;#123; implementation = newImp; &amp;#125; @Override public void f() &amp;#123; implementation.f(); &amp;#125; @Override public void g() &amp;#123; implementation.g(); &amp;#125; public void h() &amp;#123; implementation.h(); &amp;#125; &amp;#125; class Implementation1 implements StateBase &amp;#123; @Override public void f() &amp;#123; System.out.println(&quot;Implementation1.f()&quot;); &amp;#125; @Override public void g() &amp;#123; System.out.println(&quot;Implementation1.g()&quot;); &amp;#125; @Override public void h() &amp;#123; System.out.println(&quot;Implementation1.h()&quot;); &amp;#125; @Override public void changeImp(StateBase newImp) &amp;#123; //改变传入的参数，即改变private StateBase implementation字段的引用，以达到在代理对象的生命周期内从一个实现切换到另一种实现的目的 &amp;#125; &amp;#125; class Implementation2 implements StateBase &amp;#123; @Override public void f() &amp;#123; System.out.println(&quot;Implementation2.f()&quot;); &amp;#125; @Override public void g() &amp;#123; System.out.println(&quot;Implementation2.g()&quot;); &amp;#125; @Override public void h() &amp;#123; System.out.println(&quot;Implementation2.h()&quot;); &amp;#125; @Override public void changeImp(StateBase newImp) &amp;#123; &amp;#125; &amp;#125; public class StateDemo &amp;#123; static void test(StateBase b) &amp;#123; b.f(); b.g(); b.h(); &amp;#125; public static void main(String[] args) &amp;#123; StateBase b = new State(new Implementation1()); test(b); b.changeImp(new Implementation2());//注意此时传入的对象 test(b); b.changeImp(new Implementation1()); test(b); &amp;#125; &amp;#125; /* Output: Implementation1.f() Implementation1.g() Implementation1.h() Implementation2.f() Implementation2.g() Implementation2.h() Implementation1.f() Implementation1.g() Implementation1.h() */","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java设计模式","slug":"Java设计模式","permalink":"https://main2035.github.io/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"1~4章","slug":"Java-11","date":"2020-10-16T14:49:11.589Z","updated":"2020-10-13T06:30:10.317Z","comments":true,"path":"2020/10/16/Java-11/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-11/","excerpt":"","text":"JavaBeans模式 当我们需要传入多个参数构造对象时（比如有时传入2个参数，有时传入20个参数），可采用“重叠构造器模式”即利用“重载”机制。 但如果需要传入的参数是2-2000个呢？ 我们总不能复写2000个构造器吧。 我们可采用: JavaBeans模式 用一个无参数的构造器创建对象，然后通过多个set方法设置参数。 public class myJavaBeans &amp;#123; private int id; private String name; private String sex; /*更多字段省略*/ public myJavaBeans() &amp;#123; &amp;#125; public void setId(int id) &amp;#123; this.id = id; &amp;#125; public void setName(String name) &amp;#123; this.name = name; &amp;#125; public void setSex(String sex) &amp;#123; this.sex = sex; &amp;#125; &amp;#125; 这个方法模式存在线程安全 下面有一种Builder模式可保证线程安全 Builder模式 使用静态内部类（静态工厂方法）设置属性（参数），最后创建类（返回其父类的对象）完成对象初始化。 public class myBuilder &amp;#123; private int id; private String name; private String sex; public static class Builder &amp;#123;//静态内部类只会被加载一次 private int id; private String name; private String sex; public Builder() &amp;#123; &amp;#125; public Builder setId(int id) &amp;#123; this.id = id; return this;//返回this，用于实现链接式调用 &amp;#125; public Builder setName(String name) &amp;#123; this.name = name; return this; &amp;#125; public Builder setSex(String sex) &amp;#123; this.sex = sex; return this; &amp;#125; //通过此方法返回内部类对象，此时内部类对象 public myBuilder builder()&amp;#123; return new myBuilder(this); &amp;#125; &amp;#125; private myBuilder(Builder builder) &amp;#123; //构造器传入静态内部类builder对象，对myBuilder进行初始化。 this.id = builder.id; this.name = builder.name; this.sex = builder.sex; &amp;#125; public static void main(String[] args) &amp;#123; myBuilder demoMyBuilder = new myBuilder.Builder().setId(0).setName(&quot;张三&quot;).setSex(&quot;男&quot;).builder(); //此内部类的set方法返回其本身，故可以将多个set方法调用链接起来 System.out.println(demoMyBuilder.sex); System.out.println(demoMyBuilder.id); System.out.println(demoMyBuilder.name); &amp;#125; &amp;#125; 使用泛型构建任何对象 public interface Builder1&lt;T&gt; &amp;#123; public T build(); &amp;#125; 单例模式Singleton 仅设置一个私有构造器，使用公共的final静态字段构造对象。 public class Elvis &amp;#123; public static final Elvis INSTANCE = new Elvis();//加载类时将自动创建对象 private Elvis()&amp;#123;&amp;#125; public void leaveTheBuilding()&amp;#123;&amp;#125; &amp;#125; 通过静态工厂方法:设置一个私有构造器，一个私有final静态字段（构造对象），最后通过一个静态方法返回final静态字段。 class Elvis1&amp;#123; //1.字段私有化 private static final Elvis1 INSTANCE = new Elvis1(); //2.构造器私有化 private Elvis1()&amp;#123;&amp;#125; //2.静态工厂方法返回对象引用 public static Elvis1 getInstance()&amp;#123;return INSTANCE;&amp;#125; public void leaveTheBuilding()&amp;#123;&amp;#125; &amp;#125; 消除过期元素import java.lang.reflect.Array; import java.util.Arrays; import java.util.EmptyStackException; public class Stack &amp;#123; private Object[] elements; private static final int DEFAULT_INITIAL_CAPACITY = 16; private int size = 0; public Stack()&amp;#123; elements = new Object[DEFAULT_INITIAL_CAPACITY]; &amp;#125; //动态数组 private void ensureCapacity()&amp;#123; if (elements.length == size)&amp;#123; elements = Arrays.copyOf(elements,2*size+1); &amp;#125; &amp;#125; //添加元素 public void push(Object e)&amp;#123; ensureCapacity();//先判断数组是否有空间（空间不足则扩展空间） elements[size++] = e; &amp;#125; //弹出元素 // public Object pop()&amp;#123; // if (size == 0)&amp;#123;//栈为空抛出异常 // throw new EmptyStackException(); // &amp;#125; // return elements[--size]; // //注意：即使连续使用多个pop()方法，经历--size的元素仍然存在于数组中 // &amp;#125; public Object pop()&amp;#123; if (size == 0)&amp;#123; throw new EmptyStackException(); &amp;#125; Object result = elements[--size]; elements[size] = null;//将索引赋值为null，消除过期元素 return result; &amp;#125; &amp;#125; 使类与成员的可访问性最小化 创建类时不声明则默认为缺省即包访问级别，声明为protected时仅可被子类、同一包内的类访问。 子类覆盖父类方法时访问级别不得低于其父类 闭包性：public&lt;default（缺省级别，默认）&lt;protected&lt;private private与protected不能用来修饰类； 只有同一包内的另一个类迫切需要访问一个成员时，我们才会将private修改为protected。 在公共类中使用访问方法而非公共 域 将公共类字段私有化，通过set、get方法对其进行修改、访问。 可使用不可变的公共字段：public final int ID; 使可变性最小化 字段采用是 private final修饰，提供创建新对象的方法而不提供修改的方法,修改时返回新对象。 public final class Complex &amp;#123; private final double re; private final double im; public Complex(double re, double im) &amp;#123; this.re = re; this.im = im; &amp;#125; public Complex add(Complex o)&amp;#123;//修改时返回新对象 return new Complex(re-o.re,im+o.re); &amp;#125; &amp;#125; .字段采用是 private final修饰，有仅一个私有构造器，通过静态工厂方法返回对象 public final class Complex &amp;#123; private final double re; private final double im; private Complex(double re, double im) &amp;#123; this.re = re; this.im = im; &amp;#125; public static Complex valueOf(double re, double im)&amp;#123; return new Complex(re,im); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"EffectiveJava","slug":"EffectiveJava","permalink":"https://main2035.github.io/tags/EffectiveJava/"}]},{"title":"浅拷贝与深拷贝","slug":"Java-10","date":"2020-10-16T14:49:11.587Z","updated":"2020-09-27T15:25:01.375Z","comments":true,"path":"2020/10/16/Java-10/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-10/","excerpt":"","text":"浅拷贝 浅拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该对象，如果字段类型是值类型（基本类型）的，那么对该字段进行复制；如果字段是引用类型的，则只复制该字段的引用而不复制引用指向的对象。此时新对象里面的引用类型字段相当于是原始对象里面引用的一个副本，原始对象与新对象里面的引用字段指向的是同一个对象。 验证： package com.data.test; public class Students implements Cloneable&amp;#123; //clone()方法是protected修饰的，因此需要实现Cloneable接口才能调用，同时需要覆写clone()方法才能调用。 private int id; private int age; private String name; private Teacher teacher; public Students(int id, int age, String name, Teacher teacher) &amp;#123; this.id = id; this.age = age; this.name = name; this.teacher = teacher; &amp;#125; public int getId() &amp;#123; return id; &amp;#125; public int getAge() &amp;#123; return age; &amp;#125; public String getName() &amp;#123; return name; &amp;#125; public Teacher getTeacher() &amp;#123; return teacher; &amp;#125; public void setId(int id) &amp;#123; this.id = id; &amp;#125; public void setAge(int age) &amp;#123; this.age = age; &amp;#125; public void setName(String name) &amp;#123; this.name = name; &amp;#125; public void setTeacher(Teacher teacher) &amp;#123; this.teacher = teacher; &amp;#125; @Override public String toString() &amp;#123; return &quot;Students&amp;#123;&quot; + &quot;id=&quot; + id + &quot;, age=&quot; + age + &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, teacher=&quot; + teacher + &#39;&amp;#125;&#39;; &amp;#125; @Override protected Object clone() throws CloneNotSupportedException &amp;#123; return super.clone(); &amp;#125; &amp;#125; package com.data.test; public class Teacher &amp;#123; private String name; private String six; public Teacher(String name, String six) &amp;#123; this.name = name; this.six = six; &amp;#125; public String getName() &amp;#123; return name; &amp;#125; public String getSix() &amp;#123; return six; &amp;#125; public void setName(String name) &amp;#123; this.name = name; &amp;#125; public void setSix(String six) &amp;#123; this.six = six; &amp;#125; @Override public String toString() &amp;#123; return &quot;Teacher&amp;#123;&quot; + &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, six=&#39;&quot; + six + &#39;\\&#39;&#39; + &#39;&amp;#125;&#39;; &amp;#125; &amp;#125; package com.data.test; public class TestObject &amp;#123; public static void main(String[] args) throws CloneNotSupportedException &amp;#123; var stu = new Students(01,20,&quot;张三&quot;,new Teacher(&quot;王五&quot;,&quot;男&quot;)); var stuClone =(Students)stu.clone(); /*判断此俩对象地址是否相同*/ if (stu.equals(stuClone))&amp;#123; System.out.println(&quot;地址相同&quot;); &amp;#125;else System.out.println(&quot;地址不同&quot;); /*toString查看数据*/ System.out.println(stuClone); System.out.println(stu); /*验证浅拷贝不拷贝对象仅仅拷贝对象引用*/ System.out.println(&quot;----------验证浅拷贝不拷贝对象仅仅拷贝对象引用-----------&quot;); var aT = stu.getTeacher(); aT.setName(&quot;尼古拉斯&quot;); System.out.println(stuClone); System.out.println(stu); /*验证浅拷贝会复制字段*/ System.out.println(&quot;----------验证浅拷贝会复制字段-----------&quot;); stu.setId(2); System.out.println(stu); System.out.println(stuClone); /*修改数据*/ System.out.println(&quot;----------通过改变引用的方式进行数据修改(不影响原始对象即被拷贝的对象)-----------&quot;); stu.setTeacher(new Teacher(&quot;李四&quot;,&quot;女&quot;)); //即使在clone后，stu与stuClone引用的仍是同一个对象，故可以通过改变引用的方式进行数据修改 System.out.println(stuClone); System.out.println(stu); &amp;#125; &amp;#125; 运行结果： 对象的toString未覆盖toString： 打印的是该对象的地址 覆盖toString： @Override public String toString() &amp;#123; return &quot;Students&amp;#123;&quot; + &quot;id=&quot; + id + &quot;, age=&quot; + age + &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, teacher=&quot; + teacher + &#39;&amp;#125;&#39;;//teacher是一个对象的引用 &amp;#125; 由于未覆盖teacher引用对象的toString，故打印出其引用对象的地址。 覆盖teacher引用对象的toString @Override public String toString() &amp;#123; return &quot;Teacher&amp;#123;&quot; + &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, six=&#39;&quot; + six + &#39;\\&#39;&#39; + &#39;&amp;#125;&#39;; &amp;#125; 运行结果： 深度拷贝 为类重写原始类与克隆类的clone方法，实现其自我克隆：这个缺点是：如果克隆类中也引用了一个对象则又需要对这个对象的类实现Cloneable接口并覆盖其clone方法，接着再克隆这个对象，周而复始，无往不利。 /*Students类的clone*/ @Override protected Object clone() throws CloneNotSupportedException &amp;#123; var cloneStudents = (Students)super.clone(); cloneStudents.teacher = (Teacher)teacher.clone(); //对新克隆的Students对象中的元素即teacher引用的对象进行克隆。 return cloneStudents; &amp;#125; /*Teacher类的clone*/ @Override protected Object clone() throws CloneNotSupportedException &amp;#123; return super.clone(); &amp;#125; 利用序列化： 一个用来序列化的类 package com.data.test; import java.io.*; public class Copy implements Serializable &amp;#123; private static final long serialVersionUID = 1L; protected &lt;T&gt;T copy() throws IOException, ClassNotFoundException &amp;#123; ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(this); /*反序列化*/ ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); return (T) ois.readObject(); &amp;#125; &amp;#125; 原始类与克隆类继承copy类（用于序列化操作） public class Students extends Copy&amp;#123;...&amp;#125; public class Teacher extends Copy&amp;#123;...&amp;#125; package com.data.test; import java.io.IOException; public class TestObject &amp;#123; public static void main(String[] args) throws CloneNotSupportedException, IOException, ClassNotFoundException &amp;#123; var stu = new Students(01,20,&quot;张三&quot;,new Teacher(&quot;王五&quot;,&quot;男&quot;)); Students stuClone =stu.copy(); /*判断此俩对象地址是否相同*/ if (stu.equals(stuClone))&amp;#123; System.out.println(&quot;地址相同&quot;); &amp;#125;else System.out.println(&quot;地址不同&quot;); /*toString查看数据*/ System.out.println(stuClone); System.out.println(stu); /*验证拷贝对象*/ System.out.println(&quot;----------验证拷贝对象-----------&quot;); var aT = stu.getTeacher(); aT.setName(&quot;尼古拉斯&quot;); System.out.println(stuClone); System.out.println(stu); /*验证复制字段*/ System.out.println(&quot;----------验证复制字段-----------&quot;); stu.setId(2); System.out.println(stu); System.out.println(stuClone); &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"IO流","slug":"Java-09","date":"2020-10-16T14:49:11.586Z","updated":"2020-09-01T06:18:41.000Z","comments":true,"path":"2020/10/16/Java-09/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-09/","excerpt":"","text":"流的分类：操作数据单位：字节流、字符流数据的流向：输入流、输出流流的角色：节点流、处理流 流的体系结构整体结构体系 主要流 抽象基类 节点流（或文件流） 缓冲流（处理流的一种） InputStream FileInputStream (read(byte[] buffer)) BufferedInputStream (read(byte[] buffer)) OutputStream FileOutputStream (write(byte[] buffer,0,len) BufferedOutputStream (write(byte[] buffer,0,len) / flush() Reader FileReader (read(char[] cbuf)) BufferedReader (read(char[] cbuf) / readLine()) Writer FileWriter (write(char[] cbuf,0,len) BufferedWriter (write(char[] cbuf,0,len) / flush() 节点流 直接作用于文件 字符流：FileReader与FileWriter @Test public void testFileReaderFileWriter() &amp;#123; FileReader fr = null;//为完美关闭流提供条件。 //由下方代码得出：代码执行到finally时，若未创建流且变量fr为非null值，则将引起异常（为创建流而关闭流） FileWriter fw = null; try &amp;#123; //1.创建File类的对象，指明读入和写出的文件 File srcFile = new File(&quot;hello.txt&quot;); File destFile = new File(&quot;hello2.txt&quot;); //不能使用字符流来处理图片等字节数据 // File srcFile = new File(&quot;爱情与友情.jpg&quot;); // File destFile = new File(&quot;爱情与友情1.jpg&quot;); //2.创建输入流和输出流的对象 fr = new FileReader(srcFile); fw = new FileWriter(destFile); //3.数据的读入和写出操作 char[] cbuf = new char[5]; int len;//记录每次读入到cbuf数组中的字符的个数 while((len = fr.read(cbuf)) != -1)&amp;#123;//从流fr中将 cbuf.length 个字节的数据读入一个 char 数组中 //直到因到达流末尾而返回 -1时停止循环。 fw.write(cbuf,0,len); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //4.关闭流资源 //方式一： // try &amp;#123; // if(fw != null) // fw.close(); // &amp;#125; catch (IOException e) &amp;#123; // e.printStackTrace(); // &amp;#125;finally&amp;#123; // try &amp;#123; // if(fr != null) // fr.close(); // &amp;#125; catch (IOException e) &amp;#123; // e.printStackTrace(); // &amp;#125; // &amp;#125; //方式二： try &amp;#123; if(fw != null)//确定创建了流 fw.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; try &amp;#123; if(fr != null) fr.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; 字节流：FileInputStream与FileOutputStream对于文本文件(.txt,.java,.c,.cpp…)，使用字符流处理; 对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理。 @Test public void testFileInputStream() &amp;#123; FileInputStream fis = null; try &amp;#123; //1. 造文件 File file = new File(&quot;hello.txt&quot;); //2.造流 fis = new FileInputStream(file); /*1、2这样写也可以fis = new FileInputStream(&quot;hello.txt&quot;);会自动包裹*/ //3.读数据 byte[] buffer = new byte[5]; //这是个byte数组哦 //由于中文在utf-8编码中占用3个字节（最高占用到6个字节），而每次读入5个字节可能发生乱码 int len;//记录每次读取的字节的个数 while((len = fis.read(buffer)) != -1)&amp;#123; String str = new String(buffer,0,len); //通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 String。 System.out.print(str); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; if(fis != null)&amp;#123; //4.关闭资源 try &amp;#123; fis.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; 处理流缓冲流作用于流，在流外再包裹一层流。 BufferedInputStream会一次性从文件中读取8192个(8Kb),存在缓冲区中,直到缓冲区装满了,才重新从文件中读取下一个8192个字节数组; 不会直接写到文件,先写到缓冲区中直到缓冲区写满,BufferedOutputStream才会把缓冲区中的数据一次性写到文件里; flush()刷新缓冲区，可以强制将缓冲区的内容全部写入输出流;close()方法关闭带缓冲流的流时，会自动刷新缓冲区后再关闭流。 字符流 @Test public void testBufferedReaderBufferedWriter()&amp;#123; BufferedReader br = null; BufferedWriter bw = null; try &amp;#123; //创建文件和相应的流 br = new BufferedReader(new FileReader(new File(&quot;dbcp.txt&quot;))); bw = new BufferedWriter(new FileWriter(new File(&quot;dbcp1.txt&quot;))); //读写操作 //方式一：使用char[]数组 // char[] cbuf = new char[1024]; // int len; // while((len = br.read(cbuf)) != -1)&amp;#123; // bw.write(cbuf,0,len); // // bw.flush(); // &amp;#125; //方式二：使用String String data; while((data = br.readLine()) != null)&amp;#123; //方法一： // bw.write(data + &quot;\\n&quot;);//data中不包含换行符 //方法二： bw.write(data);//data中不包含换行符 bw.newLine();//提供换行的操作 &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //关闭资源 if(bw != null)&amp;#123; try &amp;#123; bw.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if(br != null)&amp;#123; try &amp;#123; br.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; 字节流@Test public void BufferedStreamTest()&amp;#123; BufferedInputStream bis = null; BufferedOutputStream bos = null; try &amp;#123; //1.造文件 File srcFile = new File(&quot;爱情与友情.jpg&quot;); File destFile = new File(&quot;爱情与友情3.jpg&quot;); //2.造流 //2.1 造节点流 FileInputStream fis = new FileInputStream((srcFile)); FileOutputStream fos = new FileOutputStream(destFile); //2.2 造缓冲流 bis = new BufferedInputStream(fis); bos = new BufferedOutputStream(fos); //3.复制的细节：读取、写入 byte[] buffer = new byte[10]; int len; while((len = bis.read(buffer)) != -1)&amp;#123; bos.write(buffer,0,len); // bos.flush();//刷新缓冲区，可以强制将缓冲区的内容全部写入输出流 &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //4.资源关闭 //要求：先关闭外层的流，再关闭内层的流 if(bos != null)&amp;#123; try &amp;#123; bos.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if(bis != null)&amp;#123; try &amp;#123; bis.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; //说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略. // fos.close(); // fis.close(); &amp;#125; &amp;#125; 转换流提供字节流与字符流之间的转换 package com.atguigu.java; import org.junit.Test; import java.io.*; /** * 处理流之二：转换流的使用 * 1.转换流：属于字符流 * InputStreamReader：将一个字节的输入流转换为字符的输入流 * OutputStreamWriter：将一个字符的输出流转换为字节的输出流 * * 2. 解码：字节、字节数组 ---&gt;字符数组、字符串 * 编码：字符数组、字符串 ---&gt; 字节、字节数组 * * * 3.字符集 *ASCII：美国标准信息交换码。 用一个字节的7位可以表示。 ISO8859-1：拉丁码表。欧洲码表 用一个字节的8位表示。 GB2312：中国的中文编码表。最多两个字节编码所有字符 GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码 Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。 UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。 * * * @author shkstart * @create 2019 下午 4:25 */ public class InputStreamReaderTest &amp;#123; /* 此时处理异常的话，仍然应该使用try-catch-finally InputStreamReader的使用，实现字节的输入流到字符的输入流的转换 */ /* 此时处理异常的话，仍然应该使用try-catch-finally 综合使用InputStreamReader和OutputStreamWriter */ @Test public void test1() &amp;#123; FileInputStream fis = null; //在js中我们知道，catch也具有局部作用域，因此照本方法处理异常需要将引用流的变量在全局作用域声明 // （方法中的变量不会默认初始化为null，需要手动处理） InputStreamReader isr =null; try &amp;#123; fis = new FileInputStream(&quot;dbcp.txt&quot;); // InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集 //参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集 isr = new InputStreamReader(fis,&quot;UTF-8&quot;);//使用系统默认的字符集 char[] cbuf = new char[20]; int len; while((len = isr.read(cbuf)) != -1)&amp;#123; String str = new String(cbuf,0,len); System.out.print(str); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; if (isr!=null)&amp;#123; try &amp;#123; isr.close(); &amp;#125;catch (IOException e)&amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; @Test public void test2()&amp;#123; InputStreamReader isr = null; OutputStreamWriter osw = null; try &amp;#123; FileInputStream fis = new FileInputStream(new File(&quot;dbcp.txt&quot;)); FileOutputStream fos = new FileOutputStream(new File(&quot;dbcp_gbk.txt&quot;)); isr = new InputStreamReader(fis,&quot;utf-8&quot;); osw = new OutputStreamWriter(fos,&quot;gbk&quot;); //2.读写过程 char[] cbuf = new char[20]; int len; while((len = isr.read(cbuf)) != -1)&amp;#123; osw.write(cbuf,0,len); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //3.关闭资源 if (isr!=null)&amp;#123; try &amp;#123; isr.close(); &amp;#125;catch (IOException e)&amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if (isr!=null)&amp;#123; try &amp;#123; osw.close(); &amp;#125;catch (IOException e)&amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; &amp;#125; 对象流 将对象序列化为二进制流便于在网络中传输 序列化:用ObjectOutputStream类保存基本类型数据或对象的机制反序列化:用ObjectInputStream类读取基本类型数据或对象的机制 可序列化的类必须实现以下接口任意一个： Serializable 实现Serializable接口的类都有一个表示序列化版本标识符的静态变量:private static final long serialVersionUID;serialVersionUID用来进行版本控制;如果类没有显示定义这个静态常量,它的值是Java运行时环境根据类的内部细节自动生成的;若类的实例变量做了修改,serialVersionUID 可能发生变化。 Externalizable import java.io.Serializable; /** * Person需要满足如下的要求，方可序列化 * 1.需要实现接口：Serializable * 2.当前类提供一个全局常量：serialVersionUID * 3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性 * 也必须是可序列化的。（默认情况下，基本数据类型可序列化） * * * 补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量 * * * @author shkstart * @create 2019 上午 10:38 */ /*一个将用以序列化的类*/ public class Person implements Serializable&amp;#123;//实现接口：Serializable public static final long serialVersionUID = 475463534532L;//全局常量：serialVersionUID private String name; private int age; private int id; private Account acct; public Person(String name, int age, int id) &amp;#123; this.name = name; this.age = age; this.id = id; &amp;#125; public Person(String name, int age, int id, Account acct) &amp;#123; this.name = name; this.age = age; this.id = id; this.acct = acct; &amp;#125; @Override public String toString() &amp;#123; return &quot;Person&amp;#123;&quot; + &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, age=&quot; + age + &quot;, id=&quot; + id + &quot;, acct=&quot; + acct + &#39;&amp;#125;&#39;; &amp;#125; public int getId() &amp;#123; return id; &amp;#125; public void setId(int id) &amp;#123; this.id = id; &amp;#125; public String getName() &amp;#123; return name; &amp;#125; public void setName(String name) &amp;#123; this.name = name; &amp;#125; public int getAge() &amp;#123; return age; &amp;#125; public void setAge(int age) &amp;#123; this.age = age; &amp;#125; public Person(String name, int age) &amp;#123; this.name = name; this.age = age; &amp;#125; public Person() &amp;#123; &amp;#125; &amp;#125; class Account implements Serializable&amp;#123; public static final long serialVersionUID = 4754534532L; private double balance; @Override public String toString() &amp;#123; return &quot;Account&amp;#123;&quot; + &quot;balance=&quot; + balance + &#39;&amp;#125;&#39;; &amp;#125; public double getBalance() &amp;#123; return balance; &amp;#125; public void setBalance(double balance) &amp;#123; this.balance = balance; &amp;#125; public Account(double balance) &amp;#123; this.balance = balance; &amp;#125; &amp;#125; /*序列化操作开始*/ @Test public void testObjectOutputStream()&amp;#123; ObjectOutputStream oos = null; try &amp;#123; //1. oos = new ObjectOutputStream(new FileOutputStream(&quot;object.dat&quot;)); //2. oos.writeObject(new String(&quot;我爱北京天安门&quot;)); oos.flush();//刷新操作 oos.writeObject(new Person(&quot;王铭&quot;,23)); oos.flush(); oos.writeObject(new Person(&quot;张学良&quot;,23,1001,new Account(5000))); oos.flush(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; if(oos != null)&amp;#123; //3. try &amp;#123; oos.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; /* 反序列化：将磁盘文件中的对象还原为内存中的一个java对象 使用ObjectInputStream来实现 */ @Test public void testObjectInputStream()&amp;#123; ObjectInputStream ois = null; try &amp;#123; ois = new ObjectInputStream(new FileInputStream(&quot;object.dat&quot;)); Object obj = ois.readObject(); String str = (String) obj; Person p = (Person) ois.readObject();//注意之前创建的是Person的对象 Person p1 = (Person) ois.readObject(); System.out.println(str); System.out.println(p); System.out.println(p1); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; catch (ClassNotFoundException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; if(ois != null)&amp;#123; try &amp;#123; ois.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; 随机访问流 可读可写、可盐可甜 public RandomAccessFile(File file, String mode)public RandomAccessFile(String name, String mode)创建 RandomAccessFile 类实例需要指定一个 mode 参数,该参数指定 RandomAccessFile 的访问模式: r: 以只读方式打开 rw:打开以便读取和写入 rwd:打开以便读取和写入;同步文件内容的更新 rws:打开以便读取和写入;同步文件内容和元数据的更新 如果模式为只读r。则不会创建文件,而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。 如果模式为rw读写，如果文件不存在则会去创建文件。 @Test public void test1() &amp;#123; RandomAccessFile raf1 = null; RandomAccessFile raf2 = null; try &amp;#123; //1. raf1 = new RandomAccessFile(&quot;爱情与友情.jpg&quot;,&quot;r&quot;); raf2 = new RandomAccessFile(new File(&quot;爱情与友情12.jpg&quot;),&quot;rw&quot;); //2. byte[] buffer = new byte[1024]; int len; while((len = raf1.read(buffer)) != -1)&amp;#123; raf2.write(buffer,0,len); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; //3. if(raf1 != null)&amp;#123; try &amp;#123; raf1.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if(raf2 != null)&amp;#123; try &amp;#123; raf2.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; /*插入数据*/ @Test public void test2() throws IOException &amp;#123; RandomAccessFile raf1 = new RandomAccessFile(&quot;hello.txt&quot;,&quot;rw&quot;); raf1.seek(3);//将指针调到角标为3的位置 raf1.write(&quot;xyz&quot;.getBytes());//使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组 raf1.close(); &amp;#125; 字节流实现图片加密解密package com.atguigu.exer; import org.junit.Test; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; /** * @author shkstart * @create 2019 下午 4:08 */ public class PicTest &amp;#123; //图片的加密 @Test public void test1() &amp;#123; FileInputStream fis = null; FileOutputStream fos = null; try &amp;#123; fis = new FileInputStream(&quot;爱情与友情.jpg&quot;); fos = new FileOutputStream(&quot;爱情与友情secret.jpg&quot;); byte[] buffer = new byte[20]; int len; while ((len = fis.read(buffer)) != -1) &amp;#123; //字节数组进行修改 //错误的 // for(byte b : buffer)&amp;#123; // b = (byte) (b ^ 5); // &amp;#125; //正确的 for (int i = 0; i &lt; len; i++) &amp;#123; buffer[i] = (byte) (buffer[i] ^ 5); &amp;#125; fos.write(buffer, 0, len); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; if (fos != null) &amp;#123; try &amp;#123; fos.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if (fis != null) &amp;#123; try &amp;#123; fis.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; //图片的解密 @Test public void test2() &amp;#123; FileInputStream fis = null; FileOutputStream fos = null; try &amp;#123; fis = new FileInputStream(&quot;爱情与友情secret.jpg&quot;); fos = new FileOutputStream(&quot;爱情与友情4.jpg&quot;); byte[] buffer = new byte[20]; int len; while ((len = fis.read(buffer)) != -1) &amp;#123; //字节数组进行修改 //错误的 // for(byte b : buffer)&amp;#123; // b = (byte) (b ^ 5); // &amp;#125; //正确的 for (int i = 0; i &lt; len; i++) &amp;#123; buffer[i] = (byte) (buffer[i] ^ 5); &amp;#125; fos.write(buffer, 0, len); &amp;#125; &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; finally &amp;#123; if (fos != null) &amp;#123; try &amp;#123; fos.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; if (fis != null) &amp;#123; try &amp;#123; fis.close(); &amp;#125; catch (IOException e) &amp;#123; e.printStackTrace(); &amp;#125; &amp;#125; &amp;#125; &amp;#125; &amp;#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]},{"title":"Java泛型","slug":"Java-08","date":"2020-10-16T14:49:11.582Z","updated":"2020-08-30T10:48:30.000Z","comments":true,"path":"2020/10/16/Java-08/","link":"","permalink":"https://main2035.github.io/2020/10/16/Java-08/","excerpt":"","text":"泛型是编译时泛型，用于检查类型安全以及类型推断，虚拟机运行时已经被擦除； 泛型的类型参数T在编译后为Object类型； 泛型方法能使方法独立于类而产生变化。 泛型类/**泛型类*/ //此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型 //在实例化泛型类时，必须指定T的具体类型 public class Generic&lt;T&gt;&amp;#123; //key这个成员变量的类型为T由实例化时指定 private T key; public Generic(T value) &amp;#123; //只有方法所在类声明了T泛型类，那么成员方法才可接收一个T类型的参数 this.key = value; &amp;#125; public T getKey()&amp;#123; //这只是类中一个普通的成员方法，只不过其返回值是同泛型类T一样的类型 //如为public F getKey()，将发生异常 return key; &amp;#125; &amp;#125; 泛型接口/**泛型接口*/ //我们可以为接口传入无数个实参，形成无数种类型的Generator接口。 //定义一个泛型接口 public interface Generator&lt;T&gt; &amp;#123; public T next(); &amp;#125; //类实现泛型接口时，需将泛型的声明也一起加到类中 //即：class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;&amp;#123; //如果不声明泛型，如：class FruitGenerator implements Generator&lt;T&gt;，编译器会报错：&quot;Unknown class&quot;。 class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;&amp;#123; @Override public T next() &amp;#123; return null; &amp;#125; &amp;#125; 泛型方法/**泛型方法*/ //在泛型类中声明了一个泛型方法，使用泛型E，E可以为任意类型，可与方法所在类的类型相同，也可以不同。 //如下：这是一个泛型T的类，它有一个泛型E的泛型方法，这个泛型方法接收并返回一个E类型的参数（类型由实例决定） public class Test1 &lt;T&gt; &amp;#123; public &lt;E&gt; E function1(E a)&amp;#123; return a;&amp;#125; &amp;#125; // 1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。 // 2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。 public &lt;T&gt; T genericMethod(Class&lt;T&gt; tClass)throws InstantiationException , IllegalAccessException&amp;#123; T instance = tClass.newInstance(); return instance; &amp;#125; /* public &lt;T&gt; T showKeyName(Generic&lt;E&gt; container)&amp;#123; 为T的泛型接收一个为E的形参，这将发生异常 &amp;#125; */ 泛型通配符当操作类型时，不需要使用类型的具体功能而只使用Object类中的功能。那么可以用 ? 通配符来表未知类型。 ？和Number、String、Integer一样都是一种实际的类型，可以把？看成所有类型的父类。是一种真实的类型。 //’？’是类型实参，而不是类型形参 public void showKeyValue1(Generic&lt;?&gt; obj)&amp;#123; Log.d(&quot;泛型测试&quot;,&quot;key value is &quot; + obj.getKey()); &amp;#125; 要使静态方法接收泛型参数则必须将其写为泛型方法public class StaticGenerator&lt;T&gt; &amp;#123; //如：public static void show(T t)&amp;#123;..&amp;#125;,此时编译器会提示错误信息： // &quot;StaticGenerator cannot be refrenced from static context&quot; public static &lt;T&gt; void show(T t)&amp;#123; &amp;#125; &amp;#125; 边界泛型的上下边界添加，必须与泛型的声明在一起 /*只准传入某种类型的父类或；只准传入某种类型的子类。*/ public void showKeyValue1(Generic&lt;? extends Number&gt; obj)&amp;#123; Log.d(&quot;泛型测试&quot;,&quot;key value is &quot; + obj.getKey()); &amp;#125; /**泛型类的边界限定*/ public class Generic&lt;T extends Number&gt;&amp;#123; private T key; public Generic(T key) &amp;#123; this.key = key; &amp;#125; public T getKey()&amp;#123; return key; &amp;#125; &amp;#125; /**泛型方法的边界限定*/ public &lt;T extends Number&gt; T showKeyName(Generic&lt;T&gt; container)&amp;#123; System.out.println(&quot;container key :&quot; + container.getKey()); T test = container.getKey(); return test; &amp;#125; 限定 一个类如果没有限定类型，那么虚拟机将会使用Object对其类型进行替换 如果限定了类型，则将类型替换为限定的类型 如限定多个类型，则默认替换为第一个限定类型","categories":[{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]}],"categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://main2035.github.io/categories/ubuntu/"},{"name":"Python","slug":"Python","permalink":"https://main2035.github.io/categories/Python/"},{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/categories/Java/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://main2035.github.io/categories/JavaWeb/"},{"name":"dataStructure","slug":"dataStructure","permalink":"https://main2035.github.io/categories/dataStructure/"},{"name":"hexo","slug":"hexo","permalink":"https://main2035.github.io/categories/hexo/"},{"name":"SQL","slug":"SQL","permalink":"https://main2035.github.io/categories/SQL/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://main2035.github.io/categories/Ubuntu/"},{"name":"mysql","slug":"mysql","permalink":"https://main2035.github.io/categories/mysql/"},{"name":"JS","slug":"JS","permalink":"https://main2035.github.io/categories/JS/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://main2035.github.io/tags/shell/"},{"name":"anaconda","slug":"anaconda","permalink":"https://main2035.github.io/tags/anaconda/"},{"name":"sql","slug":"sql","permalink":"https://main2035.github.io/tags/sql/"},{"name":"AOP","slug":"AOP","permalink":"https://main2035.github.io/tags/AOP/"},{"name":"Ajax","slug":"Ajax","permalink":"https://main2035.github.io/tags/Ajax/"},{"name":"Java","slug":"Java","permalink":"https://main2035.github.io/tags/Java/"},{"name":"Jsp","slug":"Jsp","permalink":"https://main2035.github.io/tags/Jsp/"},{"name":"Java基础","slug":"Java基础","permalink":"https://main2035.github.io/tags/Java%E5%9F%BA%E7%A1%80/"},{"name":"hexo","slug":"hexo","permalink":"https://main2035.github.io/tags/hexo/"},{"name":"git","slug":"git","permalink":"https://main2035.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://main2035.github.io/tags/github/"},{"name":"Cookie","slug":"Cookie","permalink":"https://main2035.github.io/tags/Cookie/"},{"name":"Session","slug":"Session","permalink":"https://main2035.github.io/tags/Session/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://main2035.github.io/tags/Tomcat/"},{"name":"Java多线程编程","slug":"Java多线程编程","permalink":"https://main2035.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"},{"name":"SQL入门","slug":"SQL入门","permalink":"https://main2035.github.io/tags/SQL%E5%85%A5%E9%97%A8/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://main2035.github.io/tags/JavaWeb/"},{"name":"mysql","slug":"mysql","permalink":"https://main2035.github.io/tags/mysql/"},{"name":"JVM虚拟机","slug":"JVM虚拟机","permalink":"https://main2035.github.io/tags/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"Jvm虚拟机","slug":"Jvm虚拟机","permalink":"https://main2035.github.io/tags/Jvm%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"JS基础","slug":"JS基础","permalink":"https://main2035.github.io/tags/JS%E5%9F%BA%E7%A1%80/"},{"name":"JDBC","slug":"JDBC","permalink":"https://main2035.github.io/tags/JDBC/"},{"name":"Java设计模式","slug":"Java设计模式","permalink":"https://main2035.github.io/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"EffectiveJava","slug":"EffectiveJava","permalink":"https://main2035.github.io/tags/EffectiveJava/"}]}